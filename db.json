{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon-exac.png","path":"favicon-exac.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo-exa.png","path":"medias/logo-exa.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/7.jpg","path":"medias/banner/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/000002-16432992022c46.jpg","path":"medias/featureimages/000002-16432992022c46.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/000039-16663680393290.jpg","path":"medias/featureimages/000039-16663680393290.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/001647-16261066075c12.jpg","path":"medias/featureimages/001647-16261066075c12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/002234-1649780554b564.jpg","path":"medias/featureimages/002234-1649780554b564.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/002627-165548318768eb.jpg","path":"medias/featureimages/002627-165548318768eb.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/004357-165142343722be.jpg","path":"medias/featureimages/004357-165142343722be.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/004753-1665766073dbd7.jpg","path":"medias/featureimages/004753-1665766073dbd7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/005542-1673024142cc0c.jpg","path":"medias/featureimages/005542-1673024142cc0c.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/113533-16196673333107.jpg","path":"medias/featureimages/113533-16196673333107.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/164240-16305721603f7c.jpg","path":"medias/featureimages/164240-16305721603f7c.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/170924-1657012164b9c1.jpg","path":"medias/featureimages/170924-1657012164b9c1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/174938-15416705786a93.jpg","path":"medias/featureimages/174938-15416705786a93.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/181626-160733618619ea.jpg","path":"medias/featureimages/181626-160733618619ea.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/181813-154676989391cf.jpg","path":"medias/featureimages/181813-154676989391cf.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/193120-1653910280e63e.jpg","path":"medias/featureimages/193120-1653910280e63e.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/195235-1664452355894b.jpg","path":"medias/featureimages/195235-1664452355894b.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/201941-1622809181221e.jpg","path":"medias/featureimages/201941-1622809181221e.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/204247-1625056967ca9d.jpg","path":"medias/featureimages/204247-1625056967ca9d.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/204941-15776237817d95.jpg","path":"medias/featureimages/204941-15776237817d95.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/211548-1576934148247a.jpg","path":"medias/featureimages/211548-1576934148247a.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/212516-1566653116f355.jpg","path":"medias/featureimages/212516-1566653116f355.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/215333-1552830813b707.jpg","path":"medias/featureimages/215333-1552830813b707.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/215502-164173650294df.jpg","path":"medias/featureimages/215502-164173650294df.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/215522-16279989220b69.jpg","path":"medias/featureimages/215522-16279989220b69.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/222059-1621952459d6e3.jpg","path":"medias/featureimages/222059-1621952459d6e3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/223002-15666570026906.jpg","path":"medias/featureimages/223002-15666570026906.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/223850-1643294330d70f.jpg","path":"medias/featureimages/223850-1643294330d70f.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/224716-16191892361adb.jpg","path":"medias/featureimages/224716-16191892361adb.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/225153-1617979913c7ef.jpg","path":"medias/featureimages/225153-1617979913c7ef.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/231857-1618413537cdf6.jpg","path":"medias/featureimages/231857-1618413537cdf6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/232259-16655017792354.jpg","path":"medias/featureimages/232259-16655017792354.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/232848-16242029286ea1.jpg","path":"medias/featureimages/232848-16242029286ea1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/232902-16348301422218.jpg","path":"medias/featureimages/232902-16348301422218.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/233259-1657639979a66c.jpg","path":"medias/featureimages/233259-1657639979a66c.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/234040-1588520440aaef.jpg","path":"medias/featureimages/234040-1588520440aaef.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/235103-156415626384ce.jpg","path":"medias/featureimages/235103-156415626384ce.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/235313-16256731939b57.jpg","path":"medias/featureimages/235313-16256731939b57.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/anime_girl_gothic_eyes_red_15108_300x168.jpg","path":"medias/featureimages/anime_girl_gothic_eyes_red_15108_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/anime_girl_pen_air_sadness_12747_300x168.jpg","path":"medias/featureimages/anime_girl_pen_air_sadness_12747_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_book_reading_car_sky_sunrise_silence_11493_300x168.jpg","path":"medias/featureimages/girl_book_reading_car_sky_sunrise_silence_11493_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_cat_friends_213165_300x168.jpg","path":"medias/featureimages/girl_cat_friends_213165_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_dress_lanterns_214290_300x168.jpg","path":"medias/featureimages/girl_dress_lanterns_214290_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_gesture_mountains_213403_300x168.jpg","path":"medias/featureimages/girl_gesture_mountains_213403_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_glance_curls_211252_300x168.jpg","path":"medias/featureimages/girl_glance_curls_211252_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_glance_tears_214381_300x168.jpg","path":"medias/featureimages/girl_glance_tears_214381_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_kimono_pagoda_214087_300x168.jpg","path":"medias/featureimages/girl_kimono_pagoda_214087_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_kimono_pagoda_213584_300x168.jpg","path":"medias/featureimages/girl_kimono_pagoda_213584_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_kimono_umbrella_207424_300x168.jpg","path":"medias/featureimages/girl_kimono_umbrella_207424_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_neko_sakura_205062_300x168.jpg","path":"medias/featureimages/girl_neko_sakura_205062_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_kitten_flower_141058_1280x720.jpg","path":"medias/featureimages/girl_kitten_flower_141058_1280x720.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_pose_halo_214118_300x168.jpg","path":"medias/featureimages/girl_pose_halo_214118_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_sleep_study_213518_300x168.jpg","path":"medias/featureimages/girl_sleep_study_213518_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_station_twilight_213487_300x168.jpg","path":"medias/featureimages/girl_station_twilight_213487_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_sun_rays_213902_300x168.jpg","path":"medias/featureimages/girl_sun_rays_213902_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_umbrella_rain_151317_1280x720.jpg","path":"medias/featureimages/girl_umbrella_rain_151317_1280x720.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_umbrella_rain_212362_300x168.jpg","path":"medias/featureimages/girl_umbrella_rain_212362_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girls_blood_bite_vampire_dress_13520_300x168.jpg","path":"medias/featureimages/girls_blood_bite_vampire_dress_13520_300x168.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"524845c5fc57a42d78be3023483676a35034d6b7","modified":1673819280411},{"_id":"source/_posts/cloud.md.exa","hash":"8bcd28a4b72569a85b910c7454d7a1ddfc739535","modified":1673820756151},{"_id":"source/_posts/wifi密码破解.md","hash":"45cb0bf486a3b363576e9251a9dd1ab7ed8c7bbc","modified":1674100870487},{"_id":"source/_posts/hexo-dbackup.md","hash":"20c2f14a829a9d3616a182b03de768dcddf5ee46","modified":1674100870487},{"_id":"source/_posts/theme-install.md","hash":"43ccd818797dc98c273dd7a6b7815c6aba0421b7","modified":1674100870487},{"_id":"source/about/index.md","hash":"30454429f5302362395921dec044fa0645f8d80c","modified":1673819280412},{"_id":"source/categories/index.md","hash":"70a70aa6f8b9e011539e42bedd44b0182090d435","modified":1673819280412},{"_id":"source/tags/index.md","hash":"097961fc1161ba86584c7f622ea031d33cc8eb18","modified":1673819280412},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1673819280412},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1673819280413},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1673819280413},{"_id":"themes/hexo-theme-matery/README.md","hash":"3cf955698147323913705be823ae834ae2f1ad00","modified":1673819280413},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"18e4839b6a4aa528f34312642e4376841c554e15","modified":1674130096475},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"48bdfed3b50bfe7c811746e6521cc8a864233f29","modified":1673819280413},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1673819280415},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1673819280423},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"88e23163aae5dff7a2e7050f55c3754f0e76ae68","modified":1673819280422},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1673819280423},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1673819280423},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1673819280423},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"a709898778c161dcb6d5bea047b8cb921628040c","modified":1673819280424},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1673819280423},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"e6e6ab8624081e0f5e2d459427ca5069d7435c19","modified":1673819280424},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"3ed55e0437a21b7ffd10dac5da79ce48a25b753a","modified":1673819280424},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1673819280424},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1673819280424},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1673819280424},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1673819280414},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1673819280414},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1673819280414},{"_id":"themes/hexo-theme-matery/source/favicon-exac.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1673819280426},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"c1e0b3f97942dbd8cee452bc3401fa817c097d27","modified":1673819280426},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1673819280415},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1673819280415},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"58a7a07f8ab81ecc19a78d897955ca1ad73defb3","modified":1673819280415},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"6b4341fbba291c53de91babb2a0d69940a8d6547","modified":1673819280415},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1673819280415},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1673819280416},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1673819280416},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"0ff0cf2768cfe29a664793b43ab6e2c1a70b633a","modified":1673835860733},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1673819280416},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1673819280416},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"baf823506b71f257a42b44adaa52d42344b9cb65","modified":1673819280417},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1673819280416},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1673819280417},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1673819280417},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1673819280417},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1673819280418},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"624d9cb78a5507895ab50d20f3f0c497a5025d08","modified":1673819280417},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1673819280417},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"e1264587db510ae1885405aed433592291ae74c4","modified":1673819280417},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1673819280418},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1673819280418},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1673819280418},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"89045a73ce4c486084c8a3ade686676e5d12e5e7","modified":1673819280418},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"4c552a47ed5abda4f3f28fc55899e6008007a996","modified":1673819280418},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1673819280419},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1673819280419},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1673819280419},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1673819280419},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1673819280419},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1673819280419},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1673819280420},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1673819280420},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"ef335be75e3f26580583af8699b8497f350ae200","modified":1673819280420},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1673819280420},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1673819280420},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1673819280420},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1673819280421},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1673819280421},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1673819280421},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1673819280421},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1673819280421},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1673819280422},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1673819280422},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1673819280422},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1673819280422},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1673819280422},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1673819280425},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1673819280425},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"31ae414f6dd9cdfcfda4bdf2dfb5310bf4167daa","modified":1673833282489},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1673819280426},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1673819280426},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1673819280425},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"02e6072d766c6f631b5b75e1d774409103605491","modified":1673819280426},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1673819280584},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1673819280584},{"_id":"themes/hexo-theme-matery/source/medias/logo-exa.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1673819280597},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1673819280597},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1673819280427},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1673819280427},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1673819280427},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1673819280428},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1673819280448},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1673819280428},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1673819280448},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1673819280448},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1673819280448},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1673819280449},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1673819280449},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1673819280449},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1673819280449},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1673819280450},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1673819280450},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1673819280455},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1673819280457},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1673819280458},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1673819280458},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1673819280458},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1673819280462},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1673819280464},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1673819280464},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"005185ce5c8250503a75c370a9eb8f044f016c78","modified":1673819280464},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f48db880f583ad8d078ebaaa7afe60c2991e2997","modified":1673819280464},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1673819280465},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1673819280467},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1673819280467},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"43d08aa86d6236b91aa7d90deffe159fd87afcac","modified":1673829856389},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/anime_girl_gothic_eyes_red_15108_300x168.jpg","hash":"ae27d6f21794d4e57cde6a131ba95a7a647caaa8","modified":1673828237202},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/anime_girl_pen_air_sadness_12747_300x168.jpg","hash":"22b190aa87cbcaaac29dc4d5f178552fe8cf8296","modified":1673828432250},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_book_reading_car_sky_sunrise_silence_11493_300x168.jpg","hash":"dc0e3b298220666961c9b9321875179d9f1d7571","modified":1673828361162},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_gesture_mountains_213403_300x168.jpg","hash":"6b237052803e669f9a6c12615fdd745934d10880","modified":1673828451250},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_cat_friends_213165_300x168.jpg","hash":"24ec755ccc16e6210fa3d4e827a49034201d2f91","modified":1673828312876},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_dress_lanterns_214290_300x168.jpg","hash":"e2ad148b50222673949dd81e3d68a4b9d25b6e3c","modified":1673828300193},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_glance_tears_214381_300x168.jpg","hash":"2b0e0fef19d2d06bdc71185ef703cd986df400e9","modified":1673828491794},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_glance_curls_211252_300x168.jpg","hash":"120d713da139a74b5ae984f1d0079b0b07eeb0e3","modified":1673828402638},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_kimono_pagoda_214087_300x168.jpg","hash":"83db0d9380b4a17a21ce232a0216350af46146c0","modified":1673828409344},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_kimono_pagoda_213584_300x168.jpg","hash":"3cea912bc6deb839938a09bcdcdf6d61dd710783","modified":1673828365956},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_kimono_umbrella_207424_300x168.jpg","hash":"97a0f06792103e3cd913f8776d46395a0051d1b0","modified":1673828457798},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_neko_sakura_205062_300x168.jpg","hash":"c05bf23265656383104b51a6517057a228b97a98","modified":1673828329684},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_pose_halo_214118_300x168.jpg","hash":"055b6daffff37906450799186076473bcb010fa7","modified":1673828442340},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_sleep_study_213518_300x168.jpg","hash":"19137ce4c6ffa719aa50c504f01dee9da627e677","modified":1673828325035},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_station_twilight_213487_300x168.jpg","hash":"50d0a4a519d4bdf8111696e6d1062d5d68ca0842","modified":1673828383191},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_sun_rays_213902_300x168.jpg","hash":"57206ba9446a8d59eebec0d2b864a9d56d79fb43","modified":1673828219253},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_umbrella_rain_212362_300x168.jpg","hash":"d98203704afd51c4ac4b3063314c40593aaef55d","modified":1673828503693},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"3fb2fd809236f785d2dbbdba7f18bceab0a8fe16","modified":1673819280600},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girls_blood_bite_vampire_dress_13520_300x168.jpg","hash":"5ccff65ba15848e6dab41f40c76cc959bb62b1cd","modified":1673828426611},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1673819280437},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1673819280438},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1673819280438},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1673819280439},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1673819280459},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1673819280460},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1673819280459},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1673819280460},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1673819280460},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1673819280460},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1673819280461},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1673819280460},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1673819280461},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1673819280466},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1673819280461},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1673819280467},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1673819280465},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1673819280465},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1673819280466},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1673819280466},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1673819280466},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1673819280450},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1673819280457},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1673819280459},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1673819280468},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"38bb2b7cb4edae064564e5927da3874afb77348a","modified":1673819280559},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"eb01ea050d5c1770306e64f7115c1284c2974152","modified":1673829588266},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/000002-16432992022c46.jpg","hash":"82624afbff6db27e1965e8734b5dd643ccf60f93","modified":1673829273865},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/001647-16261066075c12.jpg","hash":"71918e3127d590956a5090e13b04665d43f937da","modified":1673829397762},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/000039-16663680393290.jpg","hash":"ea622e7ca2a0470692fdf88dc29fc22d93b7ee02","modified":1673829054521},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/002234-1649780554b564.jpg","hash":"3899d43524d2892907bdf460a8328690ed8eb155","modified":1673829224740},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/002627-165548318768eb.jpg","hash":"844a1a3928efd1843faa3579423917266dd4fa04","modified":1673829082568},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/004753-1665766073dbd7.jpg","hash":"22dc94f99dd3bea9da14800f2aa0fe4acc3166c6","modified":1673829024924},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/004357-165142343722be.jpg","hash":"aee2af1ca761bd400cd0065911fbfa2567382ce6","modified":1673829234994},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"9c71c69405869d3ee22b548ecd17dcdac178df15","modified":1673829149626},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/005542-1673024142cc0c.jpg","hash":"6a2d67bf52845d8e6e49c22a91f12e6450503c91","modified":1673828911092},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"3ad3df5c15b2a557d27df35cde3d93ed4944a3b3","modified":1673829575429},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"4cd7647d09b77cae65d255d3b039a2cc4f9450b9","modified":1673829501520},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/113533-16196673333107.jpg","hash":"5d1c6b6c0bf2688e572ce1d77c28a3e86eb7bb3e","modified":1673829450865},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"02740eae36f43e94f1521021f92ea519e0fd0035","modified":1673828984868},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"435f820d1a85fe763daf58d3003e19f4ac34a5ea","modified":1673829468936},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"d242b8ca89ffb33b60c2eb9251f090d983276395","modified":1673828848802},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"32884d27fc983019d9b3227ef534a3717560d13a","modified":1673829078320},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"a0ff9bf1918d6ba37c0350a558dcecbffaab0f59","modified":1673829476546},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/174938-15416705786a93.jpg","hash":"cef800e2b4540131e77203fe7ec9a4aaedd9fadf","modified":1673829864644},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/170924-1657012164b9c1.jpg","hash":"927120c710f97888f86ac6e64fe3fbf8bc789e54","modified":1673829144313},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/181626-160733618619ea.jpg","hash":"6fb877d48646ce3b81930984c9de7705c8ccee07","modified":1673829156775},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"90b1ada061d7ce0d8089d24e8122de3078170123","modified":1673829136729},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/181813-154676989391cf.jpg","hash":"fe1261560cd62ddcc756fc7432637eafc2456db7","modified":1673829791095},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/193120-1653910280e63e.jpg","hash":"16a7722811f37433c0b6984c7a6d1c1e16fdd540","modified":1673829173995},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"b996a455066eeb29aa15d70bb407c30e0ebe8461","modified":1673829266380},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"1c07d50835a54dd1e311103243376cb5bdf04141","modified":1673828996772},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/195235-1664452355894b.jpg","hash":"1609a82828d0470388385bfd76ad90d3ac008f54","modified":1673829093024},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"49a095ed65b6887b2c85bec1db4783d213b2a21f","modified":1673829125247},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/201941-1622809181221e.jpg","hash":"3bdfd57248732f1b742b704188d892f0c8dfab4c","modified":1673829433147},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/204247-1625056967ca9d.jpg","hash":"805468e52dfb48e1961c90a05229b6ae6d0089dd","modified":1673829406022},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/204941-15776237817d95.jpg","hash":"dca68c3cd3d46482c5c62f05d7de63ac07ba54ec","modified":1673829685634},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"177dfd9517d77741154e7bda5b20baf24f428e41","modified":1673829311782},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/211548-1576934148247a.jpg","hash":"01a86995ce21af793667fd1222fd676dff7a6504","modified":1673829678110},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/215502-164173650294df.jpg","hash":"5b9e2fa1c596ce657dce69949ef72f9c2a9be65d","modified":1673829521481},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/215333-1552830813b707.jpg","hash":"6ddda966970d39aae090d7c6f1b5aaa3f2d02d35","modified":1673829763801},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/212516-1566653116f355.jpg","hash":"3312d462a519a4dfb1f061ee350978aa46701f09","modified":1673828903511},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/215522-16279989220b69.jpg","hash":"1cb25b9968bf7bfb63122429db10582380a0133c","modified":1673829382037},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"d4d35e6e9e7f6d7a6d3e23e2c77b7470251c313c","modified":1673829409957},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/222059-1621952459d6e3.jpg","hash":"130f94fbc107163d3c7cabe8669b776ee7be5cc1","modified":1673829444966},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/223850-1643294330d70f.jpg","hash":"f281c0f72fa243b835eafd57994b54246d4bbb4f","modified":1673829283114},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/223002-15666570026906.jpg","hash":"7a078594dfc2b509664ae19c69acec9c0f97e84c","modified":1673829714323},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/224716-16191892361adb.jpg","hash":"ae74586abc1284487732d820091cfcd8be63845d","modified":1673828854829},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/231857-1618413537cdf6.jpg","hash":"f8191b0d1271f9679cc61e3da39116d0d09cf4b4","modified":1673829482821},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"882c06bb61dffa250dd6e29051e3241def5060e0","modified":1673829262111},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/232259-16655017792354.jpg","hash":"63693ab195995054cda209413ac7f601a80de21f","modified":1673829012956},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/232848-16242029286ea1.jpg","hash":"beda1ed802d2fbb08587d0beca6fa3dcf1d2b89a","modified":1673829415622},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/233259-1657639979a66c.jpg","hash":"884eff307f82586df7192a3956380f565b5cd3d0","modified":1673828968975},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/234040-1588520440aaef.jpg","hash":"71fdc4b5960458b04761bd4ecf465c2eeb56e792","modified":1673829581602},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/235103-156415626384ce.jpg","hash":"d06c612548f4830396ef4ccba95596906c089c0a","modified":1673829734732},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/235313-16256731939b57.jpg","hash":"90eec923c7e0e18dd2b95e2b5cb25dbabb5c11d7","modified":1673829372312},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/24.jpg","hash":"9be488f43386b385d0d86d2a47a418e811908e11","modified":1673829071213},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/25.jpg","hash":"0671830caa1ab6338756f82dbb5a297db471901e","modified":1673829850801},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"e1a105d87f1fac97c4e05fb09aa834e3effea2e2","modified":1673829105302},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"21153c02acd15406cc6d463910233e6661bbbf30","modified":1673829029431},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"5aeb3b1ed9a79f1b423324423bde18619b4c0cdc","modified":1673829115214},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"743ff907f7073da15185f84543a21efaa385ab22","modified":1673829550132},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"40070327bfa75bb31d6a8613a0740ed06fb81095","modified":1673828841763},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"5c0bc0eaa10ee087ffcfbc746a3ab3e9e5c784ac","modified":1673829184826},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"2cfebe842f949aae7fd64e93504225e3cb3484a1","modified":1673829213106},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"d5886ae22f97ee6cce167bbaa4fb258509d897ae","modified":1673819280599},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1673819280430},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1673819280435},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1673819280436},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1673819280436},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1673819280447},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1673819280448},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1673819280429},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1673819280585},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"25b46490ec213e615d369ef370475a3477b90e11","modified":1673819280599},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1673819280456},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1673819280462},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1673819280463},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1673819280469},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/164240-16305721603f7c.jpg","hash":"e2339c69a82a9676f0cc2ee66e7f9a8698fc7a48","modified":1673829322781},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/225153-1617979913c7ef.jpg","hash":"df0ae589f9e18e3b65bbd394b9b658676663beb7","modified":1673829651331},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/232902-16348301422218.jpg","hash":"505adbbe436476d6cfe244fafa7736cdb57a45b7","modified":1673829166148},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_kitten_flower_141058_1280x720.jpg","hash":"f8cee3a9e9b1d9a3868d95cc9bfaa7c728f7f4c3","modified":1673828171592},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/girl_umbrella_rain_151317_1280x720.jpg","hash":"01b9ac0439d61672e26f552af48d3dcea8a474ed","modified":1673828192420},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1673819280438},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1673819280441},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1673819280447},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"09456a1b41efb3093a7e3cca57ca4790b12f9b05","modified":1673819280470},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"45f61c72d281c694acbed35d71791c55db739265","modified":1673819280475},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1673819280434},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1673819280455},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1673819280445},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"73fc2f15971aa69089345f5a94be284c186a5843","modified":1673819280484},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"b2309b06560253c878e8a71a24a95c6631a7fc4e","modified":1673819280503},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"48812e3d4fda9d1aa9b73ba217d23c3b87f33d8b","modified":1673819280528},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"6da529d56aafd651f663944a7c0b80aa358020c1","modified":1673819280584},{"_id":"themes/hexo-theme-matery/source/medias/banner/7.jpg","hash":"1bb095e607f5d5475622af3b940faddffa586895","modified":1673819280552},{"_id":"public/search.xml","hash":"916d63ddd4a8713fb79d87d0cb19f6f33b36f04e","modified":1674128798258},{"_id":"public/404.html","hash":"9180fd22bee27c768195ceded7c224156f2c7289","modified":1674130118407},{"_id":"public/about/index.html","hash":"d45bd13303d7f0627ea554b5749cabd58f318251","modified":1674130118407},{"_id":"public/categories/index.html","hash":"b21e10a3b467d0f4c3938a579f1774f7cbcb79f1","modified":1674130118407},{"_id":"public/tags/index.html","hash":"27c6673f1b09c6d63cf8d0da385dca1bd76ac3bb","modified":1674130118407},{"_id":"public/2023/01/16/wifi-mi-ma-po-jie/index.html","hash":"a88eb56910e5438bc3d2b468f9458d71a755d511","modified":1674130118407},{"_id":"public/2023/01/16/hexo-dbackup/index.html","hash":"7899f0de3961c97d94c727a939a27d906935845f","modified":1674130118407},{"_id":"public/2023/01/15/theme-install/index.html","hash":"35271fe96a70c565156fb9ecf72ad55e75ece8ac","modified":1674130118407},{"_id":"public/archives/index.html","hash":"db8d80a41c78e447576bd0cdf2648ab168ff1d04","modified":1674130118407},{"_id":"public/archives/2023/index.html","hash":"634fca9f17a9f04e4b76be032a44d19555c1b42a","modified":1674130118407},{"_id":"public/archives/2023/01/index.html","hash":"21f401d531f482ff244cd865b09f8c7666108ef4","modified":1674130118407},{"_id":"public/categories/Linux/index.html","hash":"c1fef45d4b841ee35208c118ced81558d0cd81c5","modified":1674130118407},{"_id":"public/categories/博客部署/index.html","hash":"84f5195ec6681671fa12f2b111d03cdc6bfaa2a3","modified":1674130118407},{"_id":"public/tags/wifi/index.html","hash":"a1c0a103e4e87899ca95adf2ba37a612bd31eb7b","modified":1674130118407},{"_id":"public/tags/hexo/index.html","hash":"b6f8ae0cb51f9b37a1159be43145e64f1646e5c3","modified":1674130118407},{"_id":"public/index.html","hash":"a304b983c75f20b7143c353ae449b5a41a985f95","modified":1674130118407},{"_id":"public/favicon-exac.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1673831694342},{"_id":"public/favicon.png","hash":"c1e0b3f97942dbd8cee452bc3401fa817c097d27","modified":1673831694342},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1673831694342},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1673831694342},{"_id":"public/medias/logo-exa.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1673831694342},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1673831694342},{"_id":"public/medias/featureimages/10.jpg","hash":"43d08aa86d6236b91aa7d90deffe159fd87afcac","modified":1673831694342},{"_id":"public/medias/featureimages/anime_girl_pen_air_sadness_12747_300x168.jpg","hash":"22b190aa87cbcaaac29dc4d5f178552fe8cf8296","modified":1673831694342},{"_id":"public/medias/featureimages/anime_girl_gothic_eyes_red_15108_300x168.jpg","hash":"ae27d6f21794d4e57cde6a131ba95a7a647caaa8","modified":1673831694342},{"_id":"public/medias/featureimages/girl_book_reading_car_sky_sunrise_silence_11493_300x168.jpg","hash":"dc0e3b298220666961c9b9321875179d9f1d7571","modified":1673831694342},{"_id":"public/medias/featureimages/girl_cat_friends_213165_300x168.jpg","hash":"24ec755ccc16e6210fa3d4e827a49034201d2f91","modified":1673831694342},{"_id":"public/medias/featureimages/girl_gesture_mountains_213403_300x168.jpg","hash":"6b237052803e669f9a6c12615fdd745934d10880","modified":1673831694342},{"_id":"public/medias/featureimages/girl_dress_lanterns_214290_300x168.jpg","hash":"e2ad148b50222673949dd81e3d68a4b9d25b6e3c","modified":1673831694342},{"_id":"public/medias/featureimages/girl_glance_curls_211252_300x168.jpg","hash":"120d713da139a74b5ae984f1d0079b0b07eeb0e3","modified":1673831694342},{"_id":"public/medias/featureimages/girl_glance_tears_214381_300x168.jpg","hash":"2b0e0fef19d2d06bdc71185ef703cd986df400e9","modified":1673831694342},{"_id":"public/medias/featureimages/girl_kimono_pagoda_214087_300x168.jpg","hash":"83db0d9380b4a17a21ce232a0216350af46146c0","modified":1673831694342},{"_id":"public/medias/featureimages/girl_kimono_pagoda_213584_300x168.jpg","hash":"3cea912bc6deb839938a09bcdcdf6d61dd710783","modified":1673831694342},{"_id":"public/medias/featureimages/girl_kimono_umbrella_207424_300x168.jpg","hash":"97a0f06792103e3cd913f8776d46395a0051d1b0","modified":1673831694342},{"_id":"public/medias/featureimages/girl_neko_sakura_205062_300x168.jpg","hash":"c05bf23265656383104b51a6517057a228b97a98","modified":1673831694342},{"_id":"public/medias/featureimages/girl_sleep_study_213518_300x168.jpg","hash":"19137ce4c6ffa719aa50c504f01dee9da627e677","modified":1673831694342},{"_id":"public/medias/featureimages/girl_station_twilight_213487_300x168.jpg","hash":"50d0a4a519d4bdf8111696e6d1062d5d68ca0842","modified":1673831694342},{"_id":"public/medias/featureimages/girl_pose_halo_214118_300x168.jpg","hash":"055b6daffff37906450799186076473bcb010fa7","modified":1673831694342},{"_id":"public/medias/featureimages/girl_sun_rays_213902_300x168.jpg","hash":"57206ba9446a8d59eebec0d2b864a9d56d79fb43","modified":1673831694342},{"_id":"public/medias/featureimages/girl_umbrella_rain_212362_300x168.jpg","hash":"d98203704afd51c4ac4b3063314c40593aaef55d","modified":1673831694342},{"_id":"public/medias/featureimages/girls_blood_bite_vampire_dress_13520_300x168.jpg","hash":"5ccff65ba15848e6dab41f40c76cc959bb62b1cd","modified":1673831694342},{"_id":"public/medias/reward/wechat.png","hash":"3fb2fd809236f785d2dbbdba7f18bceab0a8fe16","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1673831694342},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1673831694342},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1673831694342},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1673831694342},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1673831694342},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1673831694342},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1673831694342},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1673831694342},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1673831694342},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1673831694342},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1673831694342},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1673831694342},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1673831694342},{"_id":"public/medias/banner/1.jpg","hash":"38bb2b7cb4edae064564e5927da3874afb77348a","modified":1673831694342},{"_id":"public/medias/featureimages/0.jpg","hash":"eb01ea050d5c1770306e64f7115c1284c2974152","modified":1673831694342},{"_id":"public/medias/featureimages/001647-16261066075c12.jpg","hash":"71918e3127d590956a5090e13b04665d43f937da","modified":1673831694342},{"_id":"public/medias/featureimages/000039-16663680393290.jpg","hash":"ea622e7ca2a0470692fdf88dc29fc22d93b7ee02","modified":1673831694342},{"_id":"public/medias/featureimages/002234-1649780554b564.jpg","hash":"3899d43524d2892907bdf460a8328690ed8eb155","modified":1673831694342},{"_id":"public/medias/featureimages/000002-16432992022c46.jpg","hash":"82624afbff6db27e1965e8734b5dd643ccf60f93","modified":1673831694342},{"_id":"public/medias/featureimages/002627-165548318768eb.jpg","hash":"844a1a3928efd1843faa3579423917266dd4fa04","modified":1673831694342},{"_id":"public/medias/featureimages/004357-165142343722be.jpg","hash":"aee2af1ca761bd400cd0065911fbfa2567382ce6","modified":1673831694342},{"_id":"public/medias/featureimages/005542-1673024142cc0c.jpg","hash":"6a2d67bf52845d8e6e49c22a91f12e6450503c91","modified":1673831694342},{"_id":"public/medias/featureimages/004753-1665766073dbd7.jpg","hash":"22dc94f99dd3bea9da14800f2aa0fe4acc3166c6","modified":1673831694342},{"_id":"public/medias/featureimages/1.jpg","hash":"9c71c69405869d3ee22b548ecd17dcdac178df15","modified":1673831694342},{"_id":"public/medias/featureimages/11.jpg","hash":"3ad3df5c15b2a557d27df35cde3d93ed4944a3b3","modified":1673831694342},{"_id":"public/medias/featureimages/113533-16196673333107.jpg","hash":"5d1c6b6c0bf2688e572ce1d77c28a3e86eb7bb3e","modified":1673831694342},{"_id":"public/medias/featureimages/12.jpg","hash":"4cd7647d09b77cae65d255d3b039a2cc4f9450b9","modified":1673831694342},{"_id":"public/medias/featureimages/13.jpg","hash":"02740eae36f43e94f1521021f92ea519e0fd0035","modified":1673831694342},{"_id":"public/medias/featureimages/14.jpg","hash":"32884d27fc983019d9b3227ef534a3717560d13a","modified":1673831694342},{"_id":"public/medias/featureimages/15.jpg","hash":"435f820d1a85fe763daf58d3003e19f4ac34a5ea","modified":1673831694342},{"_id":"public/medias/featureimages/16.jpg","hash":"d242b8ca89ffb33b60c2eb9251f090d983276395","modified":1673831694342},{"_id":"public/medias/featureimages/17.jpg","hash":"a0ff9bf1918d6ba37c0350a558dcecbffaab0f59","modified":1673831694342},{"_id":"public/medias/featureimages/170924-1657012164b9c1.jpg","hash":"927120c710f97888f86ac6e64fe3fbf8bc789e54","modified":1673831694342},{"_id":"public/medias/featureimages/174938-15416705786a93.jpg","hash":"cef800e2b4540131e77203fe7ec9a4aaedd9fadf","modified":1673831694342},{"_id":"public/medias/featureimages/18.jpg","hash":"90b1ada061d7ce0d8089d24e8122de3078170123","modified":1673831694342},{"_id":"public/medias/featureimages/181626-160733618619ea.jpg","hash":"6fb877d48646ce3b81930984c9de7705c8ccee07","modified":1673831694342},{"_id":"public/medias/featureimages/181813-154676989391cf.jpg","hash":"fe1261560cd62ddcc756fc7432637eafc2456db7","modified":1673831694342},{"_id":"public/medias/featureimages/19.jpg","hash":"b996a455066eeb29aa15d70bb407c30e0ebe8461","modified":1673831694342},{"_id":"public/medias/featureimages/193120-1653910280e63e.jpg","hash":"16a7722811f37433c0b6984c7a6d1c1e16fdd540","modified":1673831694342},{"_id":"public/medias/featureimages/2.jpg","hash":"1c07d50835a54dd1e311103243376cb5bdf04141","modified":1673831694342},{"_id":"public/medias/featureimages/195235-1664452355894b.jpg","hash":"1609a82828d0470388385bfd76ad90d3ac008f54","modified":1673831694342},{"_id":"public/medias/featureimages/20.jpg","hash":"49a095ed65b6887b2c85bec1db4783d213b2a21f","modified":1673831694342},{"_id":"public/medias/featureimages/201941-1622809181221e.jpg","hash":"3bdfd57248732f1b742b704188d892f0c8dfab4c","modified":1673831694342},{"_id":"public/medias/featureimages/204247-1625056967ca9d.jpg","hash":"805468e52dfb48e1961c90a05229b6ae6d0089dd","modified":1673831694342},{"_id":"public/medias/featureimages/204941-15776237817d95.jpg","hash":"dca68c3cd3d46482c5c62f05d7de63ac07ba54ec","modified":1673831694342},{"_id":"public/medias/featureimages/211548-1576934148247a.jpg","hash":"01a86995ce21af793667fd1222fd676dff7a6504","modified":1673831694342},{"_id":"public/medias/featureimages/21.jpg","hash":"177dfd9517d77741154e7bda5b20baf24f428e41","modified":1673831694342},{"_id":"public/medias/featureimages/212516-1566653116f355.jpg","hash":"3312d462a519a4dfb1f061ee350978aa46701f09","modified":1673831694342},{"_id":"public/medias/featureimages/215333-1552830813b707.jpg","hash":"6ddda966970d39aae090d7c6f1b5aaa3f2d02d35","modified":1673831694342},{"_id":"public/medias/featureimages/215502-164173650294df.jpg","hash":"5b9e2fa1c596ce657dce69949ef72f9c2a9be65d","modified":1673831694342},{"_id":"public/medias/featureimages/215522-16279989220b69.jpg","hash":"1cb25b9968bf7bfb63122429db10582380a0133c","modified":1673831694342},{"_id":"public/medias/featureimages/22.jpg","hash":"d4d35e6e9e7f6d7a6d3e23e2c77b7470251c313c","modified":1673831694342},{"_id":"public/medias/featureimages/222059-1621952459d6e3.jpg","hash":"130f94fbc107163d3c7cabe8669b776ee7be5cc1","modified":1673831694342},{"_id":"public/medias/featureimages/223002-15666570026906.jpg","hash":"7a078594dfc2b509664ae19c69acec9c0f97e84c","modified":1673831694342},{"_id":"public/medias/featureimages/223850-1643294330d70f.jpg","hash":"f281c0f72fa243b835eafd57994b54246d4bbb4f","modified":1673831694342},{"_id":"public/medias/featureimages/224716-16191892361adb.jpg","hash":"ae74586abc1284487732d820091cfcd8be63845d","modified":1673831694342},{"_id":"public/medias/featureimages/23.jpg","hash":"882c06bb61dffa250dd6e29051e3241def5060e0","modified":1673831694342},{"_id":"public/medias/featureimages/231857-1618413537cdf6.jpg","hash":"f8191b0d1271f9679cc61e3da39116d0d09cf4b4","modified":1673831694342},{"_id":"public/medias/featureimages/232259-16655017792354.jpg","hash":"63693ab195995054cda209413ac7f601a80de21f","modified":1673831694342},{"_id":"public/medias/featureimages/232848-16242029286ea1.jpg","hash":"beda1ed802d2fbb08587d0beca6fa3dcf1d2b89a","modified":1673831694342},{"_id":"public/medias/featureimages/233259-1657639979a66c.jpg","hash":"884eff307f82586df7192a3956380f565b5cd3d0","modified":1673831694342},{"_id":"public/medias/featureimages/234040-1588520440aaef.jpg","hash":"71fdc4b5960458b04761bd4ecf465c2eeb56e792","modified":1673831694342},{"_id":"public/medias/featureimages/235103-156415626384ce.jpg","hash":"d06c612548f4830396ef4ccba95596906c089c0a","modified":1673831694342},{"_id":"public/medias/featureimages/235313-16256731939b57.jpg","hash":"90eec923c7e0e18dd2b95e2b5cb25dbabb5c11d7","modified":1673831694342},{"_id":"public/medias/featureimages/24.jpg","hash":"9be488f43386b385d0d86d2a47a418e811908e11","modified":1673831694342},{"_id":"public/medias/featureimages/25.jpg","hash":"0671830caa1ab6338756f82dbb5a297db471901e","modified":1673831694342},{"_id":"public/medias/featureimages/3.jpg","hash":"e1a105d87f1fac97c4e05fb09aa834e3effea2e2","modified":1673831694342},{"_id":"public/medias/featureimages/4.jpg","hash":"743ff907f7073da15185f84543a21efaa385ab22","modified":1673831694342},{"_id":"public/medias/featureimages/5.jpg","hash":"21153c02acd15406cc6d463910233e6661bbbf30","modified":1673831694342},{"_id":"public/medias/featureimages/6.jpg","hash":"5aeb3b1ed9a79f1b423324423bde18619b4c0cdc","modified":1673831694342},{"_id":"public/medias/featureimages/7.jpg","hash":"40070327bfa75bb31d6a8613a0740ed06fb81095","modified":1673831694342},{"_id":"public/medias/featureimages/9.jpg","hash":"2cfebe842f949aae7fd64e93504225e3cb3484a1","modified":1673831694342},{"_id":"public/medias/featureimages/8.jpg","hash":"5c0bc0eaa10ee087ffcfbc746a3ab3e9e5c784ac","modified":1673831694342},{"_id":"public/medias/reward/alipay.jpg","hash":"d5886ae22f97ee6cce167bbaa4fb258509d897ae","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1673831694342},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1673831694342},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1673831694342},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1673831694342},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1673831694342},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1673831694342},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1673831694342},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1673831694342},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1673831694342},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1673831694342},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1673831694342},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1673831694342},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1673831694342},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1673831694342},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1673831694342},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1673831694342},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1673831694342},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1673831694342},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1673831694342},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1673831694342},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1673831694342},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1673831694342},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1673831694342},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1673831694342},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1673831694342},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1673831694342},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1673831694342},{"_id":"public/css/matery.css","hash":"734d3f76b6bd3a31685e9b061e223a8a2b01a695","modified":1673833288876},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1673831694342},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1673831694342},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1673831694342},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1673831694342},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1673831694342},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1673831694342},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1673831694342},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1673831694342},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1673831694342},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1673831694342},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1673831694342},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1673831694342},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1673831694342},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1673831694342},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1673831694342},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1673831694342},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1673831694342},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1673831694342},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1673831694342},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1673831694342},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1673831694342},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1673831694342},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1673831694342},{"_id":"public/medias/logo.png","hash":"25b46490ec213e615d369ef370475a3477b90e11","modified":1673831694342},{"_id":"public/medias/featureimages/164240-16305721603f7c.jpg","hash":"e2339c69a82a9676f0cc2ee66e7f9a8698fc7a48","modified":1673831694342},{"_id":"public/medias/featureimages/225153-1617979913c7ef.jpg","hash":"df0ae589f9e18e3b65bbd394b9b658676663beb7","modified":1673831694342},{"_id":"public/medias/featureimages/232902-16348301422218.jpg","hash":"505adbbe436476d6cfe244fafa7736cdb57a45b7","modified":1673831694342},{"_id":"public/medias/featureimages/girl_kitten_flower_141058_1280x720.jpg","hash":"f8cee3a9e9b1d9a3868d95cc9bfaa7c728f7f4c3","modified":1673831694342},{"_id":"public/medias/featureimages/girl_umbrella_rain_151317_1280x720.jpg","hash":"01b9ac0439d61672e26f552af48d3dcea8a474ed","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1673831694342},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1673831694342},{"_id":"public/medias/avatar.jpg","hash":"09456a1b41efb3093a7e3cca57ca4790b12f9b05","modified":1673831694342},{"_id":"public/medias/banner/0.jpg","hash":"45f61c72d281c694acbed35d71791c55db739265","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1673831694342},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1673831694342},{"_id":"public/medias/banner/4.jpg","hash":"73fc2f15971aa69089345f5a94be284c186a5843","modified":1673831694342},{"_id":"public/medias/banner/5.jpg","hash":"b2309b06560253c878e8a71a24a95c6631a7fc4e","modified":1673831694342},{"_id":"public/medias/banner/6.jpg","hash":"48812e3d4fda9d1aa9b73ba217d23c3b87f33d8b","modified":1673831694342},{"_id":"public/medias/banner/3.jpg","hash":"6da529d56aafd651f663944a7c0b80aa358020c1","modified":1673831694342},{"_id":"public/medias/banner/7.jpg","hash":"1bb095e607f5d5475622af3b940faddffa586895","modified":1673831694342},{"_id":"source/_posts/cloud.md","hash":"c187e134bce6afe8b9fcfc016af0ed6fd910d736","modified":1674100870487},{"_id":"public/2023/01/15/cloud/index.html","hash":"0793dee336ca2bcb81d16bc03990e33a0d09d132","modified":1674130118407},{"_id":"public/categories/杂项/index.html","hash":"d575e06b2c2f36ce88172b2f43b876fd63439145","modified":1674130118407},{"_id":"public/tags/cloud/index.html","hash":"6d4f1583a7e42920dd54051e9230a2781af07b02","modified":1674130118407},{"_id":"source/_posts/Django基础.md","hash":"845dfe95b83a7014b8c2ba35f798e54df90b215d","modified":1674125317576},{"_id":"source/_posts/Flask基础.md","hash":"7056d551d25588899e0bdf334358a2dd67a4ed97","modified":1674120327544},{"_id":"source/_posts/fdfs搭建.md","hash":"e83d83143681da2e9d633d2b2f4439b0def47b1c","modified":1674123068497},{"_id":"source/_posts/git笔记.md","hash":"614f8499a221935f027deb67642005b329ac3ab8","modified":1674123730865},{"_id":"source/_posts/mongoDB使用.md","hash":"9e0adb8c44ee057302de2673a885846a059dc224","modified":1674128777982},{"_id":"source/_posts/nginx搭建.md","hash":"9fc5c7dfbb8de37a4c22e8d94257ffb6ea812c27","modified":1674125962478},{"_id":"source/_posts/ngonx-fdfs搭建.md","hash":"8912dcba09b7ebd351bb6124b985b0eeb8fefcdc","modified":1674126783826},{"_id":"source/_posts/pythonWebSocket笔记.md","hash":"b26a7bf332915c363bba2fc44e9a3cf50b3b082c","modified":1674118556718},{"_id":"source/_posts/python正则.md","hash":"629b173ea4a7b242a66f1f82c5b111c297f2dc48","modified":1674125198138},{"_id":"source/_posts/python装饰器.md","hash":"8b2006fc6a47dd58f50f0f5b0444654d82b2c7ae","modified":1674118471280},{"_id":"source/_posts/python进程线程协程.md","hash":"a3c83bbccd1029a21ebe724a9ec2710024d35639","modified":1674110552600},{"_id":"source/_posts/redis基础.md","hash":"ca4eecc23830d72f8cd8f1738df22ddc94af9483","modified":1674118413520},{"_id":"source/_posts/迭代器.md","hash":"415613990bdbb63ed99e89e7f9f96dd639ca6da7","modified":1674118300481},{"_id":"source/_posts/闭包.md","hash":"1f91672315e031ee44c187d246f5f4c8f949254e","modified":1674110178891},{"_id":"public/2023/01/19/mongodb-shi-yong/index.html","hash":"c1422d24cb37f23636523435ea2b8eafbede6233","modified":1674130118407},{"_id":"public/2023/01/19/nginx-da-jian/index.html","hash":"d88320d6177e18a9c2605b8b262e915bf66c1f47","modified":1674130118407},{"_id":"public/2023/01/19/ngonx-fdfs-da-jian/index.html","hash":"8babd9db999e1010a580b21ec58cbe4a6a3e93db","modified":1674130118407},{"_id":"public/2023/01/19/fdfs-da-jian/index.html","hash":"c057053c152f3ba164b55cb25b2aed4bf227e083","modified":1674130118407},{"_id":"public/2023/01/19/flask-ji-chu/index.html","hash":"da1e2fe8eaaacd763d8c5563d92b285cb6f3d9e8","modified":1674130118407},{"_id":"public/2023/01/19/django-ji-chu/index.html","hash":"02962bfa17eef8da667bc4b28ce3e1aed6aff797","modified":1674130118407},{"_id":"public/2023/01/19/redis-ji-chu/index.html","hash":"a0cb7f5de46b6b14a1812d9a7614b1ea239351b4","modified":1674130118407},{"_id":"public/2023/01/19/git-bi-ji/index.html","hash":"597b04941774de8bfffea18c95dfa46a496d086d","modified":1674130118407},{"_id":"public/2023/01/19/pythonwebsocket-bi-ji/index.html","hash":"602872089882fcc437da78a934f09c14fd8fac5d","modified":1674130118407},{"_id":"public/2023/01/19/python-zheng-ze/index.html","hash":"4a4c85b4538a6806c62456b07814ccdc65059571","modified":1674130118407},{"_id":"public/2023/01/19/python-zhuang-shi-qi/index.html","hash":"ff9d1d6938f6177f37838100cdec27846b11fd3d","modified":1674130118407},{"_id":"public/2023/01/19/python-jin-cheng-xian-cheng-xie-cheng/index.html","hash":"103bd054bea008affd4c26a348aec56cd0f20e28","modified":1674130118407},{"_id":"public/2023/01/19/die-dai-qi/index.html","hash":"a5305c27ae34fbd508a0aad1e1f87e1e07749088","modified":1674130118407},{"_id":"public/2023/01/19/bi-bao/index.html","hash":"a354658523bb1b14ad0dd4c10cf1625f7b834939","modified":1674130118407},{"_id":"public/archives/page/2/index.html","hash":"4f62483efb9e639bf3fab2a84941db3f7a82198a","modified":1674130118407},{"_id":"public/archives/2023/page/2/index.html","hash":"2cb5d8b730ec28b49dbaebf4f59c865cce732cf0","modified":1674130118407},{"_id":"public/archives/2023/01/page/2/index.html","hash":"3397ec6d0b2e832b24330147269020f418955761","modified":1674130118407},{"_id":"public/categories/Python/index.html","hash":"d6bb6cad4a0f9d5bb841dcc25ca18da53cb23929","modified":1674130118407},{"_id":"public/categories/工具/index.html","hash":"1616a8cb21d1e35a31603fec76bdca6ef2ab1d3e","modified":1674130118407},{"_id":"public/categories/db/index.html","hash":"1a473da7702be52325ba66123b9921c642390f27","modified":1674130118407},{"_id":"public/page/2/index.html","hash":"dc11cdd0ab757875677c975395b89176ecf8f5f3","modified":1674130118407},{"_id":"public/tags/django/index.html","hash":"0eea41201a507df6ac1ebc2a586468f1ab84648c","modified":1674130118407},{"_id":"public/tags/flask/index.html","hash":"6ad8ead85727274d9786c3a1adcf1e1b3206e616","modified":1674130118407},{"_id":"public/tags/fdfs/index.html","hash":"34949a28c97ba5b40e9e445cc0a2272aafa38976","modified":1674130118407},{"_id":"public/tags/git/index.html","hash":"6b14ceb5b912b397beeeaff8e2b5f9b95f53599c","modified":1674130118407},{"_id":"public/tags/mongo/index.html","hash":"84e6689d1a9010ec388132a48ded28dadadc1a4b","modified":1674130118407},{"_id":"public/tags/nginx/index.html","hash":"769980fb4e0dce157e9a2886e8550b7a757bdc0c","modified":1674130118407},{"_id":"public/tags/nginx-fdfs/index.html","hash":"65d6fffc5870e2e111e2db0f72fa377f5adc7e22","modified":1674126515519},{"_id":"public/tags/basic/index.html","hash":"b4f670d0ce1b47bfbcc55292d5cfe52681b3ccf6","modified":1674130118407},{"_id":"public/tags/redis/index.html","hash":"3f1097213097ebcb4fabe7b3ce09902c14f614e7","modified":1674130118407}],"Category":[{"name":"Linux","_id":"clcy469my0004covg3lxmfaba"},{"name":"博客部署","_id":"clcy469n50009covg09yq6ii2"},{"name":"杂项","_id":"clcy8gll2000114vg0olfcq7q"},{"name":"Python","_id":"cld2uqf6300021svk1v1pfjwo"},{"name":"工具","_id":"cld2uqf6f000c1svk6b245h1i"},{"name":"db","_id":"cld2uqf6t00171svk0o0xg68t"}],"Data":[],"Page":[{"title":"404","date":"2023-01-15T08:05:33.000Z","type":"404","layout":"404","description":"Oops～，你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2023-01-15 16:05:33\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，你来到了没有知识的荒原 :(\"\n---","updated":"2023-01-15T21:48:00.411Z","path":"404.html","comments":1,"_id":"clcy469mi0000covg9qyj6nw8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-01-15T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-01-15 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---","updated":"2023-01-15T21:48:00.412Z","path":"about/index.html","comments":1,"_id":"clcy469mt0002covgb4rf3jk5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2023-01-15T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-01-15 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-01-15T21:48:00.412Z","path":"categories/index.html","comments":1,"_id":"clcy469n10006covg28npehaq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-01-15T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-01-15 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-01-15T21:48:00.412Z","path":"tags/index.html","comments":1,"_id":"clcy469n40008covg34w9hev7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"wifi密码破解","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-15T22:29:43.000Z","password":null,"summary":"Wifi密码暴力破解，不一定成功","_content":"\n### aircrack-ng工具安装\n> 如果你是Kali用户，那么可以跳过这一步，Kali自带，我们以Ubuntu为例：\n```shell\nsudo apt install aircrack-ng # 安装aircrack-ng 这个工具kali-linux默认安装了\n```\n\n### 查看无线网卡\n```shell\nairmon-ng # 查看可用的无线网卡一般以`w`开头\n```\n\n### 开启监听模式\n```shell\nairmon-ng start <网卡名称> # 指定无线网卡开启监听模式\n```\n\n### 扫描附近的无线网\n```shell\nairodump-ng <处于监听模式的网卡名称> # 用这个监听网卡扫描附近的无线网络\n\n# airodump-ng wlp8s0mon\n# BSSID: 无线 AP 的硬件地址\n# PWR: 信号强度，值是负数，绝对值越小表示信号越强\n# CH: 无线网络信道\n# ENC: 加密方式，我们要破解的是 WPA2\n# ESSID: 无线网络的名称\n```\n\n### 监听你想破解的无线网\n```shell\nairodump-ng -w <扫描结果保存的文件名> -c <无线网络信道> --bssid <目标无线 AP 的硬件地址> <处于监听模式的网卡名称> # 使用参数过滤扫描列表，确定扫描目标,可以出指定wifi哪些人在使用 只要有人链接这个wifi就会被抓包\n\n# BSSID: 无线 AP 的硬件地址\n# STATION: 用户设备的硬件地址\n```\n\n### 对无线AP或者用户设备发起ACK攻击\n```shell\naireplay-ng -<攻击模式(0为下线)> <攻击次数(0为一直攻击)> -a 无线 AP 硬件地址> -c <用户设备硬件地址> <处于监听模式的网卡名称> # 使用 aireplay-ng 对目标设备发起ack攻击 让他强制下线 方便他重新链接抓包成功\n\naireplay-ng -<攻击模式(0为下线)> <攻击次数(0为一直攻击)> -a 无线 AP 硬件地址> <处于监听模式的网卡名称> # 使用 aireplay-ng 对无线AP设备发起ack攻击 让连接他的设备都下线 方便他重新链接抓包成功\n```\n\n### 破解密码\n```shell\naircrack-ng -w 密码字典 <包含握手包的 cap 文件> # 使用 aircrack-ng 暴力破解 Wi-Fi 密码 成功会返回 KEY FOUND! 密码字典去网上下载多得很 \n```\n\n### 退出监听模式，连接无线网\n```shell\nairmon-ng stop <处于监听模式的无限网卡名称> # 无线网卡退出监听模式\n```\n\n### 使用命令连接网络\n```shell\nsudo systemctl start NetworkManager # 开启网络服务\n\nip addr 或者 ifconfig # 查看无线网卡名称(w开头得)\n\niwlist 无线网卡 scanning | grep -i essid # 扫描可用wifi\n\nnmcli device wifi connect wifi名字 password wifi密码 ifname 无线网卡 # 用这个无线网卡链接指定wifi\n```\n\n### 卸载ubuntu系统的IO驱动，不让别人乱碰你得电脑\n```shell\nsudo apt install xserver-xorg-input-all # 安装\n\nsudo apt autoremove xserver-xorg-input-all # 卸载\n```\n\n","source":"_posts/wifi密码破解.md","raw":"---\ntitle: wifi密码破解\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-16 06:29:43\npassword:\nsummary: Wifi密码暴力破解，不一定成功\ntags: wifi\ncategories: Linux\n---\n\n### aircrack-ng工具安装\n> 如果你是Kali用户，那么可以跳过这一步，Kali自带，我们以Ubuntu为例：\n```shell\nsudo apt install aircrack-ng # 安装aircrack-ng 这个工具kali-linux默认安装了\n```\n\n### 查看无线网卡\n```shell\nairmon-ng # 查看可用的无线网卡一般以`w`开头\n```\n\n### 开启监听模式\n```shell\nairmon-ng start <网卡名称> # 指定无线网卡开启监听模式\n```\n\n### 扫描附近的无线网\n```shell\nairodump-ng <处于监听模式的网卡名称> # 用这个监听网卡扫描附近的无线网络\n\n# airodump-ng wlp8s0mon\n# BSSID: 无线 AP 的硬件地址\n# PWR: 信号强度，值是负数，绝对值越小表示信号越强\n# CH: 无线网络信道\n# ENC: 加密方式，我们要破解的是 WPA2\n# ESSID: 无线网络的名称\n```\n\n### 监听你想破解的无线网\n```shell\nairodump-ng -w <扫描结果保存的文件名> -c <无线网络信道> --bssid <目标无线 AP 的硬件地址> <处于监听模式的网卡名称> # 使用参数过滤扫描列表，确定扫描目标,可以出指定wifi哪些人在使用 只要有人链接这个wifi就会被抓包\n\n# BSSID: 无线 AP 的硬件地址\n# STATION: 用户设备的硬件地址\n```\n\n### 对无线AP或者用户设备发起ACK攻击\n```shell\naireplay-ng -<攻击模式(0为下线)> <攻击次数(0为一直攻击)> -a 无线 AP 硬件地址> -c <用户设备硬件地址> <处于监听模式的网卡名称> # 使用 aireplay-ng 对目标设备发起ack攻击 让他强制下线 方便他重新链接抓包成功\n\naireplay-ng -<攻击模式(0为下线)> <攻击次数(0为一直攻击)> -a 无线 AP 硬件地址> <处于监听模式的网卡名称> # 使用 aireplay-ng 对无线AP设备发起ack攻击 让连接他的设备都下线 方便他重新链接抓包成功\n```\n\n### 破解密码\n```shell\naircrack-ng -w 密码字典 <包含握手包的 cap 文件> # 使用 aircrack-ng 暴力破解 Wi-Fi 密码 成功会返回 KEY FOUND! 密码字典去网上下载多得很 \n```\n\n### 退出监听模式，连接无线网\n```shell\nairmon-ng stop <处于监听模式的无限网卡名称> # 无线网卡退出监听模式\n```\n\n### 使用命令连接网络\n```shell\nsudo systemctl start NetworkManager # 开启网络服务\n\nip addr 或者 ifconfig # 查看无线网卡名称(w开头得)\n\niwlist 无线网卡 scanning | grep -i essid # 扫描可用wifi\n\nnmcli device wifi connect wifi名字 password wifi密码 ifname 无线网卡 # 用这个无线网卡链接指定wifi\n```\n\n### 卸载ubuntu系统的IO驱动，不让别人乱碰你得电脑\n```shell\nsudo apt install xserver-xorg-input-all # 安装\n\nsudo apt autoremove xserver-xorg-input-all # 卸载\n```\n\n","slug":"wifi密码破解","published":1,"updated":"2023-01-19T04:01:10.487Z","_id":"clcy469mn0001covgh6zq60to","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"aircrack-ng工具安装\"><a href=\"#aircrack-ng工具安装\" class=\"headerlink\" title=\"aircrack-ng工具安装\"></a>aircrack-ng工具安装</h3><blockquote>\n<p>如果你是Kali用户，那么可以跳过这一步，Kali自带，我们以Ubuntu为例：</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> aircrack-ng <span class=\"token comment\"># 安装aircrack-ng 这个工具kali-linux默认安装了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"查看无线网卡\"><a href=\"#查看无线网卡\" class=\"headerlink\" title=\"查看无线网卡\"></a>查看无线网卡</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">airmon-ng <span class=\"token comment\"># 查看可用的无线网卡一般以`w`开头</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"开启监听模式\"><a href=\"#开启监听模式\" class=\"headerlink\" title=\"开启监听模式\"></a>开启监听模式</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">airmon-ng start <span class=\"token operator\">&lt;</span>网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 指定无线网卡开启监听模式</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"扫描附近的无线网\"><a href=\"#扫描附近的无线网\" class=\"headerlink\" title=\"扫描附近的无线网\"></a>扫描附近的无线网</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">airodump-ng <span class=\"token operator\">&lt;</span>处于监听模式的网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 用这个监听网卡扫描附近的无线网络</span>\n\n<span class=\"token comment\"># airodump-ng wlp8s0mon</span>\n<span class=\"token comment\"># BSSID: 无线 AP 的硬件地址</span>\n<span class=\"token comment\"># PWR: 信号强度，值是负数，绝对值越小表示信号越强</span>\n<span class=\"token comment\"># CH: 无线网络信道</span>\n<span class=\"token comment\"># ENC: 加密方式，我们要破解的是 WPA2</span>\n<span class=\"token comment\"># ESSID: 无线网络的名称</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"监听你想破解的无线网\"><a href=\"#监听你想破解的无线网\" class=\"headerlink\" title=\"监听你想破解的无线网\"></a>监听你想破解的无线网</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">airodump-ng <span class=\"token parameter variable\">-w</span> <span class=\"token operator\">&lt;</span>扫描结果保存的文件名<span class=\"token operator\">></span> <span class=\"token parameter variable\">-c</span> <span class=\"token operator\">&lt;</span>无线网络信道<span class=\"token operator\">></span> <span class=\"token parameter variable\">--bssid</span> <span class=\"token operator\">&lt;</span>目标无线 AP 的硬件地址<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>处于监听模式的网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 使用参数过滤扫描列表，确定扫描目标,可以出指定wifi哪些人在使用 只要有人链接这个wifi就会被抓包</span>\n\n<span class=\"token comment\"># BSSID: 无线 AP 的硬件地址</span>\n<span class=\"token comment\"># STATION: 用户设备的硬件地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"对无线AP或者用户设备发起ACK攻击\"><a href=\"#对无线AP或者用户设备发起ACK攻击\" class=\"headerlink\" title=\"对无线AP或者用户设备发起ACK攻击\"></a>对无线AP或者用户设备发起ACK攻击</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aireplay-ng -<span class=\"token operator\">&lt;</span>攻击模式<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>为下线<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>攻击次数<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>为一直攻击<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token parameter variable\">-a</span> 无线 AP 硬件地址<span class=\"token operator\">></span> <span class=\"token parameter variable\">-c</span> <span class=\"token operator\">&lt;</span>用户设备硬件地址<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>处于监听模式的网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 使用 aireplay-ng 对目标设备发起ack攻击 让他强制下线 方便他重新链接抓包成功</span>\n\naireplay-ng -<span class=\"token operator\">&lt;</span>攻击模式<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>为下线<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>攻击次数<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>为一直攻击<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token parameter variable\">-a</span> 无线 AP 硬件地址<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>处于监听模式的网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 使用 aireplay-ng 对无线AP设备发起ack攻击 让连接他的设备都下线 方便他重新链接抓包成功</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"破解密码\"><a href=\"#破解密码\" class=\"headerlink\" title=\"破解密码\"></a>破解密码</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aircrack-ng <span class=\"token parameter variable\">-w</span> 密码字典 <span class=\"token operator\">&lt;</span>包含握手包的 cap 文件<span class=\"token operator\">></span> <span class=\"token comment\"># 使用 aircrack-ng 暴力破解 Wi-Fi 密码 成功会返回 KEY FOUND! 密码字典去网上下载多得很 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"退出监听模式，连接无线网\"><a href=\"#退出监听模式，连接无线网\" class=\"headerlink\" title=\"退出监听模式，连接无线网\"></a>退出监听模式，连接无线网</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">airmon-ng stop <span class=\"token operator\">&lt;</span>处于监听模式的无限网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 无线网卡退出监听模式</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"使用命令连接网络\"><a href=\"#使用命令连接网络\" class=\"headerlink\" title=\"使用命令连接网络\"></a>使用命令连接网络</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl start NetworkManager <span class=\"token comment\"># 开启网络服务</span>\n\n<span class=\"token function\">ip</span> addr 或者 <span class=\"token function\">ifconfig</span> <span class=\"token comment\"># 查看无线网卡名称(w开头得)</span>\n\niwlist 无线网卡 scanning <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> essid <span class=\"token comment\"># 扫描可用wifi</span>\n\nnmcli device wifi connect wifi名字 password wifi密码 ifname 无线网卡 <span class=\"token comment\"># 用这个无线网卡链接指定wifi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"卸载ubuntu系统的IO驱动，不让别人乱碰你得电脑\"><a href=\"#卸载ubuntu系统的IO驱动，不让别人乱碰你得电脑\" class=\"headerlink\" title=\"卸载ubuntu系统的IO驱动，不让别人乱碰你得电脑\"></a>卸载ubuntu系统的IO驱动，不让别人乱碰你得电脑</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> xserver-xorg-input-all <span class=\"token comment\"># 安装</span>\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> autoremove xserver-xorg-input-all <span class=\"token comment\"># 卸载</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"aircrack-ng工具安装\"><a href=\"#aircrack-ng工具安装\" class=\"headerlink\" title=\"aircrack-ng工具安装\"></a>aircrack-ng工具安装</h3><blockquote>\n<p>如果你是Kali用户，那么可以跳过这一步，Kali自带，我们以Ubuntu为例：</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> aircrack-ng <span class=\"token comment\"># 安装aircrack-ng 这个工具kali-linux默认安装了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"查看无线网卡\"><a href=\"#查看无线网卡\" class=\"headerlink\" title=\"查看无线网卡\"></a>查看无线网卡</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">airmon-ng <span class=\"token comment\"># 查看可用的无线网卡一般以`w`开头</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"开启监听模式\"><a href=\"#开启监听模式\" class=\"headerlink\" title=\"开启监听模式\"></a>开启监听模式</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">airmon-ng start <span class=\"token operator\">&lt;</span>网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 指定无线网卡开启监听模式</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"扫描附近的无线网\"><a href=\"#扫描附近的无线网\" class=\"headerlink\" title=\"扫描附近的无线网\"></a>扫描附近的无线网</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">airodump-ng <span class=\"token operator\">&lt;</span>处于监听模式的网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 用这个监听网卡扫描附近的无线网络</span>\n\n<span class=\"token comment\"># airodump-ng wlp8s0mon</span>\n<span class=\"token comment\"># BSSID: 无线 AP 的硬件地址</span>\n<span class=\"token comment\"># PWR: 信号强度，值是负数，绝对值越小表示信号越强</span>\n<span class=\"token comment\"># CH: 无线网络信道</span>\n<span class=\"token comment\"># ENC: 加密方式，我们要破解的是 WPA2</span>\n<span class=\"token comment\"># ESSID: 无线网络的名称</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"监听你想破解的无线网\"><a href=\"#监听你想破解的无线网\" class=\"headerlink\" title=\"监听你想破解的无线网\"></a>监听你想破解的无线网</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">airodump-ng <span class=\"token parameter variable\">-w</span> <span class=\"token operator\">&lt;</span>扫描结果保存的文件名<span class=\"token operator\">></span> <span class=\"token parameter variable\">-c</span> <span class=\"token operator\">&lt;</span>无线网络信道<span class=\"token operator\">></span> <span class=\"token parameter variable\">--bssid</span> <span class=\"token operator\">&lt;</span>目标无线 AP 的硬件地址<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>处于监听模式的网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 使用参数过滤扫描列表，确定扫描目标,可以出指定wifi哪些人在使用 只要有人链接这个wifi就会被抓包</span>\n\n<span class=\"token comment\"># BSSID: 无线 AP 的硬件地址</span>\n<span class=\"token comment\"># STATION: 用户设备的硬件地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"对无线AP或者用户设备发起ACK攻击\"><a href=\"#对无线AP或者用户设备发起ACK攻击\" class=\"headerlink\" title=\"对无线AP或者用户设备发起ACK攻击\"></a>对无线AP或者用户设备发起ACK攻击</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aireplay-ng -<span class=\"token operator\">&lt;</span>攻击模式<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>为下线<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>攻击次数<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>为一直攻击<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token parameter variable\">-a</span> 无线 AP 硬件地址<span class=\"token operator\">></span> <span class=\"token parameter variable\">-c</span> <span class=\"token operator\">&lt;</span>用户设备硬件地址<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>处于监听模式的网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 使用 aireplay-ng 对目标设备发起ack攻击 让他强制下线 方便他重新链接抓包成功</span>\n\naireplay-ng -<span class=\"token operator\">&lt;</span>攻击模式<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>为下线<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>攻击次数<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>为一直攻击<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token parameter variable\">-a</span> 无线 AP 硬件地址<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>处于监听模式的网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 使用 aireplay-ng 对无线AP设备发起ack攻击 让连接他的设备都下线 方便他重新链接抓包成功</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"破解密码\"><a href=\"#破解密码\" class=\"headerlink\" title=\"破解密码\"></a>破解密码</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aircrack-ng <span class=\"token parameter variable\">-w</span> 密码字典 <span class=\"token operator\">&lt;</span>包含握手包的 cap 文件<span class=\"token operator\">></span> <span class=\"token comment\"># 使用 aircrack-ng 暴力破解 Wi-Fi 密码 成功会返回 KEY FOUND! 密码字典去网上下载多得很 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"退出监听模式，连接无线网\"><a href=\"#退出监听模式，连接无线网\" class=\"headerlink\" title=\"退出监听模式，连接无线网\"></a>退出监听模式，连接无线网</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">airmon-ng stop <span class=\"token operator\">&lt;</span>处于监听模式的无限网卡名称<span class=\"token operator\">></span> <span class=\"token comment\"># 无线网卡退出监听模式</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"使用命令连接网络\"><a href=\"#使用命令连接网络\" class=\"headerlink\" title=\"使用命令连接网络\"></a>使用命令连接网络</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl start NetworkManager <span class=\"token comment\"># 开启网络服务</span>\n\n<span class=\"token function\">ip</span> addr 或者 <span class=\"token function\">ifconfig</span> <span class=\"token comment\"># 查看无线网卡名称(w开头得)</span>\n\niwlist 无线网卡 scanning <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> essid <span class=\"token comment\"># 扫描可用wifi</span>\n\nnmcli device wifi connect wifi名字 password wifi密码 ifname 无线网卡 <span class=\"token comment\"># 用这个无线网卡链接指定wifi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"卸载ubuntu系统的IO驱动，不让别人乱碰你得电脑\"><a href=\"#卸载ubuntu系统的IO驱动，不让别人乱碰你得电脑\" class=\"headerlink\" title=\"卸载ubuntu系统的IO驱动，不让别人乱碰你得电脑\"></a>卸载ubuntu系统的IO驱动，不让别人乱碰你得电脑</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> xserver-xorg-input-all <span class=\"token comment\"># 安装</span>\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> autoremove xserver-xorg-input-all <span class=\"token comment\"># 卸载</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"hexo-dbackup","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-15T21:51:25.000Z","password":null,"summary":"hexo数据备份，换机方案","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1997527356&auto=1&height=66\"></iframe>\n</div>\n\n## 换机操作前\n\n> 在仓库中创建一个hexo分支并设置为默认\n\n> 在本地配置好ssh连接，并测试是否连通github\n\n> git clone 这个仓库，因为设置成默认分支，所以直接clone的就是hexo\n\n> 将hexo分支下除了.git的文件全部删除，再将源文件中除了.deploy_git的所有文件拷贝到这里，如果安装了主题，需要将主题中的.git文件夹删除。原理就是hexo的源码和配置不会上传到github，只是上传的.deploy_git里面通过hexo g这个命令生成的静态文件，.deploy_git里面的文件会上传到哪里，这个你在项目目录_config.yaml中配置的，这里配置了上传到哪里，上传到哪个分支，因为这个.deploy_git是可以根据hexo g来生成，所以不用上传,即是说： `新拉下来的这个仓库是存放源代码的，如果是第一次做这个操作，需要将其他的文件全部删除，只留下一个.git文件夹，这是仓库信息，然后将源代码里面的除了.deploy_git的所有数据全部复制过来`\n\n> 添加一个.gitignore文件(可选)\n```yaml\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n> git add .\n\n> git commit -m \"desc\"\n\n> git push origin\n\n---\n\n## 换了电脑之后\n> 配置好git的ssh连接\n\n> 安装好Node\n\n> sudo npm install hexo-cli-g\n\n> git cloen 备份仓库\n\n> cd xxx.github.io\n\n> npm install\n\n> npm install hexo-deployer-git --save\n\n> hexo g\n\n> hexo d\n\n就可以开始写博客了\n\n> 如果在已经编辑过的电脑上写博客，那么还需要git pull更新一下\n\n## 多端操作\n> 在新机子上clone仓库，clone的是源代码分支,然后安装依赖，开始写博客，如果新机子上以前有这个仓库，那么需要git pull更新一下再写\n\n> 在clone的这个仓库中，可以直接写博客，不用删除什么，也可以直接hexo -g -d来将静态页面推送到github，但是每次写完了，静态代码推送完了，然后删除.deploy_git文件夹，最后通过git将源码上传到仓库。\n\n\n## git配置ssh\n\n> ssh-keygen -t rsa -C \"邮箱\" 通过这个来生成rsa密钥\n\n> 生成的ras存放在用户目录下的.ssh文件夹中\n\n> cat id_rsa.pub 将公钥填写到github\n\n> ssh -T git@github.com 测试是否连上github","source":"_posts/hexo-dbackup.md","raw":"---\ntitle: hexo-dbackup\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-16 05:51:25\npassword: \nsummary: hexo数据备份，换机方案\ntags: hexo\ncategories: 博客部署\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1997527356&auto=1&height=66\"></iframe>\n</div>\n\n## 换机操作前\n\n> 在仓库中创建一个hexo分支并设置为默认\n\n> 在本地配置好ssh连接，并测试是否连通github\n\n> git clone 这个仓库，因为设置成默认分支，所以直接clone的就是hexo\n\n> 将hexo分支下除了.git的文件全部删除，再将源文件中除了.deploy_git的所有文件拷贝到这里，如果安装了主题，需要将主题中的.git文件夹删除。原理就是hexo的源码和配置不会上传到github，只是上传的.deploy_git里面通过hexo g这个命令生成的静态文件，.deploy_git里面的文件会上传到哪里，这个你在项目目录_config.yaml中配置的，这里配置了上传到哪里，上传到哪个分支，因为这个.deploy_git是可以根据hexo g来生成，所以不用上传,即是说： `新拉下来的这个仓库是存放源代码的，如果是第一次做这个操作，需要将其他的文件全部删除，只留下一个.git文件夹，这是仓库信息，然后将源代码里面的除了.deploy_git的所有数据全部复制过来`\n\n> 添加一个.gitignore文件(可选)\n```yaml\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n> git add .\n\n> git commit -m \"desc\"\n\n> git push origin\n\n---\n\n## 换了电脑之后\n> 配置好git的ssh连接\n\n> 安装好Node\n\n> sudo npm install hexo-cli-g\n\n> git cloen 备份仓库\n\n> cd xxx.github.io\n\n> npm install\n\n> npm install hexo-deployer-git --save\n\n> hexo g\n\n> hexo d\n\n就可以开始写博客了\n\n> 如果在已经编辑过的电脑上写博客，那么还需要git pull更新一下\n\n## 多端操作\n> 在新机子上clone仓库，clone的是源代码分支,然后安装依赖，开始写博客，如果新机子上以前有这个仓库，那么需要git pull更新一下再写\n\n> 在clone的这个仓库中，可以直接写博客，不用删除什么，也可以直接hexo -g -d来将静态页面推送到github，但是每次写完了，静态代码推送完了，然后删除.deploy_git文件夹，最后通过git将源码上传到仓库。\n\n\n## git配置ssh\n\n> ssh-keygen -t rsa -C \"邮箱\" 通过这个来生成rsa密钥\n\n> 生成的ras存放在用户目录下的.ssh文件夹中\n\n> cat id_rsa.pub 将公钥填写到github\n\n> ssh -T git@github.com 测试是否连上github","slug":"hexo-dbackup","published":1,"updated":"2023-01-19T04:01:10.487Z","_id":"clcy469mu0003covggeohbi2n","comments":1,"layout":"post","photos":[],"link":"","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1997527356&auto=1&height=66\"></iframe>\n</div>\n\n<h2 id=\"换机操作前\"><a href=\"#换机操作前\" class=\"headerlink\" title=\"换机操作前\"></a>换机操作前</h2><blockquote>\n<p>在仓库中创建一个hexo分支并设置为默认</p>\n</blockquote>\n<blockquote>\n<p>在本地配置好ssh连接，并测试是否连通github</p>\n</blockquote>\n<blockquote>\n<p>git clone 这个仓库，因为设置成默认分支，所以直接clone的就是hexo</p>\n</blockquote>\n<blockquote>\n<p>将hexo分支下除了.git的文件全部删除，再将源文件中除了.deploy_git的所有文件拷贝到这里，如果安装了主题，需要将主题中的.git文件夹删除。原理就是hexo的源码和配置不会上传到github，只是上传的.deploy_git里面通过hexo g这个命令生成的静态文件，.deploy_git里面的文件会上传到哪里，这个你在项目目录_config.yaml中配置的，这里配置了上传到哪里，上传到哪个分支，因为这个.deploy_git是可以根据hexo g来生成，所以不用上传,即是说： <code>新拉下来的这个仓库是存放源代码的，如果是第一次做这个操作，需要将其他的文件全部删除，只留下一个.git文件夹，这是仓库信息，然后将源代码里面的除了.deploy_git的所有数据全部复制过来</code></p>\n</blockquote>\n<blockquote>\n<p>添加一个.gitignore文件(可选)</p>\n</blockquote>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">.DS_Store\nThumbs.db\ndb.json\n<span class=\"token important\">*.log</span>\nnode_modules/\npublic/\n.deploy<span class=\"token important\">*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>git add .</p>\n</blockquote>\n<blockquote>\n<p>git commit -m “desc”</p>\n</blockquote>\n<blockquote>\n<p>git push origin</p>\n</blockquote>\n<hr>\n<h2 id=\"换了电脑之后\"><a href=\"#换了电脑之后\" class=\"headerlink\" title=\"换了电脑之后\"></a>换了电脑之后</h2><blockquote>\n<p>配置好git的ssh连接</p>\n</blockquote>\n<blockquote>\n<p>安装好Node</p>\n</blockquote>\n<blockquote>\n<p>sudo npm install hexo-cli-g</p>\n</blockquote>\n<blockquote>\n<p>git cloen 备份仓库</p>\n</blockquote>\n<blockquote>\n<p>cd xxx.github.io</p>\n</blockquote>\n<blockquote>\n<p>npm install</p>\n</blockquote>\n<blockquote>\n<p>npm install hexo-deployer-git –save</p>\n</blockquote>\n<blockquote>\n<p>hexo g</p>\n</blockquote>\n<blockquote>\n<p>hexo d</p>\n</blockquote>\n<p>就可以开始写博客了</p>\n<blockquote>\n<p>如果在已经编辑过的电脑上写博客，那么还需要git pull更新一下</p>\n</blockquote>\n<h2 id=\"多端操作\"><a href=\"#多端操作\" class=\"headerlink\" title=\"多端操作\"></a>多端操作</h2><blockquote>\n<p>在新机子上clone仓库，clone的是源代码分支,然后安装依赖，开始写博客，如果新机子上以前有这个仓库，那么需要git pull更新一下再写</p>\n</blockquote>\n<blockquote>\n<p>在clone的这个仓库中，可以直接写博客，不用删除什么，也可以直接hexo -g -d来将静态页面推送到github，但是每次写完了，静态代码推送完了，然后删除.deploy_git文件夹，最后通过git将源码上传到仓库。</p>\n</blockquote>\n<h2 id=\"git配置ssh\"><a href=\"#git配置ssh\" class=\"headerlink\" title=\"git配置ssh\"></a>git配置ssh</h2><blockquote>\n<p>ssh-keygen -t rsa -C “邮箱” 通过这个来生成rsa密钥</p>\n</blockquote>\n<blockquote>\n<p>生成的ras存放在用户目录下的.ssh文件夹中</p>\n</blockquote>\n<blockquote>\n<p>cat id_rsa.pub 将公钥填写到github</p>\n</blockquote>\n<blockquote>\n<p>ssh -T <a href=\"mailto:&#x67;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;\">&#x67;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;</a> 测试是否连上github</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1997527356&auto=1&height=66\"></iframe>\n</div>\n\n<h2 id=\"换机操作前\"><a href=\"#换机操作前\" class=\"headerlink\" title=\"换机操作前\"></a>换机操作前</h2><blockquote>\n<p>在仓库中创建一个hexo分支并设置为默认</p>\n</blockquote>\n<blockquote>\n<p>在本地配置好ssh连接，并测试是否连通github</p>\n</blockquote>\n<blockquote>\n<p>git clone 这个仓库，因为设置成默认分支，所以直接clone的就是hexo</p>\n</blockquote>\n<blockquote>\n<p>将hexo分支下除了.git的文件全部删除，再将源文件中除了.deploy_git的所有文件拷贝到这里，如果安装了主题，需要将主题中的.git文件夹删除。原理就是hexo的源码和配置不会上传到github，只是上传的.deploy_git里面通过hexo g这个命令生成的静态文件，.deploy_git里面的文件会上传到哪里，这个你在项目目录_config.yaml中配置的，这里配置了上传到哪里，上传到哪个分支，因为这个.deploy_git是可以根据hexo g来生成，所以不用上传,即是说： <code>新拉下来的这个仓库是存放源代码的，如果是第一次做这个操作，需要将其他的文件全部删除，只留下一个.git文件夹，这是仓库信息，然后将源代码里面的除了.deploy_git的所有数据全部复制过来</code></p>\n</blockquote>\n<blockquote>\n<p>添加一个.gitignore文件(可选)</p>\n</blockquote>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">.DS_Store\nThumbs.db\ndb.json\n<span class=\"token important\">*.log</span>\nnode_modules/\npublic/\n.deploy<span class=\"token important\">*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>git add .</p>\n</blockquote>\n<blockquote>\n<p>git commit -m “desc”</p>\n</blockquote>\n<blockquote>\n<p>git push origin</p>\n</blockquote>\n<hr>\n<h2 id=\"换了电脑之后\"><a href=\"#换了电脑之后\" class=\"headerlink\" title=\"换了电脑之后\"></a>换了电脑之后</h2><blockquote>\n<p>配置好git的ssh连接</p>\n</blockquote>\n<blockquote>\n<p>安装好Node</p>\n</blockquote>\n<blockquote>\n<p>sudo npm install hexo-cli-g</p>\n</blockquote>\n<blockquote>\n<p>git cloen 备份仓库</p>\n</blockquote>\n<blockquote>\n<p>cd xxx.github.io</p>\n</blockquote>\n<blockquote>\n<p>npm install</p>\n</blockquote>\n<blockquote>\n<p>npm install hexo-deployer-git –save</p>\n</blockquote>\n<blockquote>\n<p>hexo g</p>\n</blockquote>\n<blockquote>\n<p>hexo d</p>\n</blockquote>\n<p>就可以开始写博客了</p>\n<blockquote>\n<p>如果在已经编辑过的电脑上写博客，那么还需要git pull更新一下</p>\n</blockquote>\n<h2 id=\"多端操作\"><a href=\"#多端操作\" class=\"headerlink\" title=\"多端操作\"></a>多端操作</h2><blockquote>\n<p>在新机子上clone仓库，clone的是源代码分支,然后安装依赖，开始写博客，如果新机子上以前有这个仓库，那么需要git pull更新一下再写</p>\n</blockquote>\n<blockquote>\n<p>在clone的这个仓库中，可以直接写博客，不用删除什么，也可以直接hexo -g -d来将静态页面推送到github，但是每次写完了，静态代码推送完了，然后删除.deploy_git文件夹，最后通过git将源码上传到仓库。</p>\n</blockquote>\n<h2 id=\"git配置ssh\"><a href=\"#git配置ssh\" class=\"headerlink\" title=\"git配置ssh\"></a>git配置ssh</h2><blockquote>\n<p>ssh-keygen -t rsa -C “邮箱” 通过这个来生成rsa密钥</p>\n</blockquote>\n<blockquote>\n<p>生成的ras存放在用户目录下的.ssh文件夹中</p>\n</blockquote>\n<blockquote>\n<p>cat id_rsa.pub 将公钥填写到github</p>\n</blockquote>\n<blockquote>\n<p>ssh -T <a href=\"mailto:&#x67;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;\">&#x67;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;</a> 测试是否连上github</p>\n</blockquote>\n"},{"title":"theme-install","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-15T09:09:28.000Z","password":null,"summary":"hexo+github+cheme部署","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1869507838&auto=1&height=66\"></iframe>\n</div>\n\n## 下载\n\n本主题**推荐你使用 Hexo 5.0.0 及以上的版本**。如果，你已经有一个自己的 [Hexo](https://hexo.io/zh-cn/) 博客了，建议你将 Hexo 升级到最新稳定的版本。\n\n点击 [这里](https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master) 下载 `master` 分支的最新稳定版的代码，解压缩后，将 `hexo-theme-matery` 的文件夹复制到你 Hexo 的 `themes` 文件夹中即可。\n\n当然你也可以在你的 `themes` 文件夹下使用 `git clone` 命令来下载:\n\n```bash\ngit clone https://github.com/blinkfox/hexo-theme-matery.git\n```\n\n## 配置(主要还是看项目的_config.yml和主题的_config.yml)\n\n### 切换主题\n\n修改 Hexo 根目录下的 `_config.yml` 的  `theme` 的值：`theme: hexo-theme-matery`\n\n#### `_config.yml` 文件的其它修改建议:\n\n- 请修改主目录中 `_config.yml` 的 `url` 的值为你的网站主 `URL`（如：`http://lqs-1.github.io`）。\n- 建议修改目录中 `_config.yml` 的两个 `per_page` 的分页条数值为 `6` 的倍数，如：`12`、`18` 等，这样文章列表在各个屏幕下都能较好的显示。\n- 如果你是中文用户，则建议修改目录中 `_config.yml` 的 `language` 的值为 `zh-CN`。\n\n### 新建分类 categories 页\n\n`categories` 页是用来展示所有分类的页面，如果在你的博客 `source` 目录下还没有 `categories/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"categories\"\n```\n\n编辑你刚刚新建的页面文件 `/source/categories/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n```\n\n### 新建标签 tags 页\n\n`tags` 页是用来展示所有标签的页面，如果在你的博客 `source` 目录下还没有 `tags/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"tags\"\n```\n\n编辑你刚刚新建的页面文件 `/source/tags/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n```\n### 新建 404 页\n\n如果在你的博客 `source` 目录下还没有 `404.md` 文件，那么你就需要新建一个\n\n```bash\ntouch 404.md\n```\n\n编辑你刚刚新建的页面文件 `/source/404/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n```\n\n### 菜单导航配置\n\n#### 配置基本菜单导航的名称、路径url和图标icon.\n\n1.菜单导航名称可以是中文也可以是英文(如：`Index`或`主页`) \n2.图标icon 可以在[Font Awesome](https://fontawesome.com/icons) 中查找   \n\n```yaml\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n```\n\n#### 二级菜单配置方法\n\n如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作\n     \n1. 在需要添加二级菜单的一级菜单下添加`children`关键字(如:`About`菜单下添加`children`)     \n2. 在`children`下创建二级菜单的 名称name,路径url和图标icon.      \n3. 注意每个二级菜单模块前要加 `-`.     \n4. 注意缩进格式  \n\n```yaml\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Music\n        url: /music\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image\n```\n\n执行 `hexo clean && hexo g` 重新生成博客文件，然后就可以在文章中对应位置看到你用`emoji`语法写的表情了。\n\n\n\n### 代码高亮\n\n从 Hexo5.0 版本开始自带了 `prismjs` 代码语法高亮的支持，本主题对此进行了改造支持。\n\n如果你的博客中曾经安装过 `hexo-prism-plugin` 的插件，那么你须要执行 `npm uninstall hexo-prism-plugin` 来卸载掉它，否则生成的代码中会有 `&#123;` 和 `&#125;` 的转义字符。\n\n然后，修改 Hexo 根目录下 `_config.yml` 文件中 `highlight.enable` 的值为 `false`，并将 `prismjs.enable` 的值设置为 `true`，主要配置如下：\n\n```yaml\nhighlight:\n  enable: false\n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n```\n\n主题中默认的 `prismjs` 主题是 `Tomorrow Night`，如果你想定制自己的主题，可以前往 [prismjs 下载页面](https://prismjs.com/download.html) 定制下载自己喜欢的主题 `css` 文件，然后将此 css 主题文件取名为 `prism.css`，替换掉 `hexo-theme-matery` 主题文件夹中的 `source/libs/prism/prism.css` 文件即可。\n\n### 搜索\n\n本主题中还使用到了 [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 的 Hexo 插件来做内容搜索，安装命令如下：\n\n```bash\nnpm install hexo-generator-search --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\nsearch:\n  path: search.xml\n  field: post\n```\n\n### 中文链接转拼音（建议安装）\n\n如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 `SEO`，且 `gitment` 评论对中文链接也不支持。我们可以用 [hexo-permalink-pinyin](https://github.com/viko16/hexo-permalink-pinyin) Hexo 插件使在生成文章时生成中文拼音的永久链接。\n\n安装命令如下：\n\n```bash\nnpm i hexo-permalink-pinyin --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\npermalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'\n```\n\n> **注**：除了此插件外，[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink) 插件也可以生成非中文的链接。\n\n### 文章字数统计插件（建议安装）\n\n如果你想要在文章中显示文章字数、阅读时长信息，可以安装 [hexo-wordcount](https://github.com/willin/hexo-wordcount)插件。\n\n安装命令如下：\n\n```bash\nnpm i --save hexo-wordcount\n```\n\n然后只需在本主题下的 `_config.yml` 文件中，将各个文章字数相关的配置激活即可：\n\n```yaml\npostInfo:\n  date: true\n  update: false\n  wordCount: false # 设置文章字数统计为 true.\n  totalCount: false # 设置站点文章总字数统计为 true.\n  min2read: false # 阅读时长.\n  readCount: false # 阅读次数.\n```\n\n### 修改社交链接\n\n在主题的 `_config.yml` 文件中，默认支持 `QQ`、`GitHub` 和邮箱等的配置。\n\n### 添加网易云音乐BGM\n\n首先打开网易云网页版，找到想听的歌曲，然后点击生成外链\n\n复制如下代码：\n\n```yaml\n<div align=\"middle\">这里粘贴刚刚复制的代码</div>\n```\n\n\n### 修改打赏的二维码图片\n\n在主题文件的 `source/medias/reward` 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。\n\n\n\n## 文章 Front-matter 介绍\n\n### Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n| 配置选项   | 默认值                      | 描述                                                         |\n| ---------- | --------------------------- | ------------------------------------------------------------ |\n| title      | `Markdown` 的文件标题        | 文章标题，强烈建议填写此选项                                 |\n| date       | 文件创建时的日期时间          | 发布时间，强烈建议填写此选项，且最好保证全局唯一             |\n| author     | 根 `_config.yml` 中的 `author` | 文章作者                                                     |\n| img        | `featureImages` 中的某个值   | 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg` |\n| top        | `true`                      | 推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章 |\n| cover      | `false`                     | `v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中 |\n| coverImg   | 无                          | `v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 |\n| password   | 无                          | 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项 |\n| toc        | `true`                      | 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项 |\n| mathjax    | `false`                     | 是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行 |\n| summary    | 无                          | 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 |\n| categories | 无                          | 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 |\n| tags       | 无                          | 文章标签，一篇文章可以多个标签                              |\n| keywords   | 文章标题                     | 文章关键字，SEO 时需要                              |\n| reprintPolicy | cc_by                    | 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 |\n\n> **注意**:\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图**各有特色**。\n> 2. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 3. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[开源中国在线工具](http://tool.oschina.net/encrypt?type=2)、[chahuo](http://encode.chahuo.com/)、[站长工具](http://tool.chinaz.com/tools/hash.aspx)。\n> 4. 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则\n\n以下为文章的 `Front-matter` 示例。\n\n### 最简示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n\n### 最全示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```\n\n## 效果截图\n\n![首页](http://static.blinkfox.com/matery-20181202-1.png)\n\n![首页推荐文章](http://static.blinkfox.com/matery-20181202-2.png)\n\n![首页文章列表](http://static.blinkfox.com/matery-20181202-3.png)\n\n![首页文章列表](http://static.blinkfox.com/matery-20181202-7.png)\n\n![首页文章列表](http://static.blinkfox.com/matery-20181202-8.png)\n\n## 自定制修改\n\n在本主题的 `_config.yml` 中可以修改部分自定义信息，有以下几个部分：\n\n- 菜单\n- 我的梦想\n- 首页的音乐播放器和视频播放器配置\n- 是否显示推荐文章名称和按钮配置\n- `favicon` 和 `Logo`\n- 个人信息\n- TOC 目录\n- 文章打赏信息\n- 复制文章内容时追加版权信息\n- MathJax\n- 文章字数统计、阅读时长\n- 点击页面的'爱心'效果\n- 我的项目\n- 我的技能\n- 我的相册\n- `Gitalk`、`Gitment`、`Valine` 和 `disqus` 评论配置\n- [不蒜子统计](http://busuanzi.ibruce.info/)和谷歌分析（`Google Analytics`）\n- 默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 `hashcode` 值取余，来选择展示对应的特色图\n\n**我认为个人博客应该都有自己的风格和特色**。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 `_config.yml` 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：\n\n### 修改主题颜色\n\n在主题文件的 `/source/css/matery.css` 文件中，搜索 `.bg-color` 来修改背景颜色：\n\n```css\n/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */\n.bg-color {\n    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);\n}\n\n@-webkit-keyframes rainbow {\n   /* 动态切换背景颜色. */\n}\n\n@keyframes rainbow {\n    /* 动态切换背景颜色. */\n}\n```\n\n### 修改 banner 图和文章特色图\n\n你可以直接在 `/source/medias/banner` 文件夹中更换你喜欢的 `banner` 图片，主题代码中是每天动态切换一张，只需 `7` 张即可。如果你会 `JavaScript` 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，`banner` 切换的代码位置在 `/layout/_partial/bg-cover-content.ejs` 文件的 `<script></script>` 代码中：\n\n```javascript\n$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');\n```\n\n在 `/source/medias/featureimages` 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 `_config.yml` 做同步修改。\n\n","source":"_posts/theme-install.md","raw":"---\ntitle: theme-install\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-15 17:09:28\npassword: \nsummary: hexo+github+cheme部署\ntags: hexo\ncategories: 博客部署\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1869507838&auto=1&height=66\"></iframe>\n</div>\n\n## 下载\n\n本主题**推荐你使用 Hexo 5.0.0 及以上的版本**。如果，你已经有一个自己的 [Hexo](https://hexo.io/zh-cn/) 博客了，建议你将 Hexo 升级到最新稳定的版本。\n\n点击 [这里](https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master) 下载 `master` 分支的最新稳定版的代码，解压缩后，将 `hexo-theme-matery` 的文件夹复制到你 Hexo 的 `themes` 文件夹中即可。\n\n当然你也可以在你的 `themes` 文件夹下使用 `git clone` 命令来下载:\n\n```bash\ngit clone https://github.com/blinkfox/hexo-theme-matery.git\n```\n\n## 配置(主要还是看项目的_config.yml和主题的_config.yml)\n\n### 切换主题\n\n修改 Hexo 根目录下的 `_config.yml` 的  `theme` 的值：`theme: hexo-theme-matery`\n\n#### `_config.yml` 文件的其它修改建议:\n\n- 请修改主目录中 `_config.yml` 的 `url` 的值为你的网站主 `URL`（如：`http://lqs-1.github.io`）。\n- 建议修改目录中 `_config.yml` 的两个 `per_page` 的分页条数值为 `6` 的倍数，如：`12`、`18` 等，这样文章列表在各个屏幕下都能较好的显示。\n- 如果你是中文用户，则建议修改目录中 `_config.yml` 的 `language` 的值为 `zh-CN`。\n\n### 新建分类 categories 页\n\n`categories` 页是用来展示所有分类的页面，如果在你的博客 `source` 目录下还没有 `categories/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"categories\"\n```\n\n编辑你刚刚新建的页面文件 `/source/categories/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n```\n\n### 新建标签 tags 页\n\n`tags` 页是用来展示所有标签的页面，如果在你的博客 `source` 目录下还没有 `tags/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"tags\"\n```\n\n编辑你刚刚新建的页面文件 `/source/tags/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n```\n### 新建 404 页\n\n如果在你的博客 `source` 目录下还没有 `404.md` 文件，那么你就需要新建一个\n\n```bash\ntouch 404.md\n```\n\n编辑你刚刚新建的页面文件 `/source/404/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n```\n\n### 菜单导航配置\n\n#### 配置基本菜单导航的名称、路径url和图标icon.\n\n1.菜单导航名称可以是中文也可以是英文(如：`Index`或`主页`) \n2.图标icon 可以在[Font Awesome](https://fontawesome.com/icons) 中查找   \n\n```yaml\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n```\n\n#### 二级菜单配置方法\n\n如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作\n     \n1. 在需要添加二级菜单的一级菜单下添加`children`关键字(如:`About`菜单下添加`children`)     \n2. 在`children`下创建二级菜单的 名称name,路径url和图标icon.      \n3. 注意每个二级菜单模块前要加 `-`.     \n4. 注意缩进格式  \n\n```yaml\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Music\n        url: /music\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image\n```\n\n执行 `hexo clean && hexo g` 重新生成博客文件，然后就可以在文章中对应位置看到你用`emoji`语法写的表情了。\n\n\n\n### 代码高亮\n\n从 Hexo5.0 版本开始自带了 `prismjs` 代码语法高亮的支持，本主题对此进行了改造支持。\n\n如果你的博客中曾经安装过 `hexo-prism-plugin` 的插件，那么你须要执行 `npm uninstall hexo-prism-plugin` 来卸载掉它，否则生成的代码中会有 `&#123;` 和 `&#125;` 的转义字符。\n\n然后，修改 Hexo 根目录下 `_config.yml` 文件中 `highlight.enable` 的值为 `false`，并将 `prismjs.enable` 的值设置为 `true`，主要配置如下：\n\n```yaml\nhighlight:\n  enable: false\n  line_number: true\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n```\n\n主题中默认的 `prismjs` 主题是 `Tomorrow Night`，如果你想定制自己的主题，可以前往 [prismjs 下载页面](https://prismjs.com/download.html) 定制下载自己喜欢的主题 `css` 文件，然后将此 css 主题文件取名为 `prism.css`，替换掉 `hexo-theme-matery` 主题文件夹中的 `source/libs/prism/prism.css` 文件即可。\n\n### 搜索\n\n本主题中还使用到了 [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 的 Hexo 插件来做内容搜索，安装命令如下：\n\n```bash\nnpm install hexo-generator-search --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\nsearch:\n  path: search.xml\n  field: post\n```\n\n### 中文链接转拼音（建议安装）\n\n如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 `SEO`，且 `gitment` 评论对中文链接也不支持。我们可以用 [hexo-permalink-pinyin](https://github.com/viko16/hexo-permalink-pinyin) Hexo 插件使在生成文章时生成中文拼音的永久链接。\n\n安装命令如下：\n\n```bash\nnpm i hexo-permalink-pinyin --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\npermalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'\n```\n\n> **注**：除了此插件外，[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink) 插件也可以生成非中文的链接。\n\n### 文章字数统计插件（建议安装）\n\n如果你想要在文章中显示文章字数、阅读时长信息，可以安装 [hexo-wordcount](https://github.com/willin/hexo-wordcount)插件。\n\n安装命令如下：\n\n```bash\nnpm i --save hexo-wordcount\n```\n\n然后只需在本主题下的 `_config.yml` 文件中，将各个文章字数相关的配置激活即可：\n\n```yaml\npostInfo:\n  date: true\n  update: false\n  wordCount: false # 设置文章字数统计为 true.\n  totalCount: false # 设置站点文章总字数统计为 true.\n  min2read: false # 阅读时长.\n  readCount: false # 阅读次数.\n```\n\n### 修改社交链接\n\n在主题的 `_config.yml` 文件中，默认支持 `QQ`、`GitHub` 和邮箱等的配置。\n\n### 添加网易云音乐BGM\n\n首先打开网易云网页版，找到想听的歌曲，然后点击生成外链\n\n复制如下代码：\n\n```yaml\n<div align=\"middle\">这里粘贴刚刚复制的代码</div>\n```\n\n\n### 修改打赏的二维码图片\n\n在主题文件的 `source/medias/reward` 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。\n\n\n\n## 文章 Front-matter 介绍\n\n### Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n| 配置选项   | 默认值                      | 描述                                                         |\n| ---------- | --------------------------- | ------------------------------------------------------------ |\n| title      | `Markdown` 的文件标题        | 文章标题，强烈建议填写此选项                                 |\n| date       | 文件创建时的日期时间          | 发布时间，强烈建议填写此选项，且最好保证全局唯一             |\n| author     | 根 `_config.yml` 中的 `author` | 文章作者                                                     |\n| img        | `featureImages` 中的某个值   | 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg` |\n| top        | `true`                      | 推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章 |\n| cover      | `false`                     | `v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中 |\n| coverImg   | 无                          | `v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 |\n| password   | 无                          | 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项 |\n| toc        | `true`                      | 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项 |\n| mathjax    | `false`                     | 是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行 |\n| summary    | 无                          | 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 |\n| categories | 无                          | 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 |\n| tags       | 无                          | 文章标签，一篇文章可以多个标签                              |\n| keywords   | 文章标题                     | 文章关键字，SEO 时需要                              |\n| reprintPolicy | cc_by                    | 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 |\n\n> **注意**:\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图**各有特色**。\n> 2. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 3. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[开源中国在线工具](http://tool.oschina.net/encrypt?type=2)、[chahuo](http://encode.chahuo.com/)、[站长工具](http://tool.chinaz.com/tools/hash.aspx)。\n> 4. 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则\n\n以下为文章的 `Front-matter` 示例。\n\n### 最简示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n\n### 最全示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```\n\n## 效果截图\n\n![首页](http://static.blinkfox.com/matery-20181202-1.png)\n\n![首页推荐文章](http://static.blinkfox.com/matery-20181202-2.png)\n\n![首页文章列表](http://static.blinkfox.com/matery-20181202-3.png)\n\n![首页文章列表](http://static.blinkfox.com/matery-20181202-7.png)\n\n![首页文章列表](http://static.blinkfox.com/matery-20181202-8.png)\n\n## 自定制修改\n\n在本主题的 `_config.yml` 中可以修改部分自定义信息，有以下几个部分：\n\n- 菜单\n- 我的梦想\n- 首页的音乐播放器和视频播放器配置\n- 是否显示推荐文章名称和按钮配置\n- `favicon` 和 `Logo`\n- 个人信息\n- TOC 目录\n- 文章打赏信息\n- 复制文章内容时追加版权信息\n- MathJax\n- 文章字数统计、阅读时长\n- 点击页面的'爱心'效果\n- 我的项目\n- 我的技能\n- 我的相册\n- `Gitalk`、`Gitment`、`Valine` 和 `disqus` 评论配置\n- [不蒜子统计](http://busuanzi.ibruce.info/)和谷歌分析（`Google Analytics`）\n- 默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 `hashcode` 值取余，来选择展示对应的特色图\n\n**我认为个人博客应该都有自己的风格和特色**。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 `_config.yml` 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：\n\n### 修改主题颜色\n\n在主题文件的 `/source/css/matery.css` 文件中，搜索 `.bg-color` 来修改背景颜色：\n\n```css\n/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */\n.bg-color {\n    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);\n}\n\n@-webkit-keyframes rainbow {\n   /* 动态切换背景颜色. */\n}\n\n@keyframes rainbow {\n    /* 动态切换背景颜色. */\n}\n```\n\n### 修改 banner 图和文章特色图\n\n你可以直接在 `/source/medias/banner` 文件夹中更换你喜欢的 `banner` 图片，主题代码中是每天动态切换一张，只需 `7` 张即可。如果你会 `JavaScript` 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，`banner` 切换的代码位置在 `/layout/_partial/bg-cover-content.ejs` 文件的 `<script></script>` 代码中：\n\n```javascript\n$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');\n```\n\n在 `/source/medias/featureimages` 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 `_config.yml` 做同步修改。\n\n","slug":"theme-install","published":1,"updated":"2023-01-19T04:01:10.487Z","_id":"clcy469n20007covge6l3b3v1","comments":1,"layout":"post","photos":[],"link":"","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1869507838&auto=1&height=66\"></iframe>\n</div>\n\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href=\"https://hexo.io/zh-cn/\">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p>\n<p>点击 <a href=\"https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master\">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p>\n<p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"配置-主要还是看项目的-config-yml和主题的-config-yml\"><a href=\"#配置-主要还是看项目的-config-yml和主题的-config-yml\" class=\"headerlink\" title=\"配置(主要还是看项目的_config.yml和主题的_config.yml)\"></a>配置(主要还是看项目的_config.yml和主题的_config.yml)</h2><h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p>\n<h4 id=\"config-yml-文件的其它修改建议\"><a href=\"#config-yml-文件的其它修改建议\" class=\"headerlink\" title=\"_config.yml 文件的其它修改建议:\"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul>\n<li>请修改主目录中 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://lqs-1.github.io</code>）。</li>\n<li>建议修改目录中 <code>_config.yml</code> 的两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>\n<li>如果你是中文用户，则建议修改目录中 <code>_config.yml</code> 的 <code>language</code> 的值为 <code>zh-CN</code>。</li>\n</ul>\n<h3 id=\"新建分类-categories-页\"><a href=\"#新建分类-categories-页\" class=\"headerlink\" title=\"新建分类 categories 页\"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new page <span class=\"token string\">\"categories\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> categories\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 17:25:30</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"categories\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"categories\"</span>\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"新建标签-tags-页\"><a href=\"#新建标签-tags-页\" class=\"headerlink\" title=\"新建标签 tags 页\"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new page <span class=\"token string\">\"tags\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> tags\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 18:23:38</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tags\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tags\"</span>\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"新建-404-页\"><a href=\"#新建-404-页\" class=\"headerlink\" title=\"新建 404 页\"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> <span class=\"token number\">404</span>.md<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token number\">404</span>\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 17:25:30</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"404\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"404\"</span>\n<span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Oops～，我崩溃了！找不到你想要的页面 :(\"</span>\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"菜单导航配置\"><a href=\"#菜单导航配置\" class=\"headerlink\" title=\"菜单导航配置\"></a>菜单导航配置</h3><h4 id=\"配置基本菜单导航的名称、路径url和图标icon\"><a href=\"#配置基本菜单导航的名称、路径url和图标icon\" class=\"headerlink\" title=\"配置基本菜单导航的名称、路径url和图标icon.\"></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href=\"https://fontawesome.com/icons\">Font Awesome</a> 中查找   </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Index</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>home\n  <span class=\"token key atrule\">Tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /tags\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>tags\n  <span class=\"token key atrule\">Categories</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /categories\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>bookmark\n  <span class=\"token key atrule\">Archives</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /archives\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>archive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"二级菜单配置方法\"><a href=\"#二级菜单配置方法\" class=\"headerlink\" title=\"二级菜单配置方法\"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p>\n<ol>\n<li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li>\n<li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li>\n<li>注意每个二级菜单模块前要加 <code>-</code>.     </li>\n<li>注意缩进格式  </li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Index</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>home\n  <span class=\"token key atrule\">Tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /tags\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>tags\n  <span class=\"token key atrule\">Categories</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /categories\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>bookmark\n  <span class=\"token key atrule\">Archives</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /archives\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>archive\n  <span class=\"token key atrule\">About</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /about\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>user<span class=\"token punctuation\">-</span>circle<span class=\"token punctuation\">-</span>o\n  <span class=\"token key atrule\">Friends</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /friends\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>address<span class=\"token punctuation\">-</span>book\n  <span class=\"token key atrule\">Medias</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>list\n    <span class=\"token key atrule\">children</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Music\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /music\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>music\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Movies\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /movies\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>film\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Books\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /books\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>book\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Galleries\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /galleries\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>image<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p>\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p>\n<p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p>\n<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">auto_detect</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token key atrule\">wrap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">hljs</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">preprocess</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href=\"https://prismjs.com/download.html\">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>本主题中还使用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-generator-search <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">search</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> search.xml\n  <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> post<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"中文链接转拼音（建议安装）\"><a href=\"#中文链接转拼音（建议安装）\" class=\"headerlink\" title=\"中文链接转拼音（建议安装）\"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href=\"https://github.com/viko16/hexo-permalink-pinyin\">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>\n<p>安装命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i hexo-permalink-pinyin <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">permalink_pinyin</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">separator</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'-'</span> <span class=\"token comment\"># default: '-'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><strong>注</strong>：除了此插件外，<a href=\"https://github.com/rozbo/hexo-abbrlink\">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>\n</blockquote>\n<h3 id=\"文章字数统计插件（建议安装）\"><a href=\"#文章字数统计插件（建议安装）\" class=\"headerlink\" title=\"文章字数统计插件（建议安装）\"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href=\"https://github.com/willin/hexo-wordcount\">hexo-wordcount</a>插件。</p>\n<p>安装命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">--save</span> hexo-wordcount<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">postInfo</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">update</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">wordCount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 设置文章字数统计为 true.</span>\n  <span class=\"token key atrule\">totalCount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 设置站点文章总字数统计为 true.</span>\n  <span class=\"token key atrule\">min2read</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 阅读时长.</span>\n  <span class=\"token key atrule\">readCount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 阅读次数.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"修改社交链接\"><a href=\"#修改社交链接\" class=\"headerlink\" title=\"修改社交链接\"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置。</p>\n<h3 id=\"添加网易云音乐BGM\"><a href=\"#添加网易云音乐BGM\" class=\"headerlink\" title=\"添加网易云音乐BGM\"></a>添加网易云音乐BGM</h3><p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链</p>\n<p>复制如下代码：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">&lt;div align=\"middle\"<span class=\"token punctuation\">></span>这里粘贴刚刚复制的代码&lt;/div<span class=\"token punctuation\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"修改打赏的二维码图片\"><a href=\"#修改打赏的二维码图片\" class=\"headerlink\" title=\"修改打赏的二维码图片\"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>\n<h2 id=\"文章-Front-matter-介绍\"><a href=\"#文章-Front-matter-介绍\" class=\"headerlink\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"Front-matter-选项详解\"><a href=\"#Front-matter-选项详解\" class=\"headerlink\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>文章标题</td>\n<td>文章关键字，SEO 时需要</td>\n</tr>\n<tr>\n<td>reprintPolicy</td>\n<td>cc_by</td>\n<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\">站长工具</a>。</li>\n<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li>\n</ol>\n</blockquote>\n<p>以下为文章的 <code>Front-matter</code> 示例。</p>\n<h3 id=\"最简示例\"><a href=\"#最简示例\" class=\"headerlink\" title=\"最简示例\"></a>最简示例</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"最全示例\"><a href=\"#最全示例\" class=\"headerlink\" title=\"最全示例\"></a>最全示例</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> 赵奇\n<span class=\"token key atrule\">img</span><span class=\"token punctuation\">:</span> /source/images/xxx.jpg\n<span class=\"token key atrule\">top</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">coverImg</span><span class=\"token punctuation\">:</span> /images/1.jpg\n<span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\n<span class=\"token key atrule\">toc</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">mathjax</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">summary</span><span class=\"token punctuation\">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\n<span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> Markdown\n<span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Typora\n  <span class=\"token punctuation\">-</span> Markdown\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"效果截图\"><a href=\"#效果截图\" class=\"headerlink\" title=\"效果截图\"></a>效果截图</h2><p><img src=\"http://static.blinkfox.com/matery-20181202-1.png\" alt=\"首页\"></p>\n<p><img src=\"http://static.blinkfox.com/matery-20181202-2.png\" alt=\"首页推荐文章\"></p>\n<p><img src=\"http://static.blinkfox.com/matery-20181202-3.png\" alt=\"首页文章列表\"></p>\n<p><img src=\"http://static.blinkfox.com/matery-20181202-7.png\" alt=\"首页文章列表\"></p>\n<p><img src=\"http://static.blinkfox.com/matery-20181202-8.png\" alt=\"首页文章列表\"></p>\n<h2 id=\"自定制修改\"><a href=\"#自定制修改\" class=\"headerlink\" title=\"自定制修改\"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p>\n<ul>\n<li>菜单</li>\n<li>我的梦想</li>\n<li>首页的音乐播放器和视频播放器配置</li>\n<li>是否显示推荐文章名称和按钮配置</li>\n<li><code>favicon</code> 和 <code>Logo</code></li>\n<li>个人信息</li>\n<li>TOC 目录</li>\n<li>文章打赏信息</li>\n<li>复制文章内容时追加版权信息</li>\n<li>MathJax</li>\n<li>文章字数统计、阅读时长</li>\n<li>点击页面的’爱心’效果</li>\n<li>我的项目</li>\n<li>我的技能</li>\n<li>我的相册</li>\n<li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li>\n<li><a href=\"http://busuanzi.ibruce.info/\">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li>\n<li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li>\n</ul>\n<p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p>\n<h3 id=\"修改主题颜色\"><a href=\"#修改主题颜色\" class=\"headerlink\" title=\"修改主题颜色\"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span>\n<span class=\"token selector\">.bg-color</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right<span class=\"token punctuation\">,</span> #4cbf30 0%<span class=\"token punctuation\">,</span> #0f9d58 100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@-webkit-keyframes</span> rainbow</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/* 动态切换背景颜色. */</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> rainbow</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* 动态切换背景颜色. */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"修改-banner-图和文章特色图\"><a href=\"#修改-banner-图和文章特色图\" class=\"headerlink\" title=\"修改 banner 图和文章特色图\"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.bg-cover'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'background-image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'url(/medias/banner/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1869507838&auto=1&height=66\"></iframe>\n</div>\n\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href=\"https://hexo.io/zh-cn/\">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p>\n<p>点击 <a href=\"https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master\">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p>\n<p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"配置-主要还是看项目的-config-yml和主题的-config-yml\"><a href=\"#配置-主要还是看项目的-config-yml和主题的-config-yml\" class=\"headerlink\" title=\"配置(主要还是看项目的_config.yml和主题的_config.yml)\"></a>配置(主要还是看项目的_config.yml和主题的_config.yml)</h2><h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p>\n<h4 id=\"config-yml-文件的其它修改建议\"><a href=\"#config-yml-文件的其它修改建议\" class=\"headerlink\" title=\"_config.yml 文件的其它修改建议:\"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul>\n<li>请修改主目录中 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://lqs-1.github.io</code>）。</li>\n<li>建议修改目录中 <code>_config.yml</code> 的两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>\n<li>如果你是中文用户，则建议修改目录中 <code>_config.yml</code> 的 <code>language</code> 的值为 <code>zh-CN</code>。</li>\n</ul>\n<h3 id=\"新建分类-categories-页\"><a href=\"#新建分类-categories-页\" class=\"headerlink\" title=\"新建分类 categories 页\"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new page <span class=\"token string\">\"categories\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> categories\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 17:25:30</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"categories\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"categories\"</span>\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"新建标签-tags-页\"><a href=\"#新建标签-tags-页\" class=\"headerlink\" title=\"新建标签 tags 页\"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new page <span class=\"token string\">\"tags\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> tags\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 18:23:38</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tags\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tags\"</span>\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"新建-404-页\"><a href=\"#新建-404-页\" class=\"headerlink\" title=\"新建 404 页\"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> <span class=\"token number\">404</span>.md<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token number\">404</span>\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 17:25:30</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"404\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"404\"</span>\n<span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Oops～，我崩溃了！找不到你想要的页面 :(\"</span>\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"菜单导航配置\"><a href=\"#菜单导航配置\" class=\"headerlink\" title=\"菜单导航配置\"></a>菜单导航配置</h3><h4 id=\"配置基本菜单导航的名称、路径url和图标icon\"><a href=\"#配置基本菜单导航的名称、路径url和图标icon\" class=\"headerlink\" title=\"配置基本菜单导航的名称、路径url和图标icon.\"></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href=\"https://fontawesome.com/icons\">Font Awesome</a> 中查找   </p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Index</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>home\n  <span class=\"token key atrule\">Tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /tags\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>tags\n  <span class=\"token key atrule\">Categories</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /categories\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>bookmark\n  <span class=\"token key atrule\">Archives</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /archives\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>archive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"二级菜单配置方法\"><a href=\"#二级菜单配置方法\" class=\"headerlink\" title=\"二级菜单配置方法\"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p>\n<ol>\n<li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li>\n<li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li>\n<li>注意每个二级菜单模块前要加 <code>-</code>.     </li>\n<li>注意缩进格式  </li>\n</ol>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Index</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>home\n  <span class=\"token key atrule\">Tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /tags\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>tags\n  <span class=\"token key atrule\">Categories</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /categories\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>bookmark\n  <span class=\"token key atrule\">Archives</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /archives\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>archive\n  <span class=\"token key atrule\">About</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /about\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>user<span class=\"token punctuation\">-</span>circle<span class=\"token punctuation\">-</span>o\n  <span class=\"token key atrule\">Friends</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /friends\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>address<span class=\"token punctuation\">-</span>book\n  <span class=\"token key atrule\">Medias</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>list\n    <span class=\"token key atrule\">children</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Music\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /music\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>music\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Movies\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /movies\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>film\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Books\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /books\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>book\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Galleries\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /galleries\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>image<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p>\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p>\n<p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p>\n<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">auto_detect</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token key atrule\">wrap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">hljs</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">preprocess</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href=\"https://prismjs.com/download.html\">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>本主题中还使用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-generator-search <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">search</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> search.xml\n  <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> post<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"中文链接转拼音（建议安装）\"><a href=\"#中文链接转拼音（建议安装）\" class=\"headerlink\" title=\"中文链接转拼音（建议安装）\"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href=\"https://github.com/viko16/hexo-permalink-pinyin\">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>\n<p>安装命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i hexo-permalink-pinyin <span class=\"token parameter variable\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">permalink_pinyin</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">separator</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'-'</span> <span class=\"token comment\"># default: '-'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><strong>注</strong>：除了此插件外，<a href=\"https://github.com/rozbo/hexo-abbrlink\">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>\n</blockquote>\n<h3 id=\"文章字数统计插件（建议安装）\"><a href=\"#文章字数统计插件（建议安装）\" class=\"headerlink\" title=\"文章字数统计插件（建议安装）\"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href=\"https://github.com/willin/hexo-wordcount\">hexo-wordcount</a>插件。</p>\n<p>安装命令如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">--save</span> hexo-wordcount<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">postInfo</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">update</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">wordCount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 设置文章字数统计为 true.</span>\n  <span class=\"token key atrule\">totalCount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 设置站点文章总字数统计为 true.</span>\n  <span class=\"token key atrule\">min2read</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 阅读时长.</span>\n  <span class=\"token key atrule\">readCount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 阅读次数.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"修改社交链接\"><a href=\"#修改社交链接\" class=\"headerlink\" title=\"修改社交链接\"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置。</p>\n<h3 id=\"添加网易云音乐BGM\"><a href=\"#添加网易云音乐BGM\" class=\"headerlink\" title=\"添加网易云音乐BGM\"></a>添加网易云音乐BGM</h3><p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链</p>\n<p>复制如下代码：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">&lt;div align=\"middle\"<span class=\"token punctuation\">></span>这里粘贴刚刚复制的代码&lt;/div<span class=\"token punctuation\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"修改打赏的二维码图片\"><a href=\"#修改打赏的二维码图片\" class=\"headerlink\" title=\"修改打赏的二维码图片\"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>\n<h2 id=\"文章-Front-matter-介绍\"><a href=\"#文章-Front-matter-介绍\" class=\"headerlink\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"Front-matter-选项详解\"><a href=\"#Front-matter-选项详解\" class=\"headerlink\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>文章标题</td>\n<td>文章关键字，SEO 时需要</td>\n</tr>\n<tr>\n<td>reprintPolicy</td>\n<td>cc_by</td>\n<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\">站长工具</a>。</li>\n<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li>\n</ol>\n</blockquote>\n<p>以下为文章的 <code>Front-matter</code> 示例。</p>\n<h3 id=\"最简示例\"><a href=\"#最简示例\" class=\"headerlink\" title=\"最简示例\"></a>最简示例</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"最全示例\"><a href=\"#最全示例\" class=\"headerlink\" title=\"最全示例\"></a>最全示例</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> 赵奇\n<span class=\"token key atrule\">img</span><span class=\"token punctuation\">:</span> /source/images/xxx.jpg\n<span class=\"token key atrule\">top</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">coverImg</span><span class=\"token punctuation\">:</span> /images/1.jpg\n<span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\n<span class=\"token key atrule\">toc</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">mathjax</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">summary</span><span class=\"token punctuation\">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\n<span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> Markdown\n<span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Typora\n  <span class=\"token punctuation\">-</span> Markdown\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"效果截图\"><a href=\"#效果截图\" class=\"headerlink\" title=\"效果截图\"></a>效果截图</h2><p><img src=\"http://static.blinkfox.com/matery-20181202-1.png\" alt=\"首页\"></p>\n<p><img src=\"http://static.blinkfox.com/matery-20181202-2.png\" alt=\"首页推荐文章\"></p>\n<p><img src=\"http://static.blinkfox.com/matery-20181202-3.png\" alt=\"首页文章列表\"></p>\n<p><img src=\"http://static.blinkfox.com/matery-20181202-7.png\" alt=\"首页文章列表\"></p>\n<p><img src=\"http://static.blinkfox.com/matery-20181202-8.png\" alt=\"首页文章列表\"></p>\n<h2 id=\"自定制修改\"><a href=\"#自定制修改\" class=\"headerlink\" title=\"自定制修改\"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p>\n<ul>\n<li>菜单</li>\n<li>我的梦想</li>\n<li>首页的音乐播放器和视频播放器配置</li>\n<li>是否显示推荐文章名称和按钮配置</li>\n<li><code>favicon</code> 和 <code>Logo</code></li>\n<li>个人信息</li>\n<li>TOC 目录</li>\n<li>文章打赏信息</li>\n<li>复制文章内容时追加版权信息</li>\n<li>MathJax</li>\n<li>文章字数统计、阅读时长</li>\n<li>点击页面的’爱心’效果</li>\n<li>我的项目</li>\n<li>我的技能</li>\n<li>我的相册</li>\n<li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li>\n<li><a href=\"http://busuanzi.ibruce.info/\">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li>\n<li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li>\n</ul>\n<p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p>\n<h3 id=\"修改主题颜色\"><a href=\"#修改主题颜色\" class=\"headerlink\" title=\"修改主题颜色\"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span>\n<span class=\"token selector\">.bg-color</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>to right<span class=\"token punctuation\">,</span> #4cbf30 0%<span class=\"token punctuation\">,</span> #0f9d58 100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@-webkit-keyframes</span> rainbow</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/* 动态切换背景颜色. */</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> rainbow</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* 动态切换背景颜色. */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"修改-banner-图和文章特色图\"><a href=\"#修改-banner-图和文章特色图\" class=\"headerlink\" title=\"修改 banner 图和文章特色图\"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.bg-cover'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">'background-image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'url(/medias/banner/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>\n"},{"title":"cloud","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-15T13:39:49.000Z","password":"d5e8139b6262895c208b9fd9e7a21ecba14eb00445638566fcb77bae14408691","summary":"服务器部署","_content":"## 购买vps\n> [`racknerd`](https://racknerd.com/)\n\n> username: 749062870@qq.com\n\n> password: 20021218lqs\n\n## 购买DomainName\n> [`namesilo`](https://www.namesilo.com/)\n\n> username: liqisong\n\n> password: @20021218Lqs\n\n## 管理域名\n> [`cloudflare`](https://dash.cloudflare.com/)\n\n> username: 749062870@qq.com\n\n> password: @20021218Lqs\n\n","source":"_posts/cloud.md","raw":"---\ntitle: cloud\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-15 21:39:49\npassword: d5e8139b6262895c208b9fd9e7a21ecba14eb00445638566fcb77bae14408691\nsummary: 服务器部署\ntags: cloud\ncategories: 杂项\n---\n## 购买vps\n> [`racknerd`](https://racknerd.com/)\n\n> username: 749062870@qq.com\n\n> password: 20021218lqs\n\n## 购买DomainName\n> [`namesilo`](https://www.namesilo.com/)\n\n> username: liqisong\n\n> password: @20021218Lqs\n\n## 管理域名\n> [`cloudflare`](https://dash.cloudflare.com/)\n\n> username: 749062870@qq.com\n\n> password: @20021218Lqs\n\n","slug":"cloud","published":1,"updated":"2023-01-19T04:01:10.487Z","_id":"clcy8glkx000014vgdo08dv4e","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"购买vps\"><a href=\"#购买vps\" class=\"headerlink\" title=\"购买vps\"></a>购买vps</h2><blockquote>\n<p><a href=\"https://racknerd.com/\"><code>racknerd</code></a></p>\n</blockquote>\n<blockquote>\n<p>username: <a href=\"mailto:&#55;&#x34;&#x39;&#x30;&#x36;&#x32;&#x38;&#55;&#x30;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;\">&#55;&#x34;&#x39;&#x30;&#x36;&#x32;&#x38;&#55;&#x30;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;</a></p>\n</blockquote>\n<blockquote>\n<p>password: 20021218lqs</p>\n</blockquote>\n<h2 id=\"购买DomainName\"><a href=\"#购买DomainName\" class=\"headerlink\" title=\"购买DomainName\"></a>购买DomainName</h2><blockquote>\n<p><a href=\"https://www.namesilo.com/\"><code>namesilo</code></a></p>\n</blockquote>\n<blockquote>\n<p>username: liqisong</p>\n</blockquote>\n<blockquote>\n<p>password: @20021218Lqs</p>\n</blockquote>\n<h2 id=\"管理域名\"><a href=\"#管理域名\" class=\"headerlink\" title=\"管理域名\"></a>管理域名</h2><blockquote>\n<p><a href=\"https://dash.cloudflare.com/\"><code>cloudflare</code></a></p>\n</blockquote>\n<blockquote>\n<p>username: <a href=\"mailto:&#x37;&#x34;&#57;&#x30;&#54;&#50;&#x38;&#55;&#48;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;\">&#x37;&#x34;&#57;&#x30;&#54;&#50;&#x38;&#55;&#48;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a></p>\n</blockquote>\n<blockquote>\n<p>password: @20021218Lqs</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"购买vps\"><a href=\"#购买vps\" class=\"headerlink\" title=\"购买vps\"></a>购买vps</h2><blockquote>\n<p><a href=\"https://racknerd.com/\"><code>racknerd</code></a></p>\n</blockquote>\n<blockquote>\n<p>username: <a href=\"mailto:&#55;&#x34;&#x39;&#x30;&#x36;&#x32;&#x38;&#55;&#x30;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;\">&#55;&#x34;&#x39;&#x30;&#x36;&#x32;&#x38;&#55;&#x30;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;</a></p>\n</blockquote>\n<blockquote>\n<p>password: 20021218lqs</p>\n</blockquote>\n<h2 id=\"购买DomainName\"><a href=\"#购买DomainName\" class=\"headerlink\" title=\"购买DomainName\"></a>购买DomainName</h2><blockquote>\n<p><a href=\"https://www.namesilo.com/\"><code>namesilo</code></a></p>\n</blockquote>\n<blockquote>\n<p>username: liqisong</p>\n</blockquote>\n<blockquote>\n<p>password: @20021218Lqs</p>\n</blockquote>\n<h2 id=\"管理域名\"><a href=\"#管理域名\" class=\"headerlink\" title=\"管理域名\"></a>管理域名</h2><blockquote>\n<p><a href=\"https://dash.cloudflare.com/\"><code>cloudflare</code></a></p>\n</blockquote>\n<blockquote>\n<p>username: <a href=\"mailto:&#x37;&#x34;&#57;&#x30;&#54;&#50;&#x38;&#55;&#48;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;\">&#x37;&#x34;&#57;&#x30;&#54;&#50;&#x38;&#55;&#48;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a></p>\n</blockquote>\n<blockquote>\n<p>password: @20021218Lqs</p>\n</blockquote>\n"},{"title":"Django基础","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T07:42:38.000Z","password":null,"summary":"django学习笔记","_content":"## Django\n### 创建项目\ndjango-admin startproject 项目名\n\n### 创建应用\npython manage.py startapp 应用名\n### 运行web服务器\npython manage.py runserver\n\n\n\n\n```python\npython3 -m http.server [port] # 可以启动一个web服务，供局域网内用户下载文件\n```\n\n### 将固定的路径加入python可以搜索的目录\nimport sys\n\nsys.path.insert(位置（从0开始），要加入搜索的目录)\n```python\npython manage.py shell # 进入django终端\n```\n### ORM框架\n-    1、对象和数据库映射\n-    2、根据设计的模型生成数据库中的表:\n    -  1、生长牵引文件:python manage.py makemigrations\n    - 2、执行牵引文件:python manage.py migrate\n\n### 模型类\n> 在models.py中编写模型类\n\n  -  1、生长迁移文件:python manage.py makemigrations\n    -    注意如果有ForeignKey的话一定要加上on_delete = models.CASCADE\n  - 2、执行迁移文件:python manage.py migrate\n    \n> python manage.py shell\n```text\n首先:导入定义好的模型类\n其次:实例化一个对象\n插入 :对象.属性名=值\n保存:对像.save()\n拿到数据:变量 = 类名.objects.get(条件)\n    变量.属性：直接查看\n    变量.属性=值  ——> 变量.save()  :修改\n    变量.delete():删除\n```\n\n### 后台管理（在admin.py中编写后台管理类）\n```\n本地化: LANGUAGE_CODE = 'zh-hans' :使用中文\n       TIME_ZONE = 'Asia/Shanghai' :使用中国时间\n\n创建管理员:python manage.py createsuperuser   (第一次新建管理员的时候必须要执行一下牵引文件，可以不生成，但必须执行)\n\n自己创建的管理员是默认是放在数据库中的一个单独的表中的，但是可以使用（在settings.py中）：\n# django认证系统使用的模型类\nAUTH_USER_MODEL='应用.类名'\n\n这个来规定生成数据放在什么表，在实际开发中是特别的重要的，一般和用户信息放在一起\n\n使用这个必须导入(models.py中)from django.contrib.auth.models import AbstractUser\n\n加入自己定义的数据库或者数据库模型: 1、导入 2、admin.site.register(类)\n\n规定自定义的数据库或者数据库模型的显示: list_display('','')\n```\n\n### 使用视图（在views中编写）\n```\n使用模块: from django.http import HttpResponse,HttpResponseRedirect(重定向)\n使用模块: from django.shortcuts import render,redirect(也是重定向)\n使用 return HttpResponse('返回值') 返回结果\n使用模块: from django.conf.urls import include, url\nurl的使用方法:url(r'正则表达式',处理字符串)\n            url(r'正则表达式',include(处理源))\n\n实现过程: views.py 中创建视图（使用模块第一个） --->  创建 urls.py (使用第二个模块,并且导入views.py)  --->  项目中的urls.py\n中添加创建的urls.py(使用url添加)\n```\n\n\n### 模板（项目文件夹中创建 模板文件夹templates）\n```\n在项目文件夹中的setting中设置TEMPLATES中的DIRS，表示模板位置，一般拼接\n使用模板:\n    导入模块:from django.template import loader\n    1、使用模板文件: temp = loader.get_template('文件名可以带路径')\n    2、定义上下文（个模板传参数）: context = {字典参数}\n    3、渲染模板:产生HTML代码:res_html = temp.render(context)\n    4、返回浏览器:return HttpResponse(res_html)\n\n最简单的使用方法: return render(request,'文件可以带路径',{传参数})\n\n参数在html代码中的使用方法:\n    普通变量:{{key}}\n    for循环:{% fro x in xx %}\n            {%endfor%}\n\n```\n\n## 关于django和数据库的操作\n```\n1、创models文件 class xxx(models.Model)\n2、迁移文件\n3、创建views文件 def xxx(request)，必须有返回值,一般返回值用HttpResponse,使用模板的返回值用render,需要重定向的话使用redirect\n4、新建应用urls.py文件,用于定义访问时用的url地址\n5、取项目中的urls文件中添加应用的url文件 ：url(r'^',include(xxx.urls))\n6、在项目中创建templates模板文件,在到seting中配置一下，templates中的文件就是html文档\n```\n\n\n### 第一大点:models,模型,注册模型类\ndjango操作数据库的相关知识\n```\n应用下的models.py文件中定义的所有模型，都要继承一个抽象基类:\n创建抽象基类:在项目中创建一个pythonPakage,名字叫db,在这个包下面创建一个base_model.py文件，在文件中编写一个抽像基类\n```\n```python\nfrom django.db import models\nclass BaseModel(models.Model):\n        '''模型抽象基类'''\n        create_time = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')\n    update_time = models.DateTimeField(auto_now=True, verbose_name='更新时间')\n        is_delete = models.BooleanField(default=False, verbose_name='删除标记')\n    class Meta:\n        '''说明是一个抽象模型类'''\n        abstract = True\n```\n\n #####   约束选项在字段类型中使用，字段类型在models模块下使用\n字段类型:\n```\n1、AutoField:自动编号\n2、BooleanField:布尔类型\n3、NullBooleanField:Null，True，False三种值\n4、CharField（max_length=）:字符串,必须指定max_length\n5、TextField:大文本类型\n6、IntegerField:整数\n7、DecimalField(max_digits=,decimal_places=):浮点数，第一个参数表示总位数，第二个参数表示小数位数\n8、FloatField(max_digits=,decimal_places=):浮点数，参数同上\n9、DateField（[auto_now=,auto_now_add=]）:日期类型，有两个可选参数，用的时候只能用一个，第一个表示更新时间，第二个表示第一次创建的的时间\n10、TimeField（[auto_now=,auto_now_add=]）:时分秒\n11、DateTimeField（[auto_now=,auto_now_add=]）:年月日时分秒\n12、FileField:文件上传\n13、ImageField:有效图片\n\n14、ForeignKey:一对多\n15、ManyToManyField:多对多\n16、OneToOneField:一对一\n\n约束选项:\n1、default:默认值\n2、primary_key:主键\n3、unique:不重复\n4、db_index:索引，db_index=True/False\n5、db_column:指定表字段的名字，db_column='名字'\n6、null:空\n7、blank:是否为空，在后台使用，默认True，在django管理页面有用\n8、chioces：chioces选项,等于一个元组，格式 choices = ((xx,xxx),(xx,xxx)……),网页显示为一个列表框\n9、verbose_name：制定在后台的显示名称 ，字段和表名都可以用\n```\n#### 富文本\n```\ndjango使用tinymce：\n    pip install django-tinymce\n    from tinymce.models import HTMLField\n    xx = HTMLField(verbose_name = 'xx')\n    在settings.py中注册这个富文本编辑器，INSTALLED_APPS中添加tinymce\n    在settings.py中设置富文本编辑器的属性：\n        TINYMCE_DEFAULT_CONFIG = {\n            'theme': 'advanced',\n            'width': 编辑器的宽,\n            'height': 编辑器的高,\n        }\n    在项目urls中添加: url(r'^tinymce/', include('tinymce.urls'))\n\n```\n####\t查询\n```\n说明一下:exclude,filter,get三个都时带条件的--->模型名.objects.查询方式(属性名__条件名=值)\n条件名:\nexact:判等 ，可以不用直接用 =\ncontains:模糊查询，包含\nendswith\\startswith:模糊查询，结尾\\开头\nisnull:空查询,布尔值\nin:范围查询，属性名__in = 列表或者元组\ngt,lt,gte,lte:大于，小于，大于等于，小于等于\nday/month/year:使用方法:日期查询\n\nget():返回满足条件的一条记录\nall():返回所有记录，查询集\nfilter():返回满足条件的所有记录，查询集\nexclude():返回不满足条件的所有记录，查询集\norder_by(‘属性名1’,’属性名2'……):升序\norder_by(‘-属性名1’,’-属性名2'……):降序，order_by()是将查出来的数据进行排序，如：BookInfo.objects.all().order_by('id','-btitle')\n\n\nQ对象:用于查询时候的多个条件的  ’与或非‘  表示\n    from django.db.models import Q\n    例子:\n        BookInfo.object.filter(Q(id = 2) & Q(btitle = 'hello'))   与\n        BookInfo.object.filter(Q(id = 2) | Q(btitle = 'hello'))   或\n        BookInfo.object.filter(~Q(id = 2))                        非\nF对象:条件中用于属性比较,还可以进行算数运算\n    from django.db.models import F\n    例子:\n        BookInfo.objects.filter(id__gt = F('bid'))\n        BookInfo.objects.filter(id__gt = F('bid')*3)\n\n\n\n聚合函数:sum,count,avg,max,min,在django中通过aggregates来使用\n    from django.db.models import Sum,Count,Avg,Max,Min\n    例子:\n        BookInfo.objects.all().aggregate(Count('id')) : 返回值是字典\n        BookInfo.objects.all().aggregate(Sum('bread') : 总和\n\n\n插入、更新、删除:\n    save():插入更新\n    delete():删除\n\n关联查询:\n    一对多:对象.多类的名字__set.all()\n    多对一:对象.关系属性\n\n\n模型管理器:\n    也是在models中编写，\n    格式:\n        class xxx (models.Manager):\n            可以定义方法或者定义查询（all）\n\n\n元选项(指定表名):\n    class Meta:\n        db_table = 'xxx'\n    verbose_name = 'xxx'\n    verbose_name_plural = verbose_name\n    每个需要自定义表名的模型下方都要写这个代码，否则用系统给的表明,后两行代码代表指定在后台显示什么名字\n```\n\n\n\n\n## 第二大点:views,视图的使用\n```\n1、项目中的urls中加入应用中的urls中的所有，表示项目启动以后可以使用应用的链接配置\n2、应用中的urls用于配置浏览器页面输入的地址，一般只配置‘/’以后的\n3、编写views文件，写清楚每个url的动作，定义在函数中,需要返回值\n\n4、views文件中所写的代码就是写应该在网页中现实的东西\n5、如果要使用模板，需要在项目文件夹下创建一个templates文件夹，并且配置好路径\n\n6、return HttpResponse(xx),不用模板\n   return HttpResponseRedirect(地址),redirect(地址)，两个功能一样都是重定向，在数据库添加后及时显示时候用\n   return render(request, '模板文件位置',{参数})\n\n重点:关于数据库的操作:导入 models  (类)\n    关于网页内容操作:导入 views   (函数)\n\nseting 中的设置，要改一起改\n    setting 中的DEBUG属性(调试模式):默认是True，改成False后可以显示标准的报错页面\n    setting 中的ALLOWED_HOSTS属性(允许访问):默认注释了的，是一个列表，ALLOWED_HOSTS = ['*']表示所有用户都可访问\n\n给视图传参数: 在urls中配置url的时候，给一个正则的分组就表示给视图传参数:\n            第一种:直接分组:views中的形参可以随便定义 :url(r'^index(\\d+)$',views.show)-->def show(request,a)\n            第二种:分组命名:views长的形参必须和分组的名字一致  :url(r'^index(?p<num>\\d+)$',views.show)-->def show(request,num)\nrequest参数:\n    def index (request)中使用,躲在用于登陆的时候使用\n        request.POST:保存的是网页中用post方式提交的参数，参数保存在请求头中\n        request.GET:保存的是网页中用get方式提交的参数，参数保存在url中\n    使用方法:\n        xx = request.POST.get('xxx')\n        xx = request.GET.get('xxx')\n\n\n 重点:\n    如果是网页模板，那么需要创建一个templates文件夹在项目文件夹下并且setting中配置路径，上面也提到过\n    如果是静态的文件，js，css，image这些文件的话，需要在项目文件夹下创建一个static文件夹，平且在setting中配置STATIC_URL = '/static/' 和 STATICFILES_DIR = [os.path.join(BASE_DIR,'刚刚创建的文件夹static')]\n```\n\n### Cookie（多用于记住用户名）\n```\nCookie的设置:需要一个HttpResponse的对象或者他的子类的对象，set_cookie\n取出cookie:request对象的COOKIES中\n\n设置:\n    xxx  =  HttpResponse() 实例化HttpResponse的对象\n    xxx.set_cookie('key',value,max_age = x) max_age是这只cookie的生存周期的，单位为秒\n    xxx.set_cookie('key2',value2,max_age = x)\n    return xxx\n取出:\n    xxx = request.COOKIES['key']\n    return HttpResponse(xxx)\n\n```\n### session(多用于银行卡,登录状态)\n```\nsession是一个特殊的Cookie,他的安全性更高，只给浏览器一个cookie编号,更重要的是，session可以记住用户的登录状态\n\n读取设置都在request\n设置session:\n    request.session['key'] = value\n    request.session['key2'] = value2\n    request.set_expiry(xx) 设置存活时间，整数，秒\n    return HttpResponse(request)\n\n获取:\n    xxx = request.session['xx']\n    xxx = request.session['xx']\n    xxx = request.session.get('xx')\n    return HttpResponse(xx)\n登录状态:\n    判断有没有这个键:request.session.has_key['']\n\n```\n\n\n## 第三块:模板templates\n```\nhtml里面的模板标签:\n    `{{变量}}`\n    `{% xx %}`  ` {% endxx %}`\n    {# 注释内容 #}\n   ` {% comment %}` 多行注释 `{% endcomment %}`\n\n过滤器:\n    格式: 模板变量 | 过滤器:参数\n    date:改变日期的显示格式\n    length:求字符串和列表的长度\n    default:设置不符合要求时候的默认值\n\n自定义过滤器:\n    在应用下创建一个templatetags包\n    在templatetags中创建过滤器xxx.py\n    在xxx.py中导入 from django.template import Library\n    实例化Library对象，xx = Library()\n    定义一个函数，和python一样的，有返回值的\n    装饰一下，@xx.xxx\n\n    在html中加载，在最前面:`{% load xxx %}`\n    使用过滤器:变量 | xx\n    如果xx函数中有参数，竖线前面的变量就是参数，如果有两个以上的参数那么只用传n-1个参数\n\n模板继承:\n    被继承的html模板不动，在子html模板中删除html代码，只写一句`{% extends '父模板地址' %}` 地址相对于templates\n\n    在父模板中预留位置:子模板就可以重写父模板中预留的位置，从而保证有些不同 在父模板中`{% block 块名 %}` 可以写可以不写 `{% endblock 块名 %}`，子模板中也写`{% block 块名 %} `可以写可以不写 `{% endblock 块名 %}`，两边的两个标签需要一样块名一样，内容可以不一样\n    既要使用父模板中的预留内容，也要自定义预留内容:`{% block 块名 %}` `{{ block.super }}`可以写可以不写 `{% endblock 块名 %}`\n\n    html转义:\n        在views.py 中render(request,'html 路径', {'content':'<h1>hello</h1>'})\n        这样传过去的用的时候{{content}}，html并不会把传过来的<h1>当作标签，而是转义成了字符\n        解决方法:\n            {{ content | safe }}\n\ncsrf伪造攻击:\n    主要原因:\n        1、你在正常登录网站之后，浏览器保存了你的sessionid,而且你并没有退出\n        2、在没有退出的情况下，访问了其他的网站做了一些不好的操作，间接的修改你的密码\n    django默认启用了csrf防护，并且只针对post提交的数据防护，并且对包括自己的所有人防护\n    解决办法:\n        在html文件中有post提交的表单下方第一行输入`{% csrf_token %}`这样自己就可以正常使用了\n\n验证码(防止暴力请求):\n    用闭包的方式验证登录，有些界面只有登陆了才能使用\n    工作的时候网上取down\n\n\nurl 反向解析(给地址取个名字,然后直接用地址就可以动态的生成网页地址，不管网页地址怎么变化):\n    在项目中的urls中的链接应用url地址的地方添加第三个参数:url(r'^', include('应用文件夹.urls'), namespace='应用文件夹名字')  ,namespace='一般用应用名,也可以自定义'\n    然后给应用中urls中的每一个自定义的链接取名:url(r'^xxx$',views.xx, name = '取名')\n\n    在html中使用:\n        1、<a href =` {% url 'namespace:name' %}`  url地址中没有参数  url(r'^xx$', views.xx, name = 'name')\n        2、<a href =` {% url 'namespace:name' 1%}`  url地址中有一个参数   url(r'^xx/(\\d+)$', views.xx, name = 'name')\n        3、<a href = `{% url 'namespace:name' 1 3%} ` url地址中有两个参数   url(r'^xx/(\\d+)/(\\d+)$', views.xx, name = 'name')\n        *4、<a href = `{% url 'namespace:name' a=1 b=3%}`  url地址中有两个被取名的参数   url(r'^xx/(?P<a>\\d+)/(?P<b>\\d+)$', views.xx, name = 'name')\n    在views中使用:\n        from django.core.urlresolvers import reverse\n        1、reverse('namespace:name') url地址中没有参数  url(r'^xx$', views.xx, name = 'name')\n        2、reverse('namespace:name', args = (1)) url地址中有一个参数   url(r'^xx/(\\d+)$', views.xx, name = 'name')\n        3、reverse('namespace:name', args = (1,3) url地址中有两个参数   url(r'^xx/(\\d+)/(\\d+)$', views.xx, name = 'name')\n        *4、reverse('namespace:name', kwargs = {'a':1, 'b':2}) url地址中有两个被取名的参数   url(r'^xx/(?P<a>\\d+)/(?P<b>\\d+)$', views.xx, name = 'name')\n```\n\n### 静态文件(css\\js\\image)\n```\n在项目文件夹中创建static文件夹\n在setting中配置:\n    STATIC_URL = '/定义网址以什么开头/'  一般都是static\n        这里的名字如果想要随便改，然后在html中动态生成的话，在html中加载 `{% load staticfiles %} ` 在要使用的地方用`{% static '文件路径' %}`这样进行拼接\n    STATICFILES_DIR = [拼接文件夹位置]\n静态文件的使用实在html中的链接\n```\n###    中间件\n```\n1、获取浏览器端的ip地址: request.META['REMOTE_ADDR'],可以设置某些ip访问网站\n2、中间件的左右就是在每一个视图函数调用之前都会先执行中间件，可以判断某些用户或者界面不能使用，如判断是否登录，判断ip是否被禁止\n3、定义中间件的方法:\n    在应用中新建一个middleware.py 的python文件\n    中间件的构成:\n        class xxxx(object):   中间件类\n            xxx\n            def process_view(self, request, view_func, *view_args, **view_kwargs)  中间件函数\n                xxx\n                return xxx\n4、定义了中间件以后，我们需要在setting中注册：找到MIDDLEWARE_CLASSES，然后'应用名.middleware.中间类\n5、中间件函数是内置的，只能使用内置的那么几个:\n    process_view(self, request, view_func, *view_args, **view_kwargs) : url匹配之后，视图调用之前\n    process_request(self, request) : 产生request对象之后， url匹配之前调用\n    __init__(self) : 服务器响应第一个请求的时候调用\n    process_response(self, request, response) : 视图调用之后，内容返回浏览器之前,需要return response\n    process_exception(self, request, exception) : 视图函数出现异常的时候调用，如果有多个exception，则按照注册的从后往前执行\n```\n\n## 第四模块Admin后台管理\n```\n1、创建用户:python manage.py createsuperuser\n2、登录用户:网址/admin\n3、注册模型类:在models.py中定义模型（将数据库中的数据加载到后台管理页面），在admin.py中去注册这个模型，admin.site.register(模型名字)\n\n\n上传图片:\n    在static文件夹中新建一个media文件夹，用于保存用户的头像等\n    在setting中设置MEDIA_ROOT = 拼接文件夹,MEDIA_URL = '/media/'\n\n    后台管理界面上传图片:创建一个数据库模型，定义一个字段，类型为ImageField(upload_to = 'media中的某个文件夹')\n\n浏览器上传的照片:\n    表单的提交方式和编码方式必须如下\n    <form method=\"post\" enctype=\"multipart/form-data\" action=\"/upload_down\">\n        `{% csrf_token %}`\n        <input type=\"file\" name=\"pic\"><br/>\n        <input type=\"submit\" value=\"上传\">\n    </form>\n        读取照片页面信息并保存：\n    def upload(request):\n        return render(request, 'upload.html')\n\n\n    def upload_down(request):\n        pic = request.FILES['pic']\n        pic_path = f'{settings.MEDIA_ROOT}/user_admin/{pic.name}'\n        with open(pic_path, 'wb') as pf:\n        for content in pic.chunks():\n            pf.write(content)\n        PicInfo.objects.create(pic_super=f'user_admin{pic.name}')\n        return HttpResponse('ok')\n浏览器上传的图片：\n    pic = request.FILES['xx']的对象：pic.name获取文件名,pic.chunks()分块读取内容进行保存，pic.size获取上传文件的大小都是常用的\n\n\n\n分页（ 在view.py中和html代码中使用）:\n    需要包：from django.core.paginator import Paginator\n    Paginator属性:num_pages:返回分页的总页数,page_range:返回分页的页码列表\n    Paginator方法:page(self,number)：返回低number页的Page实例对象\n    Page的属性:number:返回当前页的页码，object_list：返回包含当前页的数据的查询集，paginator:返回对应的Paginator对象\n    page的方法:has_previous:判断是否有前一页,has_next:判断是否有下一页,previous_page_number:放回前一页,next_page_unmber:返回下一页\n\n```\n\n## 第五模块(url匹配)\n\n```\n可以用path，url\nfrom django.urls import path,include或者from django.conf.urls import url,include\n在project的urls.py中，使用反向解析用到include,在include中添加参数namespace空间命名，可以进行反向解析，在应用中的urls.py中的urlpatterns上面添加一句app_name='xx'这个名字和namespace的名字相同。\n在应用的urls.py中，想使用反向解析，不需要include,可以直接在最后添加参数，name='xx'\n```\n\n\n\n\n## 数据加密\n```\npip install itsdangerous\nfrom itsdangerous import TimedJSONWebSignatureSerializer\n创建一个TimedJSONWebSignatureSerializer对象: xx = TimedJSONWebSignatureSerializer('加密秘钥'，过期时间)\n\n加密：加密结果 = TimedJSONWebSignatureSerializer对象.dumps(数据)\n解密: 解密结果 = TimedJSONWebSignatureSerializer对象.loads(加密结果)\n```\n\n## 异步发邮件\n```\npip install celery\n项目中新建一个任务包，在这个包中使用celery（from celery import Celery）\n创建Celery的实例对象：xx = Celery('名字'，broker='redis://127.0.0.1:6379/1'),broker代表中间人\n定义需要异步处理的函数，用@xx.task装饰\n在需要用到异步处理的应用中使用：\n    导入过来的函数.delay(参数)\n再将整个项目复制一份，进入复制的项目中的celery的包中：\n    import os\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dalifresh.settings')\n    django.setup()\n然后再终端输入命令:celery -A 取好的名字 worker -l info来运行这个异步处理\n```","source":"_posts/Django基础.md","raw":"---\ntitle: Django基础\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 15:42:38\npassword:\nsummary: django学习笔记\ntags: django\ncategories: Python\n---\n## Django\n### 创建项目\ndjango-admin startproject 项目名\n\n### 创建应用\npython manage.py startapp 应用名\n### 运行web服务器\npython manage.py runserver\n\n\n\n\n```python\npython3 -m http.server [port] # 可以启动一个web服务，供局域网内用户下载文件\n```\n\n### 将固定的路径加入python可以搜索的目录\nimport sys\n\nsys.path.insert(位置（从0开始），要加入搜索的目录)\n```python\npython manage.py shell # 进入django终端\n```\n### ORM框架\n-    1、对象和数据库映射\n-    2、根据设计的模型生成数据库中的表:\n    -  1、生长牵引文件:python manage.py makemigrations\n    - 2、执行牵引文件:python manage.py migrate\n\n### 模型类\n> 在models.py中编写模型类\n\n  -  1、生长迁移文件:python manage.py makemigrations\n    -    注意如果有ForeignKey的话一定要加上on_delete = models.CASCADE\n  - 2、执行迁移文件:python manage.py migrate\n    \n> python manage.py shell\n```text\n首先:导入定义好的模型类\n其次:实例化一个对象\n插入 :对象.属性名=值\n保存:对像.save()\n拿到数据:变量 = 类名.objects.get(条件)\n    变量.属性：直接查看\n    变量.属性=值  ——> 变量.save()  :修改\n    变量.delete():删除\n```\n\n### 后台管理（在admin.py中编写后台管理类）\n```\n本地化: LANGUAGE_CODE = 'zh-hans' :使用中文\n       TIME_ZONE = 'Asia/Shanghai' :使用中国时间\n\n创建管理员:python manage.py createsuperuser   (第一次新建管理员的时候必须要执行一下牵引文件，可以不生成，但必须执行)\n\n自己创建的管理员是默认是放在数据库中的一个单独的表中的，但是可以使用（在settings.py中）：\n# django认证系统使用的模型类\nAUTH_USER_MODEL='应用.类名'\n\n这个来规定生成数据放在什么表，在实际开发中是特别的重要的，一般和用户信息放在一起\n\n使用这个必须导入(models.py中)from django.contrib.auth.models import AbstractUser\n\n加入自己定义的数据库或者数据库模型: 1、导入 2、admin.site.register(类)\n\n规定自定义的数据库或者数据库模型的显示: list_display('','')\n```\n\n### 使用视图（在views中编写）\n```\n使用模块: from django.http import HttpResponse,HttpResponseRedirect(重定向)\n使用模块: from django.shortcuts import render,redirect(也是重定向)\n使用 return HttpResponse('返回值') 返回结果\n使用模块: from django.conf.urls import include, url\nurl的使用方法:url(r'正则表达式',处理字符串)\n            url(r'正则表达式',include(处理源))\n\n实现过程: views.py 中创建视图（使用模块第一个） --->  创建 urls.py (使用第二个模块,并且导入views.py)  --->  项目中的urls.py\n中添加创建的urls.py(使用url添加)\n```\n\n\n### 模板（项目文件夹中创建 模板文件夹templates）\n```\n在项目文件夹中的setting中设置TEMPLATES中的DIRS，表示模板位置，一般拼接\n使用模板:\n    导入模块:from django.template import loader\n    1、使用模板文件: temp = loader.get_template('文件名可以带路径')\n    2、定义上下文（个模板传参数）: context = {字典参数}\n    3、渲染模板:产生HTML代码:res_html = temp.render(context)\n    4、返回浏览器:return HttpResponse(res_html)\n\n最简单的使用方法: return render(request,'文件可以带路径',{传参数})\n\n参数在html代码中的使用方法:\n    普通变量:{{key}}\n    for循环:{% fro x in xx %}\n            {%endfor%}\n\n```\n\n## 关于django和数据库的操作\n```\n1、创models文件 class xxx(models.Model)\n2、迁移文件\n3、创建views文件 def xxx(request)，必须有返回值,一般返回值用HttpResponse,使用模板的返回值用render,需要重定向的话使用redirect\n4、新建应用urls.py文件,用于定义访问时用的url地址\n5、取项目中的urls文件中添加应用的url文件 ：url(r'^',include(xxx.urls))\n6、在项目中创建templates模板文件,在到seting中配置一下，templates中的文件就是html文档\n```\n\n\n### 第一大点:models,模型,注册模型类\ndjango操作数据库的相关知识\n```\n应用下的models.py文件中定义的所有模型，都要继承一个抽象基类:\n创建抽象基类:在项目中创建一个pythonPakage,名字叫db,在这个包下面创建一个base_model.py文件，在文件中编写一个抽像基类\n```\n```python\nfrom django.db import models\nclass BaseModel(models.Model):\n        '''模型抽象基类'''\n        create_time = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')\n    update_time = models.DateTimeField(auto_now=True, verbose_name='更新时间')\n        is_delete = models.BooleanField(default=False, verbose_name='删除标记')\n    class Meta:\n        '''说明是一个抽象模型类'''\n        abstract = True\n```\n\n #####   约束选项在字段类型中使用，字段类型在models模块下使用\n字段类型:\n```\n1、AutoField:自动编号\n2、BooleanField:布尔类型\n3、NullBooleanField:Null，True，False三种值\n4、CharField（max_length=）:字符串,必须指定max_length\n5、TextField:大文本类型\n6、IntegerField:整数\n7、DecimalField(max_digits=,decimal_places=):浮点数，第一个参数表示总位数，第二个参数表示小数位数\n8、FloatField(max_digits=,decimal_places=):浮点数，参数同上\n9、DateField（[auto_now=,auto_now_add=]）:日期类型，有两个可选参数，用的时候只能用一个，第一个表示更新时间，第二个表示第一次创建的的时间\n10、TimeField（[auto_now=,auto_now_add=]）:时分秒\n11、DateTimeField（[auto_now=,auto_now_add=]）:年月日时分秒\n12、FileField:文件上传\n13、ImageField:有效图片\n\n14、ForeignKey:一对多\n15、ManyToManyField:多对多\n16、OneToOneField:一对一\n\n约束选项:\n1、default:默认值\n2、primary_key:主键\n3、unique:不重复\n4、db_index:索引，db_index=True/False\n5、db_column:指定表字段的名字，db_column='名字'\n6、null:空\n7、blank:是否为空，在后台使用，默认True，在django管理页面有用\n8、chioces：chioces选项,等于一个元组，格式 choices = ((xx,xxx),(xx,xxx)……),网页显示为一个列表框\n9、verbose_name：制定在后台的显示名称 ，字段和表名都可以用\n```\n#### 富文本\n```\ndjango使用tinymce：\n    pip install django-tinymce\n    from tinymce.models import HTMLField\n    xx = HTMLField(verbose_name = 'xx')\n    在settings.py中注册这个富文本编辑器，INSTALLED_APPS中添加tinymce\n    在settings.py中设置富文本编辑器的属性：\n        TINYMCE_DEFAULT_CONFIG = {\n            'theme': 'advanced',\n            'width': 编辑器的宽,\n            'height': 编辑器的高,\n        }\n    在项目urls中添加: url(r'^tinymce/', include('tinymce.urls'))\n\n```\n####\t查询\n```\n说明一下:exclude,filter,get三个都时带条件的--->模型名.objects.查询方式(属性名__条件名=值)\n条件名:\nexact:判等 ，可以不用直接用 =\ncontains:模糊查询，包含\nendswith\\startswith:模糊查询，结尾\\开头\nisnull:空查询,布尔值\nin:范围查询，属性名__in = 列表或者元组\ngt,lt,gte,lte:大于，小于，大于等于，小于等于\nday/month/year:使用方法:日期查询\n\nget():返回满足条件的一条记录\nall():返回所有记录，查询集\nfilter():返回满足条件的所有记录，查询集\nexclude():返回不满足条件的所有记录，查询集\norder_by(‘属性名1’,’属性名2'……):升序\norder_by(‘-属性名1’,’-属性名2'……):降序，order_by()是将查出来的数据进行排序，如：BookInfo.objects.all().order_by('id','-btitle')\n\n\nQ对象:用于查询时候的多个条件的  ’与或非‘  表示\n    from django.db.models import Q\n    例子:\n        BookInfo.object.filter(Q(id = 2) & Q(btitle = 'hello'))   与\n        BookInfo.object.filter(Q(id = 2) | Q(btitle = 'hello'))   或\n        BookInfo.object.filter(~Q(id = 2))                        非\nF对象:条件中用于属性比较,还可以进行算数运算\n    from django.db.models import F\n    例子:\n        BookInfo.objects.filter(id__gt = F('bid'))\n        BookInfo.objects.filter(id__gt = F('bid')*3)\n\n\n\n聚合函数:sum,count,avg,max,min,在django中通过aggregates来使用\n    from django.db.models import Sum,Count,Avg,Max,Min\n    例子:\n        BookInfo.objects.all().aggregate(Count('id')) : 返回值是字典\n        BookInfo.objects.all().aggregate(Sum('bread') : 总和\n\n\n插入、更新、删除:\n    save():插入更新\n    delete():删除\n\n关联查询:\n    一对多:对象.多类的名字__set.all()\n    多对一:对象.关系属性\n\n\n模型管理器:\n    也是在models中编写，\n    格式:\n        class xxx (models.Manager):\n            可以定义方法或者定义查询（all）\n\n\n元选项(指定表名):\n    class Meta:\n        db_table = 'xxx'\n    verbose_name = 'xxx'\n    verbose_name_plural = verbose_name\n    每个需要自定义表名的模型下方都要写这个代码，否则用系统给的表明,后两行代码代表指定在后台显示什么名字\n```\n\n\n\n\n## 第二大点:views,视图的使用\n```\n1、项目中的urls中加入应用中的urls中的所有，表示项目启动以后可以使用应用的链接配置\n2、应用中的urls用于配置浏览器页面输入的地址，一般只配置‘/’以后的\n3、编写views文件，写清楚每个url的动作，定义在函数中,需要返回值\n\n4、views文件中所写的代码就是写应该在网页中现实的东西\n5、如果要使用模板，需要在项目文件夹下创建一个templates文件夹，并且配置好路径\n\n6、return HttpResponse(xx),不用模板\n   return HttpResponseRedirect(地址),redirect(地址)，两个功能一样都是重定向，在数据库添加后及时显示时候用\n   return render(request, '模板文件位置',{参数})\n\n重点:关于数据库的操作:导入 models  (类)\n    关于网页内容操作:导入 views   (函数)\n\nseting 中的设置，要改一起改\n    setting 中的DEBUG属性(调试模式):默认是True，改成False后可以显示标准的报错页面\n    setting 中的ALLOWED_HOSTS属性(允许访问):默认注释了的，是一个列表，ALLOWED_HOSTS = ['*']表示所有用户都可访问\n\n给视图传参数: 在urls中配置url的时候，给一个正则的分组就表示给视图传参数:\n            第一种:直接分组:views中的形参可以随便定义 :url(r'^index(\\d+)$',views.show)-->def show(request,a)\n            第二种:分组命名:views长的形参必须和分组的名字一致  :url(r'^index(?p<num>\\d+)$',views.show)-->def show(request,num)\nrequest参数:\n    def index (request)中使用,躲在用于登陆的时候使用\n        request.POST:保存的是网页中用post方式提交的参数，参数保存在请求头中\n        request.GET:保存的是网页中用get方式提交的参数，参数保存在url中\n    使用方法:\n        xx = request.POST.get('xxx')\n        xx = request.GET.get('xxx')\n\n\n 重点:\n    如果是网页模板，那么需要创建一个templates文件夹在项目文件夹下并且setting中配置路径，上面也提到过\n    如果是静态的文件，js，css，image这些文件的话，需要在项目文件夹下创建一个static文件夹，平且在setting中配置STATIC_URL = '/static/' 和 STATICFILES_DIR = [os.path.join(BASE_DIR,'刚刚创建的文件夹static')]\n```\n\n### Cookie（多用于记住用户名）\n```\nCookie的设置:需要一个HttpResponse的对象或者他的子类的对象，set_cookie\n取出cookie:request对象的COOKIES中\n\n设置:\n    xxx  =  HttpResponse() 实例化HttpResponse的对象\n    xxx.set_cookie('key',value,max_age = x) max_age是这只cookie的生存周期的，单位为秒\n    xxx.set_cookie('key2',value2,max_age = x)\n    return xxx\n取出:\n    xxx = request.COOKIES['key']\n    return HttpResponse(xxx)\n\n```\n### session(多用于银行卡,登录状态)\n```\nsession是一个特殊的Cookie,他的安全性更高，只给浏览器一个cookie编号,更重要的是，session可以记住用户的登录状态\n\n读取设置都在request\n设置session:\n    request.session['key'] = value\n    request.session['key2'] = value2\n    request.set_expiry(xx) 设置存活时间，整数，秒\n    return HttpResponse(request)\n\n获取:\n    xxx = request.session['xx']\n    xxx = request.session['xx']\n    xxx = request.session.get('xx')\n    return HttpResponse(xx)\n登录状态:\n    判断有没有这个键:request.session.has_key['']\n\n```\n\n\n## 第三块:模板templates\n```\nhtml里面的模板标签:\n    `{{变量}}`\n    `{% xx %}`  ` {% endxx %}`\n    {# 注释内容 #}\n   ` {% comment %}` 多行注释 `{% endcomment %}`\n\n过滤器:\n    格式: 模板变量 | 过滤器:参数\n    date:改变日期的显示格式\n    length:求字符串和列表的长度\n    default:设置不符合要求时候的默认值\n\n自定义过滤器:\n    在应用下创建一个templatetags包\n    在templatetags中创建过滤器xxx.py\n    在xxx.py中导入 from django.template import Library\n    实例化Library对象，xx = Library()\n    定义一个函数，和python一样的，有返回值的\n    装饰一下，@xx.xxx\n\n    在html中加载，在最前面:`{% load xxx %}`\n    使用过滤器:变量 | xx\n    如果xx函数中有参数，竖线前面的变量就是参数，如果有两个以上的参数那么只用传n-1个参数\n\n模板继承:\n    被继承的html模板不动，在子html模板中删除html代码，只写一句`{% extends '父模板地址' %}` 地址相对于templates\n\n    在父模板中预留位置:子模板就可以重写父模板中预留的位置，从而保证有些不同 在父模板中`{% block 块名 %}` 可以写可以不写 `{% endblock 块名 %}`，子模板中也写`{% block 块名 %} `可以写可以不写 `{% endblock 块名 %}`，两边的两个标签需要一样块名一样，内容可以不一样\n    既要使用父模板中的预留内容，也要自定义预留内容:`{% block 块名 %}` `{{ block.super }}`可以写可以不写 `{% endblock 块名 %}`\n\n    html转义:\n        在views.py 中render(request,'html 路径', {'content':'<h1>hello</h1>'})\n        这样传过去的用的时候{{content}}，html并不会把传过来的<h1>当作标签，而是转义成了字符\n        解决方法:\n            {{ content | safe }}\n\ncsrf伪造攻击:\n    主要原因:\n        1、你在正常登录网站之后，浏览器保存了你的sessionid,而且你并没有退出\n        2、在没有退出的情况下，访问了其他的网站做了一些不好的操作，间接的修改你的密码\n    django默认启用了csrf防护，并且只针对post提交的数据防护，并且对包括自己的所有人防护\n    解决办法:\n        在html文件中有post提交的表单下方第一行输入`{% csrf_token %}`这样自己就可以正常使用了\n\n验证码(防止暴力请求):\n    用闭包的方式验证登录，有些界面只有登陆了才能使用\n    工作的时候网上取down\n\n\nurl 反向解析(给地址取个名字,然后直接用地址就可以动态的生成网页地址，不管网页地址怎么变化):\n    在项目中的urls中的链接应用url地址的地方添加第三个参数:url(r'^', include('应用文件夹.urls'), namespace='应用文件夹名字')  ,namespace='一般用应用名,也可以自定义'\n    然后给应用中urls中的每一个自定义的链接取名:url(r'^xxx$',views.xx, name = '取名')\n\n    在html中使用:\n        1、<a href =` {% url 'namespace:name' %}`  url地址中没有参数  url(r'^xx$', views.xx, name = 'name')\n        2、<a href =` {% url 'namespace:name' 1%}`  url地址中有一个参数   url(r'^xx/(\\d+)$', views.xx, name = 'name')\n        3、<a href = `{% url 'namespace:name' 1 3%} ` url地址中有两个参数   url(r'^xx/(\\d+)/(\\d+)$', views.xx, name = 'name')\n        *4、<a href = `{% url 'namespace:name' a=1 b=3%}`  url地址中有两个被取名的参数   url(r'^xx/(?P<a>\\d+)/(?P<b>\\d+)$', views.xx, name = 'name')\n    在views中使用:\n        from django.core.urlresolvers import reverse\n        1、reverse('namespace:name') url地址中没有参数  url(r'^xx$', views.xx, name = 'name')\n        2、reverse('namespace:name', args = (1)) url地址中有一个参数   url(r'^xx/(\\d+)$', views.xx, name = 'name')\n        3、reverse('namespace:name', args = (1,3) url地址中有两个参数   url(r'^xx/(\\d+)/(\\d+)$', views.xx, name = 'name')\n        *4、reverse('namespace:name', kwargs = {'a':1, 'b':2}) url地址中有两个被取名的参数   url(r'^xx/(?P<a>\\d+)/(?P<b>\\d+)$', views.xx, name = 'name')\n```\n\n### 静态文件(css\\js\\image)\n```\n在项目文件夹中创建static文件夹\n在setting中配置:\n    STATIC_URL = '/定义网址以什么开头/'  一般都是static\n        这里的名字如果想要随便改，然后在html中动态生成的话，在html中加载 `{% load staticfiles %} ` 在要使用的地方用`{% static '文件路径' %}`这样进行拼接\n    STATICFILES_DIR = [拼接文件夹位置]\n静态文件的使用实在html中的链接\n```\n###    中间件\n```\n1、获取浏览器端的ip地址: request.META['REMOTE_ADDR'],可以设置某些ip访问网站\n2、中间件的左右就是在每一个视图函数调用之前都会先执行中间件，可以判断某些用户或者界面不能使用，如判断是否登录，判断ip是否被禁止\n3、定义中间件的方法:\n    在应用中新建一个middleware.py 的python文件\n    中间件的构成:\n        class xxxx(object):   中间件类\n            xxx\n            def process_view(self, request, view_func, *view_args, **view_kwargs)  中间件函数\n                xxx\n                return xxx\n4、定义了中间件以后，我们需要在setting中注册：找到MIDDLEWARE_CLASSES，然后'应用名.middleware.中间类\n5、中间件函数是内置的，只能使用内置的那么几个:\n    process_view(self, request, view_func, *view_args, **view_kwargs) : url匹配之后，视图调用之前\n    process_request(self, request) : 产生request对象之后， url匹配之前调用\n    __init__(self) : 服务器响应第一个请求的时候调用\n    process_response(self, request, response) : 视图调用之后，内容返回浏览器之前,需要return response\n    process_exception(self, request, exception) : 视图函数出现异常的时候调用，如果有多个exception，则按照注册的从后往前执行\n```\n\n## 第四模块Admin后台管理\n```\n1、创建用户:python manage.py createsuperuser\n2、登录用户:网址/admin\n3、注册模型类:在models.py中定义模型（将数据库中的数据加载到后台管理页面），在admin.py中去注册这个模型，admin.site.register(模型名字)\n\n\n上传图片:\n    在static文件夹中新建一个media文件夹，用于保存用户的头像等\n    在setting中设置MEDIA_ROOT = 拼接文件夹,MEDIA_URL = '/media/'\n\n    后台管理界面上传图片:创建一个数据库模型，定义一个字段，类型为ImageField(upload_to = 'media中的某个文件夹')\n\n浏览器上传的照片:\n    表单的提交方式和编码方式必须如下\n    <form method=\"post\" enctype=\"multipart/form-data\" action=\"/upload_down\">\n        `{% csrf_token %}`\n        <input type=\"file\" name=\"pic\"><br/>\n        <input type=\"submit\" value=\"上传\">\n    </form>\n        读取照片页面信息并保存：\n    def upload(request):\n        return render(request, 'upload.html')\n\n\n    def upload_down(request):\n        pic = request.FILES['pic']\n        pic_path = f'{settings.MEDIA_ROOT}/user_admin/{pic.name}'\n        with open(pic_path, 'wb') as pf:\n        for content in pic.chunks():\n            pf.write(content)\n        PicInfo.objects.create(pic_super=f'user_admin{pic.name}')\n        return HttpResponse('ok')\n浏览器上传的图片：\n    pic = request.FILES['xx']的对象：pic.name获取文件名,pic.chunks()分块读取内容进行保存，pic.size获取上传文件的大小都是常用的\n\n\n\n分页（ 在view.py中和html代码中使用）:\n    需要包：from django.core.paginator import Paginator\n    Paginator属性:num_pages:返回分页的总页数,page_range:返回分页的页码列表\n    Paginator方法:page(self,number)：返回低number页的Page实例对象\n    Page的属性:number:返回当前页的页码，object_list：返回包含当前页的数据的查询集，paginator:返回对应的Paginator对象\n    page的方法:has_previous:判断是否有前一页,has_next:判断是否有下一页,previous_page_number:放回前一页,next_page_unmber:返回下一页\n\n```\n\n## 第五模块(url匹配)\n\n```\n可以用path，url\nfrom django.urls import path,include或者from django.conf.urls import url,include\n在project的urls.py中，使用反向解析用到include,在include中添加参数namespace空间命名，可以进行反向解析，在应用中的urls.py中的urlpatterns上面添加一句app_name='xx'这个名字和namespace的名字相同。\n在应用的urls.py中，想使用反向解析，不需要include,可以直接在最后添加参数，name='xx'\n```\n\n\n\n\n## 数据加密\n```\npip install itsdangerous\nfrom itsdangerous import TimedJSONWebSignatureSerializer\n创建一个TimedJSONWebSignatureSerializer对象: xx = TimedJSONWebSignatureSerializer('加密秘钥'，过期时间)\n\n加密：加密结果 = TimedJSONWebSignatureSerializer对象.dumps(数据)\n解密: 解密结果 = TimedJSONWebSignatureSerializer对象.loads(加密结果)\n```\n\n## 异步发邮件\n```\npip install celery\n项目中新建一个任务包，在这个包中使用celery（from celery import Celery）\n创建Celery的实例对象：xx = Celery('名字'，broker='redis://127.0.0.1:6379/1'),broker代表中间人\n定义需要异步处理的函数，用@xx.task装饰\n在需要用到异步处理的应用中使用：\n    导入过来的函数.delay(参数)\n再将整个项目复制一份，进入复制的项目中的celery的包中：\n    import os\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dalifresh.settings')\n    django.setup()\n然后再终端输入命令:celery -A 取好的名字 worker -l info来运行这个异步处理\n```","slug":"Django基础","published":1,"updated":"2023-01-19T10:48:37.576Z","_id":"cld2uqf5u00001svk6huy2u4c","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Django\"><a href=\"#Django\" class=\"headerlink\" title=\"Django\"></a>Django</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>django-admin startproject 项目名</p>\n<h3 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h3><p>python manage.py startapp 应用名</p>\n<h3 id=\"运行web服务器\"><a href=\"#运行web服务器\" class=\"headerlink\" title=\"运行web服务器\"></a>运行web服务器</h3><p>python manage.py runserver</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">python3 <span class=\"token operator\">-</span>m http<span class=\"token punctuation\">.</span>server <span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 可以启动一个web服务，供局域网内用户下载文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"将固定的路径加入python可以搜索的目录\"><a href=\"#将固定的路径加入python可以搜索的目录\" class=\"headerlink\" title=\"将固定的路径加入python可以搜索的目录\"></a>将固定的路径加入python可以搜索的目录</h3><p>import sys</p>\n<p>sys.path.insert(位置（从0开始），要加入搜索的目录)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">python manage<span class=\"token punctuation\">.</span>py shell <span class=\"token comment\"># 进入django终端</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"ORM框架\"><a href=\"#ORM框架\" class=\"headerlink\" title=\"ORM框架\"></a>ORM框架</h3><ul>\n<li>   1、对象和数据库映射</li>\n<li>   2、根据设计的模型生成数据库中的表:    -  1、生长牵引文件:python manage.py makemigrations    - 2、执行牵引文件:python manage.py migrate</li>\n</ul>\n<h3 id=\"模型类\"><a href=\"#模型类\" class=\"headerlink\" title=\"模型类\"></a>模型类</h3><blockquote>\n<p>在models.py中编写模型类</p>\n</blockquote>\n<ul>\n<li> 1、生长迁移文件:python manage.py makemigrations    -    注意如果有ForeignKey的话一定要加上on_delete = models.CASCADE</li>\n<li>2、执行迁移文件:python manage.py migrate</li>\n</ul>\n<blockquote>\n<p>python manage.py shell</p>\n</blockquote>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">首先:导入定义好的模型类\n其次:实例化一个对象\n插入 :对象.属性名=值\n保存:对像.save()\n拿到数据:变量 = 类名.objects.get(条件)\n    变量.属性：直接查看\n    变量.属性=值  ——> 变量.save()  :修改\n    变量.delete():删除<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"后台管理（在admin-py中编写后台管理类）\"><a href=\"#后台管理（在admin-py中编写后台管理类）\" class=\"headerlink\" title=\"后台管理（在admin.py中编写后台管理类）\"></a>后台管理（在admin.py中编写后台管理类）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">本地化: LANGUAGE_CODE &#x3D; &#39;zh-hans&#39; :使用中文\n       TIME_ZONE &#x3D; &#39;Asia&#x2F;Shanghai&#39; :使用中国时间\n\n创建管理员:python manage.py createsuperuser   (第一次新建管理员的时候必须要执行一下牵引文件，可以不生成，但必须执行)\n\n自己创建的管理员是默认是放在数据库中的一个单独的表中的，但是可以使用（在settings.py中）：\n# django认证系统使用的模型类\nAUTH_USER_MODEL&#x3D;&#39;应用.类名&#39;\n\n这个来规定生成数据放在什么表，在实际开发中是特别的重要的，一般和用户信息放在一起\n\n使用这个必须导入(models.py中)from django.contrib.auth.models import AbstractUser\n\n加入自己定义的数据库或者数据库模型: 1、导入 2、admin.site.register(类)\n\n规定自定义的数据库或者数据库模型的显示: list_display(&#39;&#39;,&#39;&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"使用视图（在views中编写）\"><a href=\"#使用视图（在views中编写）\" class=\"headerlink\" title=\"使用视图（在views中编写）\"></a>使用视图（在views中编写）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">使用模块: from django.http import HttpResponse,HttpResponseRedirect(重定向)\n使用模块: from django.shortcuts import render,redirect(也是重定向)\n使用 return HttpResponse(&#39;返回值&#39;) 返回结果\n使用模块: from django.conf.urls import include, url\nurl的使用方法:url(r&#39;正则表达式&#39;,处理字符串)\n            url(r&#39;正则表达式&#39;,include(处理源))\n\n实现过程: views.py 中创建视图（使用模块第一个） ---&gt;  创建 urls.py (使用第二个模块,并且导入views.py)  ---&gt;  项目中的urls.py\n中添加创建的urls.py(使用url添加)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"模板（项目文件夹中创建-模板文件夹templates）\"><a href=\"#模板（项目文件夹中创建-模板文件夹templates）\" class=\"headerlink\" title=\"模板（项目文件夹中创建 模板文件夹templates）\"></a>模板（项目文件夹中创建 模板文件夹templates）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">在项目文件夹中的setting中设置TEMPLATES中的DIRS，表示模板位置，一般拼接\n使用模板:\n    导入模块:from django.template import loader\n    1、使用模板文件: temp &#x3D; loader.get_template(&#39;文件名可以带路径&#39;)\n    2、定义上下文（个模板传参数）: context &#x3D; &#123;字典参数&#125;\n    3、渲染模板:产生HTML代码:res_html &#x3D; temp.render(context)\n    4、返回浏览器:return HttpResponse(res_html)\n\n最简单的使用方法: return render(request,&#39;文件可以带路径&#39;,&#123;传参数&#125;)\n\n参数在html代码中的使用方法:\n    普通变量:&#123;&#123;key&#125;&#125;\n    for循环:&#123;% fro x in xx %&#125;\n            &#123;%endfor%&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"关于django和数据库的操作\"><a href=\"#关于django和数据库的操作\" class=\"headerlink\" title=\"关于django和数据库的操作\"></a>关于django和数据库的操作</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、创models文件 class xxx(models.Model)\n2、迁移文件\n3、创建views文件 def xxx(request)，必须有返回值,一般返回值用HttpResponse,使用模板的返回值用render,需要重定向的话使用redirect\n4、新建应用urls.py文件,用于定义访问时用的url地址\n5、取项目中的urls文件中添加应用的url文件 ：url(r&#39;^&#39;,include(xxx.urls))\n6、在项目中创建templates模板文件,在到seting中配置一下，templates中的文件就是html文档<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"第一大点-models-模型-注册模型类\"><a href=\"#第一大点-models-模型-注册模型类\" class=\"headerlink\" title=\"第一大点:models,模型,注册模型类\"></a>第一大点:models,模型,注册模型类</h3><p>django操作数据库的相关知识</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">应用下的models.py文件中定义的所有模型，都要继承一个抽象基类:\n创建抽象基类:在项目中创建一个pythonPakage,名字叫db,在这个包下面创建一个base_model.py文件，在文件中编写一个抽像基类<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseModel</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''模型抽象基类'''</span>\n        create_time <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">)</span>\n    update_time <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">)</span>\n        is_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'删除标记'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''说明是一个抽象模型类'''</span>\n        abstract <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"约束选项在字段类型中使用，字段类型在models模块下使用\"><a href=\"#约束选项在字段类型中使用，字段类型在models模块下使用\" class=\"headerlink\" title=\"约束选项在字段类型中使用，字段类型在models模块下使用\"></a>约束选项在字段类型中使用，字段类型在models模块下使用</h5><p>字段类型:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、AutoField:自动编号\n2、BooleanField:布尔类型\n3、NullBooleanField:Null，True，False三种值\n4、CharField（max_length&#x3D;）:字符串,必须指定max_length\n5、TextField:大文本类型\n6、IntegerField:整数\n7、DecimalField(max_digits&#x3D;,decimal_places&#x3D;):浮点数，第一个参数表示总位数，第二个参数表示小数位数\n8、FloatField(max_digits&#x3D;,decimal_places&#x3D;):浮点数，参数同上\n9、DateField（[auto_now&#x3D;,auto_now_add&#x3D;]）:日期类型，有两个可选参数，用的时候只能用一个，第一个表示更新时间，第二个表示第一次创建的的时间\n10、TimeField（[auto_now&#x3D;,auto_now_add&#x3D;]）:时分秒\n11、DateTimeField（[auto_now&#x3D;,auto_now_add&#x3D;]）:年月日时分秒\n12、FileField:文件上传\n13、ImageField:有效图片\n\n14、ForeignKey:一对多\n15、ManyToManyField:多对多\n16、OneToOneField:一对一\n\n约束选项:\n1、default:默认值\n2、primary_key:主键\n3、unique:不重复\n4、db_index:索引，db_index&#x3D;True&#x2F;False\n5、db_column:指定表字段的名字，db_column&#x3D;&#39;名字&#39;\n6、null:空\n7、blank:是否为空，在后台使用，默认True，在django管理页面有用\n8、chioces：chioces选项,等于一个元组，格式 choices &#x3D; ((xx,xxx),(xx,xxx)……),网页显示为一个列表框\n9、verbose_name：制定在后台的显示名称 ，字段和表名都可以用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"富文本\"><a href=\"#富文本\" class=\"headerlink\" title=\"富文本\"></a>富文本</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">django使用tinymce：\n    pip install django-tinymce\n    from tinymce.models import HTMLField\n    xx &#x3D; HTMLField(verbose_name &#x3D; &#39;xx&#39;)\n    在settings.py中注册这个富文本编辑器，INSTALLED_APPS中添加tinymce\n    在settings.py中设置富文本编辑器的属性：\n        TINYMCE_DEFAULT_CONFIG &#x3D; &#123;\n            &#39;theme&#39;: &#39;advanced&#39;,\n            &#39;width&#39;: 编辑器的宽,\n            &#39;height&#39;: 编辑器的高,\n        &#125;\n    在项目urls中添加: url(r&#39;^tinymce&#x2F;&#39;, include(&#39;tinymce.urls&#39;))\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">说明一下:exclude,filter,get三个都时带条件的---&gt;模型名.objects.查询方式(属性名__条件名&#x3D;值)\n条件名:\nexact:判等 ，可以不用直接用 &#x3D;\ncontains:模糊查询，包含\nendswith\\startswith:模糊查询，结尾\\开头\nisnull:空查询,布尔值\nin:范围查询，属性名__in &#x3D; 列表或者元组\ngt,lt,gte,lte:大于，小于，大于等于，小于等于\nday&#x2F;month&#x2F;year:使用方法:日期查询\n\nget():返回满足条件的一条记录\nall():返回所有记录，查询集\nfilter():返回满足条件的所有记录，查询集\nexclude():返回不满足条件的所有记录，查询集\norder_by(‘属性名1’,’属性名2&#39;……):升序\norder_by(‘-属性名1’,’-属性名2&#39;……):降序，order_by()是将查出来的数据进行排序，如：BookInfo.objects.all().order_by(&#39;id&#39;,&#39;-btitle&#39;)\n\n\nQ对象:用于查询时候的多个条件的  ’与或非‘  表示\n    from django.db.models import Q\n    例子:\n        BookInfo.object.filter(Q(id &#x3D; 2) &amp; Q(btitle &#x3D; &#39;hello&#39;))   与\n        BookInfo.object.filter(Q(id &#x3D; 2) | Q(btitle &#x3D; &#39;hello&#39;))   或\n        BookInfo.object.filter(~Q(id &#x3D; 2))                        非\nF对象:条件中用于属性比较,还可以进行算数运算\n    from django.db.models import F\n    例子:\n        BookInfo.objects.filter(id__gt &#x3D; F(&#39;bid&#39;))\n        BookInfo.objects.filter(id__gt &#x3D; F(&#39;bid&#39;)*3)\n\n\n\n聚合函数:sum,count,avg,max,min,在django中通过aggregates来使用\n    from django.db.models import Sum,Count,Avg,Max,Min\n    例子:\n        BookInfo.objects.all().aggregate(Count(&#39;id&#39;)) : 返回值是字典\n        BookInfo.objects.all().aggregate(Sum(&#39;bread&#39;) : 总和\n\n\n插入、更新、删除:\n    save():插入更新\n    delete():删除\n\n关联查询:\n    一对多:对象.多类的名字__set.all()\n    多对一:对象.关系属性\n\n\n模型管理器:\n    也是在models中编写，\n    格式:\n        class xxx (models.Manager):\n            可以定义方法或者定义查询（all）\n\n\n元选项(指定表名):\n    class Meta:\n        db_table &#x3D; &#39;xxx&#39;\n    verbose_name &#x3D; &#39;xxx&#39;\n    verbose_name_plural &#x3D; verbose_name\n    每个需要自定义表名的模型下方都要写这个代码，否则用系统给的表明,后两行代码代表指定在后台显示什么名字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"第二大点-views-视图的使用\"><a href=\"#第二大点-views-视图的使用\" class=\"headerlink\" title=\"第二大点:views,视图的使用\"></a>第二大点:views,视图的使用</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、项目中的urls中加入应用中的urls中的所有，表示项目启动以后可以使用应用的链接配置\n2、应用中的urls用于配置浏览器页面输入的地址，一般只配置‘&#x2F;’以后的\n3、编写views文件，写清楚每个url的动作，定义在函数中,需要返回值\n\n4、views文件中所写的代码就是写应该在网页中现实的东西\n5、如果要使用模板，需要在项目文件夹下创建一个templates文件夹，并且配置好路径\n\n6、return HttpResponse(xx),不用模板\n   return HttpResponseRedirect(地址),redirect(地址)，两个功能一样都是重定向，在数据库添加后及时显示时候用\n   return render(request, &#39;模板文件位置&#39;,&#123;参数&#125;)\n\n重点:关于数据库的操作:导入 models  (类)\n    关于网页内容操作:导入 views   (函数)\n\nseting 中的设置，要改一起改\n    setting 中的DEBUG属性(调试模式):默认是True，改成False后可以显示标准的报错页面\n    setting 中的ALLOWED_HOSTS属性(允许访问):默认注释了的，是一个列表，ALLOWED_HOSTS &#x3D; [&#39;*&#39;]表示所有用户都可访问\n\n给视图传参数: 在urls中配置url的时候，给一个正则的分组就表示给视图传参数:\n            第一种:直接分组:views中的形参可以随便定义 :url(r&#39;^index(\\d+)$&#39;,views.show)--&gt;def show(request,a)\n            第二种:分组命名:views长的形参必须和分组的名字一致  :url(r&#39;^index(?p&lt;num&gt;\\d+)$&#39;,views.show)--&gt;def show(request,num)\nrequest参数:\n    def index (request)中使用,躲在用于登陆的时候使用\n        request.POST:保存的是网页中用post方式提交的参数，参数保存在请求头中\n        request.GET:保存的是网页中用get方式提交的参数，参数保存在url中\n    使用方法:\n        xx &#x3D; request.POST.get(&#39;xxx&#39;)\n        xx &#x3D; request.GET.get(&#39;xxx&#39;)\n\n\n 重点:\n    如果是网页模板，那么需要创建一个templates文件夹在项目文件夹下并且setting中配置路径，上面也提到过\n    如果是静态的文件，js，css，image这些文件的话，需要在项目文件夹下创建一个static文件夹，平且在setting中配置STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39; 和 STATICFILES_DIR &#x3D; [os.path.join(BASE_DIR,&#39;刚刚创建的文件夹static&#39;)]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Cookie（多用于记住用户名）\"><a href=\"#Cookie（多用于记住用户名）\" class=\"headerlink\" title=\"Cookie（多用于记住用户名）\"></a>Cookie（多用于记住用户名）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">Cookie的设置:需要一个HttpResponse的对象或者他的子类的对象，set_cookie\n取出cookie:request对象的COOKIES中\n\n设置:\n    xxx  &#x3D;  HttpResponse() 实例化HttpResponse的对象\n    xxx.set_cookie(&#39;key&#39;,value,max_age &#x3D; x) max_age是这只cookie的生存周期的，单位为秒\n    xxx.set_cookie(&#39;key2&#39;,value2,max_age &#x3D; x)\n    return xxx\n取出:\n    xxx &#x3D; request.COOKIES[&#39;key&#39;]\n    return HttpResponse(xxx)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"session-多用于银行卡-登录状态\"><a href=\"#session-多用于银行卡-登录状态\" class=\"headerlink\" title=\"session(多用于银行卡,登录状态)\"></a>session(多用于银行卡,登录状态)</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">session是一个特殊的Cookie,他的安全性更高，只给浏览器一个cookie编号,更重要的是，session可以记住用户的登录状态\n\n读取设置都在request\n设置session:\n    request.session[&#39;key&#39;] &#x3D; value\n    request.session[&#39;key2&#39;] &#x3D; value2\n    request.set_expiry(xx) 设置存活时间，整数，秒\n    return HttpResponse(request)\n\n获取:\n    xxx &#x3D; request.session[&#39;xx&#39;]\n    xxx &#x3D; request.session[&#39;xx&#39;]\n    xxx &#x3D; request.session.get(&#39;xx&#39;)\n    return HttpResponse(xx)\n登录状态:\n    判断有没有这个键:request.session.has_key[&#39;&#39;]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"第三块-模板templates\"><a href=\"#第三块-模板templates\" class=\"headerlink\" title=\"第三块:模板templates\"></a>第三块:模板templates</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">html里面的模板标签:\n    &#96;&#123;&#123;变量&#125;&#125;&#96;\n    &#96;&#123;% xx %&#125;&#96;  &#96; &#123;% endxx %&#125;&#96;\n    &#123;# 注释内容 #&#125;\n   &#96; &#123;% comment %&#125;&#96; 多行注释 &#96;&#123;% endcomment %&#125;&#96;\n\n过滤器:\n    格式: 模板变量 | 过滤器:参数\n    date:改变日期的显示格式\n    length:求字符串和列表的长度\n    default:设置不符合要求时候的默认值\n\n自定义过滤器:\n    在应用下创建一个templatetags包\n    在templatetags中创建过滤器xxx.py\n    在xxx.py中导入 from django.template import Library\n    实例化Library对象，xx &#x3D; Library()\n    定义一个函数，和python一样的，有返回值的\n    装饰一下，@xx.xxx\n\n    在html中加载，在最前面:&#96;&#123;% load xxx %&#125;&#96;\n    使用过滤器:变量 | xx\n    如果xx函数中有参数，竖线前面的变量就是参数，如果有两个以上的参数那么只用传n-1个参数\n\n模板继承:\n    被继承的html模板不动，在子html模板中删除html代码，只写一句&#96;&#123;% extends &#39;父模板地址&#39; %&#125;&#96; 地址相对于templates\n\n    在父模板中预留位置:子模板就可以重写父模板中预留的位置，从而保证有些不同 在父模板中&#96;&#123;% block 块名 %&#125;&#96; 可以写可以不写 &#96;&#123;% endblock 块名 %&#125;&#96;，子模板中也写&#96;&#123;% block 块名 %&#125; &#96;可以写可以不写 &#96;&#123;% endblock 块名 %&#125;&#96;，两边的两个标签需要一样块名一样，内容可以不一样\n    既要使用父模板中的预留内容，也要自定义预留内容:&#96;&#123;% block 块名 %&#125;&#96; &#96;&#123;&#123; block.super &#125;&#125;&#96;可以写可以不写 &#96;&#123;% endblock 块名 %&#125;&#96;\n\n    html转义:\n        在views.py 中render(request,&#39;html 路径&#39;, &#123;&#39;content&#39;:&#39;&lt;h1&gt;hello&lt;&#x2F;h1&gt;&#39;&#125;)\n        这样传过去的用的时候&#123;&#123;content&#125;&#125;，html并不会把传过来的&lt;h1&gt;当作标签，而是转义成了字符\n        解决方法:\n            &#123;&#123; content | safe &#125;&#125;\n\ncsrf伪造攻击:\n    主要原因:\n        1、你在正常登录网站之后，浏览器保存了你的sessionid,而且你并没有退出\n        2、在没有退出的情况下，访问了其他的网站做了一些不好的操作，间接的修改你的密码\n    django默认启用了csrf防护，并且只针对post提交的数据防护，并且对包括自己的所有人防护\n    解决办法:\n        在html文件中有post提交的表单下方第一行输入&#96;&#123;% csrf_token %&#125;&#96;这样自己就可以正常使用了\n\n验证码(防止暴力请求):\n    用闭包的方式验证登录，有些界面只有登陆了才能使用\n    工作的时候网上取down\n\n\nurl 反向解析(给地址取个名字,然后直接用地址就可以动态的生成网页地址，不管网页地址怎么变化):\n    在项目中的urls中的链接应用url地址的地方添加第三个参数:url(r&#39;^&#39;, include(&#39;应用文件夹.urls&#39;), namespace&#x3D;&#39;应用文件夹名字&#39;)  ,namespace&#x3D;&#39;一般用应用名,也可以自定义&#39;\n    然后给应用中urls中的每一个自定义的链接取名:url(r&#39;^xxx$&#39;,views.xx, name &#x3D; &#39;取名&#39;)\n\n    在html中使用:\n        1、&lt;a href &#x3D;&#96; &#123;% url &#39;namespace:name&#39; %&#125;&#96;  url地址中没有参数  url(r&#39;^xx$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        2、&lt;a href &#x3D;&#96; &#123;% url &#39;namespace:name&#39; 1%&#125;&#96;  url地址中有一个参数   url(r&#39;^xx&#x2F;(\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        3、&lt;a href &#x3D; &#96;&#123;% url &#39;namespace:name&#39; 1 3%&#125; &#96; url地址中有两个参数   url(r&#39;^xx&#x2F;(\\d+)&#x2F;(\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        *4、&lt;a href &#x3D; &#96;&#123;% url &#39;namespace:name&#39; a&#x3D;1 b&#x3D;3%&#125;&#96;  url地址中有两个被取名的参数   url(r&#39;^xx&#x2F;(?P&lt;a&gt;\\d+)&#x2F;(?P&lt;b&gt;\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n    在views中使用:\n        from django.core.urlresolvers import reverse\n        1、reverse(&#39;namespace:name&#39;) url地址中没有参数  url(r&#39;^xx$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        2、reverse(&#39;namespace:name&#39;, args &#x3D; (1)) url地址中有一个参数   url(r&#39;^xx&#x2F;(\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        3、reverse(&#39;namespace:name&#39;, args &#x3D; (1,3) url地址中有两个参数   url(r&#39;^xx&#x2F;(\\d+)&#x2F;(\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        *4、reverse(&#39;namespace:name&#39;, kwargs &#x3D; &#123;&#39;a&#39;:1, &#39;b&#39;:2&#125;) url地址中有两个被取名的参数   url(r&#39;^xx&#x2F;(?P&lt;a&gt;\\d+)&#x2F;(?P&lt;b&gt;\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"静态文件-css-js-image\"><a href=\"#静态文件-css-js-image\" class=\"headerlink\" title=\"静态文件(css\\js\\image)\"></a>静态文件(css\\js\\image)</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">在项目文件夹中创建static文件夹\n在setting中配置:\n    STATIC_URL &#x3D; &#39;&#x2F;定义网址以什么开头&#x2F;&#39;  一般都是static\n        这里的名字如果想要随便改，然后在html中动态生成的话，在html中加载 &#96;&#123;% load staticfiles %&#125; &#96; 在要使用的地方用&#96;&#123;% static &#39;文件路径&#39; %&#125;&#96;这样进行拼接\n    STATICFILES_DIR &#x3D; [拼接文件夹位置]\n静态文件的使用实在html中的链接<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、获取浏览器端的ip地址: request.META[&#39;REMOTE_ADDR&#39;],可以设置某些ip访问网站\n2、中间件的左右就是在每一个视图函数调用之前都会先执行中间件，可以判断某些用户或者界面不能使用，如判断是否登录，判断ip是否被禁止\n3、定义中间件的方法:\n    在应用中新建一个middleware.py 的python文件\n    中间件的构成:\n        class xxxx(object):   中间件类\n            xxx\n            def process_view(self, request, view_func, *view_args, **view_kwargs)  中间件函数\n                xxx\n                return xxx\n4、定义了中间件以后，我们需要在setting中注册：找到MIDDLEWARE_CLASSES，然后&#39;应用名.middleware.中间类\n5、中间件函数是内置的，只能使用内置的那么几个:\n    process_view(self, request, view_func, *view_args, **view_kwargs) : url匹配之后，视图调用之前\n    process_request(self, request) : 产生request对象之后， url匹配之前调用\n    __init__(self) : 服务器响应第一个请求的时候调用\n    process_response(self, request, response) : 视图调用之后，内容返回浏览器之前,需要return response\n    process_exception(self, request, exception) : 视图函数出现异常的时候调用，如果有多个exception，则按照注册的从后往前执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第四模块Admin后台管理\"><a href=\"#第四模块Admin后台管理\" class=\"headerlink\" title=\"第四模块Admin后台管理\"></a>第四模块Admin后台管理</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、创建用户:python manage.py createsuperuser\n2、登录用户:网址&#x2F;admin\n3、注册模型类:在models.py中定义模型（将数据库中的数据加载到后台管理页面），在admin.py中去注册这个模型，admin.site.register(模型名字)\n\n\n上传图片:\n    在static文件夹中新建一个media文件夹，用于保存用户的头像等\n    在setting中设置MEDIA_ROOT &#x3D; 拼接文件夹,MEDIA_URL &#x3D; &#39;&#x2F;media&#x2F;&#39;\n\n    后台管理界面上传图片:创建一个数据库模型，定义一个字段，类型为ImageField(upload_to &#x3D; &#39;media中的某个文件夹&#39;)\n\n浏览器上传的照片:\n    表单的提交方式和编码方式必须如下\n    &lt;form method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot; action&#x3D;&quot;&#x2F;upload_down&quot;&gt;\n        &#96;&#123;% csrf_token %&#125;&#96;\n        &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;pic&quot;&gt;&lt;br&#x2F;&gt;\n        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot;&gt;\n    &lt;&#x2F;form&gt;\n        读取照片页面信息并保存：\n    def upload(request):\n        return render(request, &#39;upload.html&#39;)\n\n\n    def upload_down(request):\n        pic &#x3D; request.FILES[&#39;pic&#39;]\n        pic_path &#x3D; f&#39;&#123;settings.MEDIA_ROOT&#125;&#x2F;user_admin&#x2F;&#123;pic.name&#125;&#39;\n        with open(pic_path, &#39;wb&#39;) as pf:\n        for content in pic.chunks():\n            pf.write(content)\n        PicInfo.objects.create(pic_super&#x3D;f&#39;user_admin&#123;pic.name&#125;&#39;)\n        return HttpResponse(&#39;ok&#39;)\n浏览器上传的图片：\n    pic &#x3D; request.FILES[&#39;xx&#39;]的对象：pic.name获取文件名,pic.chunks()分块读取内容进行保存，pic.size获取上传文件的大小都是常用的\n\n\n\n分页（ 在view.py中和html代码中使用）:\n    需要包：from django.core.paginator import Paginator\n    Paginator属性:num_pages:返回分页的总页数,page_range:返回分页的页码列表\n    Paginator方法:page(self,number)：返回低number页的Page实例对象\n    Page的属性:number:返回当前页的页码，object_list：返回包含当前页的数据的查询集，paginator:返回对应的Paginator对象\n    page的方法:has_previous:判断是否有前一页,has_next:判断是否有下一页,previous_page_number:放回前一页,next_page_unmber:返回下一页\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第五模块-url匹配\"><a href=\"#第五模块-url匹配\" class=\"headerlink\" title=\"第五模块(url匹配)\"></a>第五模块(url匹配)</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">可以用path，url\nfrom django.urls import path,include或者from django.conf.urls import url,include\n在project的urls.py中，使用反向解析用到include,在include中添加参数namespace空间命名，可以进行反向解析，在应用中的urls.py中的urlpatterns上面添加一句app_name&#x3D;&#39;xx&#39;这个名字和namespace的名字相同。\n在应用的urls.py中，想使用反向解析，不需要include,可以直接在最后添加参数，name&#x3D;&#39;xx&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"数据加密\"><a href=\"#数据加密\" class=\"headerlink\" title=\"数据加密\"></a>数据加密</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install itsdangerous\nfrom itsdangerous import TimedJSONWebSignatureSerializer\n创建一个TimedJSONWebSignatureSerializer对象: xx &#x3D; TimedJSONWebSignatureSerializer(&#39;加密秘钥&#39;，过期时间)\n\n加密：加密结果 &#x3D; TimedJSONWebSignatureSerializer对象.dumps(数据)\n解密: 解密结果 &#x3D; TimedJSONWebSignatureSerializer对象.loads(加密结果)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"异步发邮件\"><a href=\"#异步发邮件\" class=\"headerlink\" title=\"异步发邮件\"></a>异步发邮件</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install celery\n项目中新建一个任务包，在这个包中使用celery（from celery import Celery）\n创建Celery的实例对象：xx &#x3D; Celery(&#39;名字&#39;，broker&#x3D;&#39;redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;1&#39;),broker代表中间人\n定义需要异步处理的函数，用@xx.task装饰\n在需要用到异步处理的应用中使用：\n    导入过来的函数.delay(参数)\n再将整个项目复制一份，进入复制的项目中的celery的包中：\n    import os\n    os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;dalifresh.settings&#39;)\n    django.setup()\n然后再终端输入命令:celery -A 取好的名字 worker -l info来运行这个异步处理<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Django\"><a href=\"#Django\" class=\"headerlink\" title=\"Django\"></a>Django</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>django-admin startproject 项目名</p>\n<h3 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h3><p>python manage.py startapp 应用名</p>\n<h3 id=\"运行web服务器\"><a href=\"#运行web服务器\" class=\"headerlink\" title=\"运行web服务器\"></a>运行web服务器</h3><p>python manage.py runserver</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">python3 <span class=\"token operator\">-</span>m http<span class=\"token punctuation\">.</span>server <span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 可以启动一个web服务，供局域网内用户下载文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"将固定的路径加入python可以搜索的目录\"><a href=\"#将固定的路径加入python可以搜索的目录\" class=\"headerlink\" title=\"将固定的路径加入python可以搜索的目录\"></a>将固定的路径加入python可以搜索的目录</h3><p>import sys</p>\n<p>sys.path.insert(位置（从0开始），要加入搜索的目录)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">python manage<span class=\"token punctuation\">.</span>py shell <span class=\"token comment\"># 进入django终端</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"ORM框架\"><a href=\"#ORM框架\" class=\"headerlink\" title=\"ORM框架\"></a>ORM框架</h3><ul>\n<li>   1、对象和数据库映射</li>\n<li>   2、根据设计的模型生成数据库中的表:    -  1、生长牵引文件:python manage.py makemigrations    - 2、执行牵引文件:python manage.py migrate</li>\n</ul>\n<h3 id=\"模型类\"><a href=\"#模型类\" class=\"headerlink\" title=\"模型类\"></a>模型类</h3><blockquote>\n<p>在models.py中编写模型类</p>\n</blockquote>\n<ul>\n<li> 1、生长迁移文件:python manage.py makemigrations    -    注意如果有ForeignKey的话一定要加上on_delete = models.CASCADE</li>\n<li>2、执行迁移文件:python manage.py migrate</li>\n</ul>\n<blockquote>\n<p>python manage.py shell</p>\n</blockquote>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">首先:导入定义好的模型类\n其次:实例化一个对象\n插入 :对象.属性名=值\n保存:对像.save()\n拿到数据:变量 = 类名.objects.get(条件)\n    变量.属性：直接查看\n    变量.属性=值  ——> 变量.save()  :修改\n    变量.delete():删除<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"后台管理（在admin-py中编写后台管理类）\"><a href=\"#后台管理（在admin-py中编写后台管理类）\" class=\"headerlink\" title=\"后台管理（在admin.py中编写后台管理类）\"></a>后台管理（在admin.py中编写后台管理类）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">本地化: LANGUAGE_CODE &#x3D; &#39;zh-hans&#39; :使用中文\n       TIME_ZONE &#x3D; &#39;Asia&#x2F;Shanghai&#39; :使用中国时间\n\n创建管理员:python manage.py createsuperuser   (第一次新建管理员的时候必须要执行一下牵引文件，可以不生成，但必须执行)\n\n自己创建的管理员是默认是放在数据库中的一个单独的表中的，但是可以使用（在settings.py中）：\n# django认证系统使用的模型类\nAUTH_USER_MODEL&#x3D;&#39;应用.类名&#39;\n\n这个来规定生成数据放在什么表，在实际开发中是特别的重要的，一般和用户信息放在一起\n\n使用这个必须导入(models.py中)from django.contrib.auth.models import AbstractUser\n\n加入自己定义的数据库或者数据库模型: 1、导入 2、admin.site.register(类)\n\n规定自定义的数据库或者数据库模型的显示: list_display(&#39;&#39;,&#39;&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"使用视图（在views中编写）\"><a href=\"#使用视图（在views中编写）\" class=\"headerlink\" title=\"使用视图（在views中编写）\"></a>使用视图（在views中编写）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">使用模块: from django.http import HttpResponse,HttpResponseRedirect(重定向)\n使用模块: from django.shortcuts import render,redirect(也是重定向)\n使用 return HttpResponse(&#39;返回值&#39;) 返回结果\n使用模块: from django.conf.urls import include, url\nurl的使用方法:url(r&#39;正则表达式&#39;,处理字符串)\n            url(r&#39;正则表达式&#39;,include(处理源))\n\n实现过程: views.py 中创建视图（使用模块第一个） ---&gt;  创建 urls.py (使用第二个模块,并且导入views.py)  ---&gt;  项目中的urls.py\n中添加创建的urls.py(使用url添加)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"模板（项目文件夹中创建-模板文件夹templates）\"><a href=\"#模板（项目文件夹中创建-模板文件夹templates）\" class=\"headerlink\" title=\"模板（项目文件夹中创建 模板文件夹templates）\"></a>模板（项目文件夹中创建 模板文件夹templates）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">在项目文件夹中的setting中设置TEMPLATES中的DIRS，表示模板位置，一般拼接\n使用模板:\n    导入模块:from django.template import loader\n    1、使用模板文件: temp &#x3D; loader.get_template(&#39;文件名可以带路径&#39;)\n    2、定义上下文（个模板传参数）: context &#x3D; &#123;字典参数&#125;\n    3、渲染模板:产生HTML代码:res_html &#x3D; temp.render(context)\n    4、返回浏览器:return HttpResponse(res_html)\n\n最简单的使用方法: return render(request,&#39;文件可以带路径&#39;,&#123;传参数&#125;)\n\n参数在html代码中的使用方法:\n    普通变量:&#123;&#123;key&#125;&#125;\n    for循环:&#123;% fro x in xx %&#125;\n            &#123;%endfor%&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"关于django和数据库的操作\"><a href=\"#关于django和数据库的操作\" class=\"headerlink\" title=\"关于django和数据库的操作\"></a>关于django和数据库的操作</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、创models文件 class xxx(models.Model)\n2、迁移文件\n3、创建views文件 def xxx(request)，必须有返回值,一般返回值用HttpResponse,使用模板的返回值用render,需要重定向的话使用redirect\n4、新建应用urls.py文件,用于定义访问时用的url地址\n5、取项目中的urls文件中添加应用的url文件 ：url(r&#39;^&#39;,include(xxx.urls))\n6、在项目中创建templates模板文件,在到seting中配置一下，templates中的文件就是html文档<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"第一大点-models-模型-注册模型类\"><a href=\"#第一大点-models-模型-注册模型类\" class=\"headerlink\" title=\"第一大点:models,模型,注册模型类\"></a>第一大点:models,模型,注册模型类</h3><p>django操作数据库的相关知识</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">应用下的models.py文件中定义的所有模型，都要继承一个抽象基类:\n创建抽象基类:在项目中创建一个pythonPakage,名字叫db,在这个包下面创建一个base_model.py文件，在文件中编写一个抽像基类<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseModel</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''模型抽象基类'''</span>\n        create_time <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">)</span>\n    update_time <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">)</span>\n        is_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'删除标记'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">'''说明是一个抽象模型类'''</span>\n        abstract <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"约束选项在字段类型中使用，字段类型在models模块下使用\"><a href=\"#约束选项在字段类型中使用，字段类型在models模块下使用\" class=\"headerlink\" title=\"约束选项在字段类型中使用，字段类型在models模块下使用\"></a>约束选项在字段类型中使用，字段类型在models模块下使用</h5><p>字段类型:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、AutoField:自动编号\n2、BooleanField:布尔类型\n3、NullBooleanField:Null，True，False三种值\n4、CharField（max_length&#x3D;）:字符串,必须指定max_length\n5、TextField:大文本类型\n6、IntegerField:整数\n7、DecimalField(max_digits&#x3D;,decimal_places&#x3D;):浮点数，第一个参数表示总位数，第二个参数表示小数位数\n8、FloatField(max_digits&#x3D;,decimal_places&#x3D;):浮点数，参数同上\n9、DateField（[auto_now&#x3D;,auto_now_add&#x3D;]）:日期类型，有两个可选参数，用的时候只能用一个，第一个表示更新时间，第二个表示第一次创建的的时间\n10、TimeField（[auto_now&#x3D;,auto_now_add&#x3D;]）:时分秒\n11、DateTimeField（[auto_now&#x3D;,auto_now_add&#x3D;]）:年月日时分秒\n12、FileField:文件上传\n13、ImageField:有效图片\n\n14、ForeignKey:一对多\n15、ManyToManyField:多对多\n16、OneToOneField:一对一\n\n约束选项:\n1、default:默认值\n2、primary_key:主键\n3、unique:不重复\n4、db_index:索引，db_index&#x3D;True&#x2F;False\n5、db_column:指定表字段的名字，db_column&#x3D;&#39;名字&#39;\n6、null:空\n7、blank:是否为空，在后台使用，默认True，在django管理页面有用\n8、chioces：chioces选项,等于一个元组，格式 choices &#x3D; ((xx,xxx),(xx,xxx)……),网页显示为一个列表框\n9、verbose_name：制定在后台的显示名称 ，字段和表名都可以用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"富文本\"><a href=\"#富文本\" class=\"headerlink\" title=\"富文本\"></a>富文本</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">django使用tinymce：\n    pip install django-tinymce\n    from tinymce.models import HTMLField\n    xx &#x3D; HTMLField(verbose_name &#x3D; &#39;xx&#39;)\n    在settings.py中注册这个富文本编辑器，INSTALLED_APPS中添加tinymce\n    在settings.py中设置富文本编辑器的属性：\n        TINYMCE_DEFAULT_CONFIG &#x3D; &#123;\n            &#39;theme&#39;: &#39;advanced&#39;,\n            &#39;width&#39;: 编辑器的宽,\n            &#39;height&#39;: 编辑器的高,\n        &#125;\n    在项目urls中添加: url(r&#39;^tinymce&#x2F;&#39;, include(&#39;tinymce.urls&#39;))\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">说明一下:exclude,filter,get三个都时带条件的---&gt;模型名.objects.查询方式(属性名__条件名&#x3D;值)\n条件名:\nexact:判等 ，可以不用直接用 &#x3D;\ncontains:模糊查询，包含\nendswith\\startswith:模糊查询，结尾\\开头\nisnull:空查询,布尔值\nin:范围查询，属性名__in &#x3D; 列表或者元组\ngt,lt,gte,lte:大于，小于，大于等于，小于等于\nday&#x2F;month&#x2F;year:使用方法:日期查询\n\nget():返回满足条件的一条记录\nall():返回所有记录，查询集\nfilter():返回满足条件的所有记录，查询集\nexclude():返回不满足条件的所有记录，查询集\norder_by(‘属性名1’,’属性名2&#39;……):升序\norder_by(‘-属性名1’,’-属性名2&#39;……):降序，order_by()是将查出来的数据进行排序，如：BookInfo.objects.all().order_by(&#39;id&#39;,&#39;-btitle&#39;)\n\n\nQ对象:用于查询时候的多个条件的  ’与或非‘  表示\n    from django.db.models import Q\n    例子:\n        BookInfo.object.filter(Q(id &#x3D; 2) &amp; Q(btitle &#x3D; &#39;hello&#39;))   与\n        BookInfo.object.filter(Q(id &#x3D; 2) | Q(btitle &#x3D; &#39;hello&#39;))   或\n        BookInfo.object.filter(~Q(id &#x3D; 2))                        非\nF对象:条件中用于属性比较,还可以进行算数运算\n    from django.db.models import F\n    例子:\n        BookInfo.objects.filter(id__gt &#x3D; F(&#39;bid&#39;))\n        BookInfo.objects.filter(id__gt &#x3D; F(&#39;bid&#39;)*3)\n\n\n\n聚合函数:sum,count,avg,max,min,在django中通过aggregates来使用\n    from django.db.models import Sum,Count,Avg,Max,Min\n    例子:\n        BookInfo.objects.all().aggregate(Count(&#39;id&#39;)) : 返回值是字典\n        BookInfo.objects.all().aggregate(Sum(&#39;bread&#39;) : 总和\n\n\n插入、更新、删除:\n    save():插入更新\n    delete():删除\n\n关联查询:\n    一对多:对象.多类的名字__set.all()\n    多对一:对象.关系属性\n\n\n模型管理器:\n    也是在models中编写，\n    格式:\n        class xxx (models.Manager):\n            可以定义方法或者定义查询（all）\n\n\n元选项(指定表名):\n    class Meta:\n        db_table &#x3D; &#39;xxx&#39;\n    verbose_name &#x3D; &#39;xxx&#39;\n    verbose_name_plural &#x3D; verbose_name\n    每个需要自定义表名的模型下方都要写这个代码，否则用系统给的表明,后两行代码代表指定在后台显示什么名字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"第二大点-views-视图的使用\"><a href=\"#第二大点-views-视图的使用\" class=\"headerlink\" title=\"第二大点:views,视图的使用\"></a>第二大点:views,视图的使用</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、项目中的urls中加入应用中的urls中的所有，表示项目启动以后可以使用应用的链接配置\n2、应用中的urls用于配置浏览器页面输入的地址，一般只配置‘&#x2F;’以后的\n3、编写views文件，写清楚每个url的动作，定义在函数中,需要返回值\n\n4、views文件中所写的代码就是写应该在网页中现实的东西\n5、如果要使用模板，需要在项目文件夹下创建一个templates文件夹，并且配置好路径\n\n6、return HttpResponse(xx),不用模板\n   return HttpResponseRedirect(地址),redirect(地址)，两个功能一样都是重定向，在数据库添加后及时显示时候用\n   return render(request, &#39;模板文件位置&#39;,&#123;参数&#125;)\n\n重点:关于数据库的操作:导入 models  (类)\n    关于网页内容操作:导入 views   (函数)\n\nseting 中的设置，要改一起改\n    setting 中的DEBUG属性(调试模式):默认是True，改成False后可以显示标准的报错页面\n    setting 中的ALLOWED_HOSTS属性(允许访问):默认注释了的，是一个列表，ALLOWED_HOSTS &#x3D; [&#39;*&#39;]表示所有用户都可访问\n\n给视图传参数: 在urls中配置url的时候，给一个正则的分组就表示给视图传参数:\n            第一种:直接分组:views中的形参可以随便定义 :url(r&#39;^index(\\d+)$&#39;,views.show)--&gt;def show(request,a)\n            第二种:分组命名:views长的形参必须和分组的名字一致  :url(r&#39;^index(?p&lt;num&gt;\\d+)$&#39;,views.show)--&gt;def show(request,num)\nrequest参数:\n    def index (request)中使用,躲在用于登陆的时候使用\n        request.POST:保存的是网页中用post方式提交的参数，参数保存在请求头中\n        request.GET:保存的是网页中用get方式提交的参数，参数保存在url中\n    使用方法:\n        xx &#x3D; request.POST.get(&#39;xxx&#39;)\n        xx &#x3D; request.GET.get(&#39;xxx&#39;)\n\n\n 重点:\n    如果是网页模板，那么需要创建一个templates文件夹在项目文件夹下并且setting中配置路径，上面也提到过\n    如果是静态的文件，js，css，image这些文件的话，需要在项目文件夹下创建一个static文件夹，平且在setting中配置STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39; 和 STATICFILES_DIR &#x3D; [os.path.join(BASE_DIR,&#39;刚刚创建的文件夹static&#39;)]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Cookie（多用于记住用户名）\"><a href=\"#Cookie（多用于记住用户名）\" class=\"headerlink\" title=\"Cookie（多用于记住用户名）\"></a>Cookie（多用于记住用户名）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">Cookie的设置:需要一个HttpResponse的对象或者他的子类的对象，set_cookie\n取出cookie:request对象的COOKIES中\n\n设置:\n    xxx  &#x3D;  HttpResponse() 实例化HttpResponse的对象\n    xxx.set_cookie(&#39;key&#39;,value,max_age &#x3D; x) max_age是这只cookie的生存周期的，单位为秒\n    xxx.set_cookie(&#39;key2&#39;,value2,max_age &#x3D; x)\n    return xxx\n取出:\n    xxx &#x3D; request.COOKIES[&#39;key&#39;]\n    return HttpResponse(xxx)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"session-多用于银行卡-登录状态\"><a href=\"#session-多用于银行卡-登录状态\" class=\"headerlink\" title=\"session(多用于银行卡,登录状态)\"></a>session(多用于银行卡,登录状态)</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">session是一个特殊的Cookie,他的安全性更高，只给浏览器一个cookie编号,更重要的是，session可以记住用户的登录状态\n\n读取设置都在request\n设置session:\n    request.session[&#39;key&#39;] &#x3D; value\n    request.session[&#39;key2&#39;] &#x3D; value2\n    request.set_expiry(xx) 设置存活时间，整数，秒\n    return HttpResponse(request)\n\n获取:\n    xxx &#x3D; request.session[&#39;xx&#39;]\n    xxx &#x3D; request.session[&#39;xx&#39;]\n    xxx &#x3D; request.session.get(&#39;xx&#39;)\n    return HttpResponse(xx)\n登录状态:\n    判断有没有这个键:request.session.has_key[&#39;&#39;]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"第三块-模板templates\"><a href=\"#第三块-模板templates\" class=\"headerlink\" title=\"第三块:模板templates\"></a>第三块:模板templates</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">html里面的模板标签:\n    &#96;&#123;&#123;变量&#125;&#125;&#96;\n    &#96;&#123;% xx %&#125;&#96;  &#96; &#123;% endxx %&#125;&#96;\n    &#123;# 注释内容 #&#125;\n   &#96; &#123;% comment %&#125;&#96; 多行注释 &#96;&#123;% endcomment %&#125;&#96;\n\n过滤器:\n    格式: 模板变量 | 过滤器:参数\n    date:改变日期的显示格式\n    length:求字符串和列表的长度\n    default:设置不符合要求时候的默认值\n\n自定义过滤器:\n    在应用下创建一个templatetags包\n    在templatetags中创建过滤器xxx.py\n    在xxx.py中导入 from django.template import Library\n    实例化Library对象，xx &#x3D; Library()\n    定义一个函数，和python一样的，有返回值的\n    装饰一下，@xx.xxx\n\n    在html中加载，在最前面:&#96;&#123;% load xxx %&#125;&#96;\n    使用过滤器:变量 | xx\n    如果xx函数中有参数，竖线前面的变量就是参数，如果有两个以上的参数那么只用传n-1个参数\n\n模板继承:\n    被继承的html模板不动，在子html模板中删除html代码，只写一句&#96;&#123;% extends &#39;父模板地址&#39; %&#125;&#96; 地址相对于templates\n\n    在父模板中预留位置:子模板就可以重写父模板中预留的位置，从而保证有些不同 在父模板中&#96;&#123;% block 块名 %&#125;&#96; 可以写可以不写 &#96;&#123;% endblock 块名 %&#125;&#96;，子模板中也写&#96;&#123;% block 块名 %&#125; &#96;可以写可以不写 &#96;&#123;% endblock 块名 %&#125;&#96;，两边的两个标签需要一样块名一样，内容可以不一样\n    既要使用父模板中的预留内容，也要自定义预留内容:&#96;&#123;% block 块名 %&#125;&#96; &#96;&#123;&#123; block.super &#125;&#125;&#96;可以写可以不写 &#96;&#123;% endblock 块名 %&#125;&#96;\n\n    html转义:\n        在views.py 中render(request,&#39;html 路径&#39;, &#123;&#39;content&#39;:&#39;&lt;h1&gt;hello&lt;&#x2F;h1&gt;&#39;&#125;)\n        这样传过去的用的时候&#123;&#123;content&#125;&#125;，html并不会把传过来的&lt;h1&gt;当作标签，而是转义成了字符\n        解决方法:\n            &#123;&#123; content | safe &#125;&#125;\n\ncsrf伪造攻击:\n    主要原因:\n        1、你在正常登录网站之后，浏览器保存了你的sessionid,而且你并没有退出\n        2、在没有退出的情况下，访问了其他的网站做了一些不好的操作，间接的修改你的密码\n    django默认启用了csrf防护，并且只针对post提交的数据防护，并且对包括自己的所有人防护\n    解决办法:\n        在html文件中有post提交的表单下方第一行输入&#96;&#123;% csrf_token %&#125;&#96;这样自己就可以正常使用了\n\n验证码(防止暴力请求):\n    用闭包的方式验证登录，有些界面只有登陆了才能使用\n    工作的时候网上取down\n\n\nurl 反向解析(给地址取个名字,然后直接用地址就可以动态的生成网页地址，不管网页地址怎么变化):\n    在项目中的urls中的链接应用url地址的地方添加第三个参数:url(r&#39;^&#39;, include(&#39;应用文件夹.urls&#39;), namespace&#x3D;&#39;应用文件夹名字&#39;)  ,namespace&#x3D;&#39;一般用应用名,也可以自定义&#39;\n    然后给应用中urls中的每一个自定义的链接取名:url(r&#39;^xxx$&#39;,views.xx, name &#x3D; &#39;取名&#39;)\n\n    在html中使用:\n        1、&lt;a href &#x3D;&#96; &#123;% url &#39;namespace:name&#39; %&#125;&#96;  url地址中没有参数  url(r&#39;^xx$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        2、&lt;a href &#x3D;&#96; &#123;% url &#39;namespace:name&#39; 1%&#125;&#96;  url地址中有一个参数   url(r&#39;^xx&#x2F;(\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        3、&lt;a href &#x3D; &#96;&#123;% url &#39;namespace:name&#39; 1 3%&#125; &#96; url地址中有两个参数   url(r&#39;^xx&#x2F;(\\d+)&#x2F;(\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        *4、&lt;a href &#x3D; &#96;&#123;% url &#39;namespace:name&#39; a&#x3D;1 b&#x3D;3%&#125;&#96;  url地址中有两个被取名的参数   url(r&#39;^xx&#x2F;(?P&lt;a&gt;\\d+)&#x2F;(?P&lt;b&gt;\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n    在views中使用:\n        from django.core.urlresolvers import reverse\n        1、reverse(&#39;namespace:name&#39;) url地址中没有参数  url(r&#39;^xx$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        2、reverse(&#39;namespace:name&#39;, args &#x3D; (1)) url地址中有一个参数   url(r&#39;^xx&#x2F;(\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        3、reverse(&#39;namespace:name&#39;, args &#x3D; (1,3) url地址中有两个参数   url(r&#39;^xx&#x2F;(\\d+)&#x2F;(\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)\n        *4、reverse(&#39;namespace:name&#39;, kwargs &#x3D; &#123;&#39;a&#39;:1, &#39;b&#39;:2&#125;) url地址中有两个被取名的参数   url(r&#39;^xx&#x2F;(?P&lt;a&gt;\\d+)&#x2F;(?P&lt;b&gt;\\d+)$&#39;, views.xx, name &#x3D; &#39;name&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"静态文件-css-js-image\"><a href=\"#静态文件-css-js-image\" class=\"headerlink\" title=\"静态文件(css\\js\\image)\"></a>静态文件(css\\js\\image)</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">在项目文件夹中创建static文件夹\n在setting中配置:\n    STATIC_URL &#x3D; &#39;&#x2F;定义网址以什么开头&#x2F;&#39;  一般都是static\n        这里的名字如果想要随便改，然后在html中动态生成的话，在html中加载 &#96;&#123;% load staticfiles %&#125; &#96; 在要使用的地方用&#96;&#123;% static &#39;文件路径&#39; %&#125;&#96;这样进行拼接\n    STATICFILES_DIR &#x3D; [拼接文件夹位置]\n静态文件的使用实在html中的链接<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、获取浏览器端的ip地址: request.META[&#39;REMOTE_ADDR&#39;],可以设置某些ip访问网站\n2、中间件的左右就是在每一个视图函数调用之前都会先执行中间件，可以判断某些用户或者界面不能使用，如判断是否登录，判断ip是否被禁止\n3、定义中间件的方法:\n    在应用中新建一个middleware.py 的python文件\n    中间件的构成:\n        class xxxx(object):   中间件类\n            xxx\n            def process_view(self, request, view_func, *view_args, **view_kwargs)  中间件函数\n                xxx\n                return xxx\n4、定义了中间件以后，我们需要在setting中注册：找到MIDDLEWARE_CLASSES，然后&#39;应用名.middleware.中间类\n5、中间件函数是内置的，只能使用内置的那么几个:\n    process_view(self, request, view_func, *view_args, **view_kwargs) : url匹配之后，视图调用之前\n    process_request(self, request) : 产生request对象之后， url匹配之前调用\n    __init__(self) : 服务器响应第一个请求的时候调用\n    process_response(self, request, response) : 视图调用之后，内容返回浏览器之前,需要return response\n    process_exception(self, request, exception) : 视图函数出现异常的时候调用，如果有多个exception，则按照注册的从后往前执行<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第四模块Admin后台管理\"><a href=\"#第四模块Admin后台管理\" class=\"headerlink\" title=\"第四模块Admin后台管理\"></a>第四模块Admin后台管理</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、创建用户:python manage.py createsuperuser\n2、登录用户:网址&#x2F;admin\n3、注册模型类:在models.py中定义模型（将数据库中的数据加载到后台管理页面），在admin.py中去注册这个模型，admin.site.register(模型名字)\n\n\n上传图片:\n    在static文件夹中新建一个media文件夹，用于保存用户的头像等\n    在setting中设置MEDIA_ROOT &#x3D; 拼接文件夹,MEDIA_URL &#x3D; &#39;&#x2F;media&#x2F;&#39;\n\n    后台管理界面上传图片:创建一个数据库模型，定义一个字段，类型为ImageField(upload_to &#x3D; &#39;media中的某个文件夹&#39;)\n\n浏览器上传的照片:\n    表单的提交方式和编码方式必须如下\n    &lt;form method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot; action&#x3D;&quot;&#x2F;upload_down&quot;&gt;\n        &#96;&#123;% csrf_token %&#125;&#96;\n        &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;pic&quot;&gt;&lt;br&#x2F;&gt;\n        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot;&gt;\n    &lt;&#x2F;form&gt;\n        读取照片页面信息并保存：\n    def upload(request):\n        return render(request, &#39;upload.html&#39;)\n\n\n    def upload_down(request):\n        pic &#x3D; request.FILES[&#39;pic&#39;]\n        pic_path &#x3D; f&#39;&#123;settings.MEDIA_ROOT&#125;&#x2F;user_admin&#x2F;&#123;pic.name&#125;&#39;\n        with open(pic_path, &#39;wb&#39;) as pf:\n        for content in pic.chunks():\n            pf.write(content)\n        PicInfo.objects.create(pic_super&#x3D;f&#39;user_admin&#123;pic.name&#125;&#39;)\n        return HttpResponse(&#39;ok&#39;)\n浏览器上传的图片：\n    pic &#x3D; request.FILES[&#39;xx&#39;]的对象：pic.name获取文件名,pic.chunks()分块读取内容进行保存，pic.size获取上传文件的大小都是常用的\n\n\n\n分页（ 在view.py中和html代码中使用）:\n    需要包：from django.core.paginator import Paginator\n    Paginator属性:num_pages:返回分页的总页数,page_range:返回分页的页码列表\n    Paginator方法:page(self,number)：返回低number页的Page实例对象\n    Page的属性:number:返回当前页的页码，object_list：返回包含当前页的数据的查询集，paginator:返回对应的Paginator对象\n    page的方法:has_previous:判断是否有前一页,has_next:判断是否有下一页,previous_page_number:放回前一页,next_page_unmber:返回下一页\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"第五模块-url匹配\"><a href=\"#第五模块-url匹配\" class=\"headerlink\" title=\"第五模块(url匹配)\"></a>第五模块(url匹配)</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">可以用path，url\nfrom django.urls import path,include或者from django.conf.urls import url,include\n在project的urls.py中，使用反向解析用到include,在include中添加参数namespace空间命名，可以进行反向解析，在应用中的urls.py中的urlpatterns上面添加一句app_name&#x3D;&#39;xx&#39;这个名字和namespace的名字相同。\n在应用的urls.py中，想使用反向解析，不需要include,可以直接在最后添加参数，name&#x3D;&#39;xx&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h2 id=\"数据加密\"><a href=\"#数据加密\" class=\"headerlink\" title=\"数据加密\"></a>数据加密</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install itsdangerous\nfrom itsdangerous import TimedJSONWebSignatureSerializer\n创建一个TimedJSONWebSignatureSerializer对象: xx &#x3D; TimedJSONWebSignatureSerializer(&#39;加密秘钥&#39;，过期时间)\n\n加密：加密结果 &#x3D; TimedJSONWebSignatureSerializer对象.dumps(数据)\n解密: 解密结果 &#x3D; TimedJSONWebSignatureSerializer对象.loads(加密结果)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"异步发邮件\"><a href=\"#异步发邮件\" class=\"headerlink\" title=\"异步发邮件\"></a>异步发邮件</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install celery\n项目中新建一个任务包，在这个包中使用celery（from celery import Celery）\n创建Celery的实例对象：xx &#x3D; Celery(&#39;名字&#39;，broker&#x3D;&#39;redis:&#x2F;&#x2F;127.0.0.1:6379&#x2F;1&#39;),broker代表中间人\n定义需要异步处理的函数，用@xx.task装饰\n在需要用到异步处理的应用中使用：\n    导入过来的函数.delay(参数)\n再将整个项目复制一份，进入复制的项目中的celery的包中：\n    import os\n    os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;dalifresh.settings&#39;)\n    django.setup()\n然后再终端输入命令:celery -A 取好的名字 worker -l info来运行这个异步处理<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Flask基础","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T08:04:52.000Z","password":null,"summary":"flask学习笔记","_content":"# Flask\n## `__name__`对象说明\n\n`__name__`返回的就是当前的模块名字\n\n`__name__`如果在本文件中使用的话，那么就是`__main__`\n\n`__name__`如果本文件被导入到别的文件中使用的话，那么就是模块的名字\n在文件中，被调用的时候，永远不可能等于`__main__`\n\n\n\n## Flask\n创建Flask对象: 名字 = Flask(一个魔法值(以这个为根目录)),括号里面的参数，就表示以这个参数所在的模块为根目录，默认这个目录中的static为静态目录，templates为模板目录\n\n创建视图: 等于创建一个函数，要显示给浏览器的数据，直接return\n\n路径配置: 给视图函数加装饰器,格式: app.route('路径')\n\n运行flask: app.run(),flask的参数:\n```python\n app = Flask(__name__,  # 创建flask的应用对象，__name__返回的就是当前的模块名字,表示以什么为根目录\n    static_url_path='/python',  # 访问静态的url前缀，不设置的话默认值是static\n    static_folder='static',  # 静态文件的目录，默认就是static\n    template_folder='templates',  # 模板文件的目录，默认的是templates\n    )\n```\n### flask的配置\n >   flask没有Django那种的专门的配置文件，但是可以通过以下的三种方式来配置\n > -   1、使用配置文件:\n     -   1、创建一个配置文件xxx.cfg\n     -  2、app.config.from_pyfile(文件的路径)\n> -    2、使用配置对象:\n     -   1、创建一个类，将配置写入\n     -   2、app.config.from_object(类名)\n> -    3、直接配置\n    -    app.config['DEBUG'] = True\n     -   app.config.update(key=v1,k2=v2):一次性配置多个，如果已经存在，那么表示更新\n\n### 获取配置中的参数\n>    在flask中，配置中除了可以存储flask的配置，也可以存储开发者放的一些数据\n > -   获取方式一: app.config.get('key')\n> -    获取方式二: current_app.config.get('key'),这是一个模块，也在flask模块中导入，current_app等价于app,有的时候我们拿不到app，所以这个模块可以替代\n\n### app.run()的使用\n >   app.run(host='x.x.x.x', port=xxx, debug=True(False)) ,app.run(host='0.0.0.0', port=xxx)是万能的\n\n### 查看路由表\n>  和Django相比，Flask没有一个直观的路由表，而Django却有urls.py文件可以查看路由表\n>  \n >   Flask查看路由表: app.url_map，这个方法就可以查看flask的路由表，默认的有static的路由记录，还可以查看请求方式\n >   \n  >  如果某些视图只能用某些请求方式来访问，那么方法就是:@app.route('路径', methods=[请求方式列表])\n  >  \n >   当有多个视图对应同一个url地址的时候，解决方法是：要么修改url,要么修改请求方式\n >   \n >   当有多个url地址对应一个视图函数的时候(给视图函数多装几个装饰器)，那么就是说这多个url都可以访问这个视图\n >   \n >   重定向:从flask中导入redirect模块，就可以实现重定向(跳转，两次请求，重定向状态码302),用法:return redirect(url地址)\n >   \n >   反向解析: 从flask中导入url_for模块,就可以实现反向解析，用法: url = url_for('视图函数的名字', 参数列表)\n\n#### url带参数\n```text\n@app.route('/路径/<转换器类型:参数名>'):\n    已经实现的转换器类型: int , float , path,如:@app.route('/index/<int:id>'),在访问的时候:127.0.0.1:5000://index/123就可以访问.\n    不加转换器类型就是表示匹配普通的字符串（除了/）:@app.route('/路径/<参数名>')\n    int转换器类型，匹配整数\n    float转换器类型，匹配小数\n    path转换器类型，匹配字符串，但是包括/\n        @app.route('/goods/<int:id>')\n        def goods_detail(id):\n                '''定义商品视图函数'''\n            return f'goods detail page{id}'\n\n    自定义转换器(三步):\n        1、定义自己的转换器:\n            导入from werkzeug.routing import BaseConverter。\n            定义一个转换器类，使其继承BaseConverter.\n        2、将自定义的转换器添加到flask的应用中:\n            app.url_map.converters['转换器名'] = 类名\n        3、使用:\n            @app.route('/路径/<转换器类型:参数名>')\n```\n### 定义万能转换器\n```text\n说明一点:转换器也可以跟参数（re）: @app.route('/路径/<转换器类型(参数):参数名>')\n方式一、\n    class ReConverter(BaseConverter):\n        '''\n            re万能转换器\n            创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n            在视图函数使用的时候，可以跟参数，一个正则\n            工作原理:\n                在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n        '''\n        # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n        def __init__(self, url_map, regex):\n            super().__init__(url_map)\n            # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n            # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n            self.regex = regex\n    # 加到应用中\n    app.url_map.converters['re'] = ReConverter\n    @app.route(\"/goods/<re(r'1[34578]\\d{9}'):id>\")\n    def goods_detail(id):\n        '''定义商品视图函数'''\n        return f'goods detail page{id}'\n方式二、\n    class ReConverter(BaseConverter):\n        '''\n            re万能转换器\n            创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n            在视图函数使用的时候，可以跟参数，一个正则\n            工作原理:\n                在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n        '''\n        # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n        def __init__(self, url_map):\n            super().__init__(url_map)\n            # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n            # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n            self.regex = r'1[34578]\\d{9}'\n    # 加到应用中\n    app.url_map.converters['re'] = ReConverter\n    @app.route(\"/goods/<re:id>\")\n    def goods_detail(id):\n        '''定义商品视图函数'''\n        return f'goods detail page{id}'\n```\n\n### 高级的转换器应用\n```text\nclass ReConverter(BaseConverter):\n    '''\n        re万能转换器\n        创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n        在视图函数使用的时候，可以跟参数，一个正则\n        工作原理:\n            在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n    '''\n\n    # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n    def __init__(self, url_map):\n        super().__init__(url_map)\n        # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n        # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n        self.regex = r'1[34578]\\d{9}'\n\n    '''\n        to_python和to_url都是父类中的方法:\n            to_python:在匹配成功以后，请求网址带来的参数会交给to_python做出处理，返回的结果为视图函数的参数\n            to_url:在使用重定向(url_for)的时候使用，url(\"视图名\",参数)\n            使用重定向的时候，被定向的视图函数如果有参数需要匹配，那么，在重定向的时候，在使用url_for()的时候，就会去匹配一次被定向视图使用的转换器，在匹配成功的同时调用to_url方法\n            在to_url中处理以后，会交给to_python处理\n\n    '''\n\n    def to_python(self, value):\n        return value\n\n    def to_url(self, value):\n        return '13443218888'\n\n\n# 加到应用中\napp.url_map.converters['re'] = ReConverter\n\n\n@app.route(\"/goods/<re:id>\")\ndef goods_detail(id):\n    '''定义商品视图函数'''\n    return f'goods detail page{id}'\n\n\n@app.route(\"/index\")\ndef index():\n    url = url_for(\"goods_detail\", id=13412344321)\n    return redirect(url)\n```\n\n## Request对象\n```text\n从flask中导入request和Response\nrequest中常用的属性:\n    data:获取请求的数据，并转换为字符串，request.data\n    form:获取请求中的表单数据,request.form.get()，获取一对一,request.form.getlist()，获取一对多的数据\n    args:获取url中的参数(http:x.x.x.x:xxx/xxx?city=chengdu)，\n    cookies:获取到cookie，request.cookies.get()\n    headers:获取请求头中的报文:request.headers\n    method:获取请求方式:request.method\n    url:获取请求的url:request.url\n    files:获取上传的文件:  if request.method == 'POST':\n                            file = request.files.get('pic')\n                            file.save(f'./img/{file.filename}')\n    path: 拿到浏览器请求的地址（视图）\n```\n\n### abort\n```\n从flask中导入abort\n无条件终止视图函数的执行，并返回给前端特定的信息\n用法一、\n    abort（状态码）\n用法二、\n    re = Response(\"login defete\")\n    abort(re)\n```\n### 自定义错误信息\n```\n用户访问的页面不错在的时候，定义一个独立的视图,用@app.errorheader(404)来装饰\n固定写法:\n    @app.errorhandler(404)\n    def header_error(err):\n         return '没有'\n```\n### 设置响应信息的方法\n```\n从flask中导入make_response\n方法一:\n    使用:\n    rsp = make_response(显示的字符串)\n    rsp.status = '999 lqs'  状态码\n    rsp.headers['lqs'] = 'lqs'   头信息\n    return rsp\n方法二:\n    return 显示字符串, 状态码, 头信息\n ```\n#### json\n```\n方法一、import json\n    dic = {\"name\": \"lqs\", \"age\": 12}\n    json_str = json.dumps(dic)\n    print(type(json_str))\n    print(json_str)\n    dic_str = json.loads(json_str)\n    print(type(dic_str))\n    print(dic_str)\njson.dumps():字典转json字符串\njson.loads():json字符串转字典\n\n方法二、从flask中导入jsonify\n    return jsonify(dic) ：将字典转成json字符串，并且自动设置头信息\n```\n### cookie的读写\n```\n读写和django一样，都是通过response写入，通过request读取\n在有关cookie的操作中，都要 app.config[\"SECRET_KEY\"] = xxxxxx\n    导入:from flask import make_response\n    实例化:resp = make_response(显示字符串)\n    设置:resp.set_cookie(\"lqs\", \"Flask\", max_age=3600)\n    读取:request.cookies.get('lqs')\n    删除:resp.delete_cookie('lqs')\n```\n\n### session的读写\n```\n导入: from flask import session\n设置: session[key] = value\n读取: session.get(key)\n```\n\n### 钩子\n```\n类似于django中的中间件\n在请求的时候使用，不是任何请求都会调用，是调用到视图函数的时候，在之前或者之后进行操作\n@app.before_first_request : 第一次请求之前调用\n@app.before_request : 每次请求之前调用\n@app.after_request : 每次请求之后调用（视图函数没有出错的情况）\n@app.teardown_request : 每次请求之后调用（不论是否出错都会调用）\n\n@app.after_request : 对应的视图函数必须带一个参数，用来接收视图函数的返回值，也就是接收在页面上现实的东西\n@app.teardown_request : 对应的视图函数必须带一个参数，用来接收视图函数的返回值，也就是接收在页面上现实的东西\n```\n### g对象\n```\nfrom flask import g\ng对象中保存的数据，在一次请求中的，多个函数中可以使用\n使用:\n    g.key = value:存\n    xx = g.key:取\n```\n### flask_script扩展(实现shell代码),这样子可以和django一样，runserver\n```\npip install Flask-Script\nfrom flask_script import Manager\nmanager = Manager(flask应用名)\nmanager.run()\n```\n### flask使用模板文件\n```\nfrom flask import render_template\nreturn render_template(\"html模板\", key=value, key=value)  或者    return render_template(\"html模板\", **字典名（组织之后的上下文）)\n在html模板文件中，可以使用过滤器:使用方法:{{value | 过滤器}}如safe就表示转义\n```\n### flask中html模板转义\n```\n使用方法: {{ 处理对象 | 过滤器 }}\n常用过滤器:\n    safe : 禁用转义\n    capitalize : 变量值的首字母转换成大写其余小写\n    lower : 全部转换为小写\n    upper : 全部转换为大写\n    title : 每个单词首字母大写\n    trim  : 去除首尾空格\n    reverse : 字符串反转\n    format : 格式化输出\n    striptags : 渲染之前把所有的html标签去掉\n    first : 取出列表中的第一个元素\n    last : 取出列表中的最后一个元素\n    length : 获取列表的长度\n    sum : 列表数据求和\n    sort : 列表排序\n自定义过滤器:\n    在flask代码中定义\n    第一种方式(函数):\n        定义一个过滤器函数\n        返回值就是过滤后的数据\n        app.add_template_filter(函数名, 过滤器名)就可以注册这个过滤器\n        然后在html模板中使用\n    第二种方式(装饰器:\n        定义一个过滤器函数\n        返回值就是过滤后的数据\n        加装饰器:@app.template_filter(过滤器名)\n        然后在html模板中使用\n\n```\n### flask使用Flask-WTF\n```\n可以在服务器端(创建表单模型)校验表单数据，可以设置csrf攻击的关闭\npip install Flask-WTF\nfrom flask_wtf import FlaskForm : 这个模块让类继承之后就可以实现创建表单模型\nfrom wtforms import StringField, PasswordField, SubmitField : 这个wtforms模块中的方法都是关于表单中的各个控件的类型，这里没有写全面\nfrom wtforms.validators import DataRequired, EqualTo : wtforms下面的validators模块中的方法就是一些校验规则\n\n说明: 在flask中定义的表单模型作用有两个,首先，第一个作用就是不用用户再去自己打表单，可以将表单模型传到模板中生成表单，第二个作用就是验证数据，两个作用是区分开的\n\n定义表单模型类:\n    class LoginForm(FlaskForm):\n    '''\n        自定义的注册表单抽象类\n            label标签表示设置名称,用中文就使用u\"xx\"\n            validators表示验证数据，是一个列表类型\n            DataRequired表示必须输入，有一个参数，表示验证失败的时候显示文本\n            EqualTo表示和谁一样，有连个参数，第一个填写和谁一样，第二个填写验证失败的显示文本\n    '''\n        user_name = StringField(label=u\"用户名\", validators=[DataRequired(\"用户名不能为空\")])\n        password = PasswordField(label=r\"密码\", validators=[DataRequired(\"密码不能为空\")])\n        password2 = PasswordField(label=r\"确认密码\", validators=[DataRequired(\"确认密码不能为空\"), EqualTo(\"password\", \"两次密码不一致\")])\n        submit = SubmitField(label=u\"提交\")\n\n\n        @app.route(\"/login\", methods=[\"POST\", \"GET\"])\n        def login():\n            '''创建表单对象'''\n            form = LoginForm()\n            # 判断form中的数据是否合理\n            # 如果form中的数据完全满足验证，则返回真，否则返回假\n            if form.validate_on_submit():\n                uname = form.user_name.data\n                pwd = form.password.data\n                pwd2 = form.password2.data\n                print(uname, pwd, pwd2)\n                session[\"username\"] = uname\n                url = url_for(\"index\")\n                return redirect(url)\n            return render_template(\"login.html\", form=form)\n\n\n在html模板中生成表单:\n     <form  method=\"post\">\n        {{ form.csrf_token}}\n        {{ form.user_name.label }} {{ form.user_name }}<br>\n        {% for msg in form.user_name.errors %}\n        <p>{{ msg }}</p>\n        {% endfor %}\n\n        {{ form.password.label }} {{ form.password }}<br>\n        {% for msg in form.password.errors %}\n        <p>{{ msg }}</p>\n        {% endfor %}\n\n        {{ form.password2.label }} {{ form.password2 }}<br>\n        {% for msg in form.password2.errors %}\n        <p>{{ msg }}</p>\n        {% endfor %}\n\n        <p>{{ form.submit }}</p>\n\n     </form>\n\n```\n### 宏的定义和使用\n```\n在同一个html中定义和使用:\n    没有参数:\n        定义:\n        {% macro input() %}\n         <input type=\"text\" name=\"\" value=\"\" size=\"30\">\n        {% endmacro %}\n        使用:\n        {{ input() }}\n    有参数:\n    定义:\n    {% macro input(type,name,size) %}\n     <input type={{type}} name={{name}} value=\"\" size={{size}}>\n    {% endmacro %}\n    使用:\n    {{ input('text', 'username', 40) }}\n\n在不同html中定义和使用:\n    没有参数:\n        定义在macro2.html中:\n        {% macro input() %}\n         <input type=\"text\" name=\"\" value=\"\" size=\"30\">\n        {% endmacro %}\n        在macro。html使用:\n        {% import \"macro2.html\" as 别名 %}\n        {{ 别名.input() }}\n\n```\n### 模板继承\n```\n和django中的模板继承一样: {% extend \"模板名\" %}  使用 {% block xx %} {% endblock xx %}\n```\n\n### flask中一些特殊的方法\n```\n有些方法和变量不需要传递也可以在模板中直接使用\nconfig中的方法\nrequest中的方法\nurl_for中的方法\n模板的闪现:\n    闪现就是表示有的信息，只是出现一次\n    在flask中:from flask import flash\n            在视图中使用flash(xxx)来添加信息，可以添加很多条\n    在模板中:\n        {% for x in get_flashed_messages() %}\n        {{ x }}\n        {% endfor %}\n```\n### flask链接数据库\n```\npip install flask-sqlalchemy  模型类到sql语句的转换，再将结果转换为模型类对象\npip install flask-mysqldb   数据库驱动\nfrom flask_sqlalchemy import SQLAlchemy  可以创建数据库对象\n配置:\n    app.config['SQLALCHEMY_DATABASE_URI'] = \"mysql://root:123456@127.0.0.1:3306/msfood\"\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True   # 配置跟踪,数据库和模型类同步\n创建数据库sqlalchemy工具对象,就可以使用数据库了\n    db = SQLAlchemy(app)\n\n\n创建模型类\nclass Role(db.Model):\n    '''身份表'''\n    __tablename__ = \"tbl_roles\"  # 指明表名\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(32), unique=True)\n    users = db.relationship(\"User\", backref=\"role\")\n     def __repr__(self):\n        '''补充方法,可以让显示对象的时候更直观,类似于__str__方法'''\n        return f'{self.users}'\nclass User(db.Model):\n    '''用户表'''\n    __tablename__ = \"tbl_users\"  # 指明数据库的表名\n    id = db.Column(db.Integer, primary_key=True)  # 主键，自动递增\n    name = db.Column(db.String(64), unique=True)\n    email = db.Column(db.String(128), unique=True)\n    password = db.Column(db.String(128))\n    role_id = db.Column(db.Integer, db.ForeignKey(\"tbl_roles.id\"))\n\n生成数据表:\n    *第一次生成的时候清除所有数据:\n         db.drop_all()\n    创建所有表\n        db.create_all()\n\n说明:\n    创建表的时候，和底层相关，只要是表中的一行，都是有关底层的，用的都是真实的表的名字\n    users = db.relationship(\"User\", backref=\"role\"): 这个语句就是表示和底层无关，只和flask中的对象有关，User就是一个模型对象\n        users表和roles表是有关联的（外键）,那么db.relationship就可以让两个表相互拿东西，表示从User模型类中拿出和Role模型有关联的数据\n        backref表示没有定义relationship的对方表中，也可以反推拿出和User模型有关的Role模型的数据\n        使用方法:\n            在Role模型:role.users\n            在user模型中:user.role\n\n添加数据:\n    创建对象:xx = 模型(属性=值，属性=值)\n    session记录对象任务:db.session.add(xx),添加一条数据，db.session.add_all(),添加多条数据\n    提交任务到数据库:db.session.commit()\n```\n### sqlalchemy查询\n```\n用模型类来查询\n模型类.query.all():查询所有数据，返回的是一个列表，可以取出某一个对象，然后读取属性值\n模型类.query.first():返回第一条记录\n模型类.query.get(主键的id):根据主键id获取对象\n模型类.query.filter_by(字段=xx,字段==xx).all():获取满足条件的所有数据,条件是与\n模型类.query.filter(模型类.字段==xx,模型类.字段==xx).all():拿出满足条件的所有数据，条件是与\n模型类.query.filter(or_(模型类.字段==xx,模型类.字段.endswith(xxx))).all():拿出满足条件的所有数据，条件是或，使用或必须导入from sqlalchemy import or_\n模型类.query.filter(条件).offset(2).limit(3).order_by(模型类.字段.desc()).all():返回满足条件并且忽略前两条数据，取出三条数据然后降序排列的数据，每一个部分都可以单独使用\ndb.session.query(模型类.字段, func.count(模型类.字段)).group_by(模型类.字段).all():分组查询，from sqlalchemy import func,func.聚合函数(属性),就可以查出来\n```\n\n#### sqlalchemy修改\n```\n模型类.query.filter(条件).update({字段名:值,字段名:值,字段名:值})\ndb.session.commit()\n```\n#### sqlalchemy删除\n```\n xx = 模型类.query.get(x)\n db.session.delete(xx)\n db.session.commit()\n```\n\n#### flask中和django一样使用迁移的方式\n```\npip install flask-migrate\nfrom flask_script import Manager\nfrom flask_migrate import Migrate, MigrateCommand\n\ndb = SQLAlchemy(app)\n\n创建flask脚本管理工具\nmanager = Manager(app)\n创建数据库迁移工具对象\nMigrate(app, db)\n向manager对象中添加数据的操作命令\nmanager.add_command(\"操作的名字\", MigrateCommand)\n\nmain中:\n    manager.run()\n终端中:\n    python3 xxx.py 操作的名字 init  : 让他初始化一下，自动创文件夹\n    python3 xxx.py 操作的名字 migrate -m \"版本说明信息\" : 生成迁移文件（版本说明可以不要），同价与django中的makemigrations\n    多次migrate之后需要更新数据库:python3 xxx.py 操作的名字 upgrade，可以升级同步\n    python3 xxx.py 操作的名字 history : 查看历史修改\n    python3 xxx.py 操作的名字 downgrade 版本编号 : 版本回退\n\n```\n\n### flask发送邮件\n```\npip install flask-mail\nfrom flask_mail import Mail, Message\napp = Flask(__name__)\n\napp.config.update(\n    DEBUG=True,\n    MAIL_SERVER='smtp.qq.com',\n    MAIL_PROT=465,\n    MAIL_USE_TLS=True,\n    MAIL_USERNAME='749062870@qq.com',\n    MAIL_PASSWORD='kttumcufpqasbcii',\n)\n\n # sender发送方,recipients接收方列表\n    mail = Mail() : 创建mail对象\n    mail.init_app(app) : 初始化mail对象\n    msg = Message(\"傻逼\", sender=\"749062870@qq.com\", recipients=[\"2807175480@qq.com\"]) : 设置邮件消息的邮件头\n    msg.body = \"傻逼\"  : 设置邮件的正文\n    mail.send(msg) : 发送邮件\n```\n### 蓝图（Blueprint）\n```\n之前写的都在一个py文件中\n蓝图就是分割各个块\n将视图写在其他的py文件中，那么不用再给写在外面的视图加装饰器，可以在有app的py文件中导入，然后通过app.route(\"路径\")(视图函数)\n\n蓝图的正解:\n    '''\n        蓝图和django中的各个应用差不多,一个蓝图自成一块，在主窗口中注册进app里面就可以使用\n        使用方法:\n            创建一个应用目录，再添加一个__init__.py让这个目录成为一个可以调动的包，再__init__.py中定义好蓝图,再到视图中导入这个蓝图，就可以使用，最后再视图使用之后，再到__init__.py中\n            导入视图中使用了蓝图的视图函数。\n            蓝图再使用模板文件和静态文件的时候，和主app不同，主app有默认的配置，而蓝图中没有，需要再定义蓝图的时候手动设置，和主app的设置方法是一样的\n            蓝图在没有定义静态文件目录和模板文件目录的时候，默认是使用主app的，就算配置可静态目录和模板目录，蓝图也是先去主app的静态目录和模板目录查找，没有找到在回到自己的里面去找，这个时候，就是主app的优先级大于蓝图\n            在视图中使用蓝图:\n                1、在__init__.py中from flask import Blueprint\n                2、在__init__.py中定义蓝图,xx = Blueprint(\"蓝图名\",__name__)\n                3、导入蓝图\n                4、用蓝图装饰，和主app装饰视图一摸一样的\n                5、在__init__.py中导入使用了蓝图的视图函数（导入到蓝图之下）\n                6、在主app的文件中注册蓝图:app.register_blueprint(蓝图, url_prefix=\"/lqs\")，url_prefix表示前缀\n    '''\n```\n### 单元测试\n```\n在flask中使用单元测试的时候，千万不要动源代码，重新写个测试文件\nimport unittest\n导入要测试的flask代码文件\n创建测试类，继承unittest.TestCase\n定义好测试函数\nimport unittest\nimport json\nfrom flaskDay14 import Test\n\nclass Index(unittest.TestCase):\n    def setUp(self):\n        # 设置flask工作在测试模式下，在测试出错的时候会给出具体错误行\n        Test.app.testing = True\n        # 模拟flask客户端,setUp中的代码会在所有函数之前调用\n        self.client = Test.app.test_client()\n    def test_index(self):\n        # 模拟请求返回数据\n        ret = self.client.post(\"/index\", data={\"username\":\"lqs\", \"password\":\"lqs\"})\n        # 拿到数据\n        resp = ret.data\n        # 装成字典\n        resp = json.loads(resp)\n        # 断言\n        self.assertIn(\"code\", resp)\n        self.assertEqual(resp[\"code\"], 2)\n\n\nif __name__ == '__main__':\n    # 测试\n    unittest.main()\n\n对所有的测试都可以使用\n```","source":"_posts/Flask基础.md","raw":"---\ntitle: Flask基础\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 16:04:52\npassword:\nsummary: flask学习笔记\ntags: flask\ncategories: Python\n---\n# Flask\n## `__name__`对象说明\n\n`__name__`返回的就是当前的模块名字\n\n`__name__`如果在本文件中使用的话，那么就是`__main__`\n\n`__name__`如果本文件被导入到别的文件中使用的话，那么就是模块的名字\n在文件中，被调用的时候，永远不可能等于`__main__`\n\n\n\n## Flask\n创建Flask对象: 名字 = Flask(一个魔法值(以这个为根目录)),括号里面的参数，就表示以这个参数所在的模块为根目录，默认这个目录中的static为静态目录，templates为模板目录\n\n创建视图: 等于创建一个函数，要显示给浏览器的数据，直接return\n\n路径配置: 给视图函数加装饰器,格式: app.route('路径')\n\n运行flask: app.run(),flask的参数:\n```python\n app = Flask(__name__,  # 创建flask的应用对象，__name__返回的就是当前的模块名字,表示以什么为根目录\n    static_url_path='/python',  # 访问静态的url前缀，不设置的话默认值是static\n    static_folder='static',  # 静态文件的目录，默认就是static\n    template_folder='templates',  # 模板文件的目录，默认的是templates\n    )\n```\n### flask的配置\n >   flask没有Django那种的专门的配置文件，但是可以通过以下的三种方式来配置\n > -   1、使用配置文件:\n     -   1、创建一个配置文件xxx.cfg\n     -  2、app.config.from_pyfile(文件的路径)\n> -    2、使用配置对象:\n     -   1、创建一个类，将配置写入\n     -   2、app.config.from_object(类名)\n> -    3、直接配置\n    -    app.config['DEBUG'] = True\n     -   app.config.update(key=v1,k2=v2):一次性配置多个，如果已经存在，那么表示更新\n\n### 获取配置中的参数\n>    在flask中，配置中除了可以存储flask的配置，也可以存储开发者放的一些数据\n > -   获取方式一: app.config.get('key')\n> -    获取方式二: current_app.config.get('key'),这是一个模块，也在flask模块中导入，current_app等价于app,有的时候我们拿不到app，所以这个模块可以替代\n\n### app.run()的使用\n >   app.run(host='x.x.x.x', port=xxx, debug=True(False)) ,app.run(host='0.0.0.0', port=xxx)是万能的\n\n### 查看路由表\n>  和Django相比，Flask没有一个直观的路由表，而Django却有urls.py文件可以查看路由表\n>  \n >   Flask查看路由表: app.url_map，这个方法就可以查看flask的路由表，默认的有static的路由记录，还可以查看请求方式\n >   \n  >  如果某些视图只能用某些请求方式来访问，那么方法就是:@app.route('路径', methods=[请求方式列表])\n  >  \n >   当有多个视图对应同一个url地址的时候，解决方法是：要么修改url,要么修改请求方式\n >   \n >   当有多个url地址对应一个视图函数的时候(给视图函数多装几个装饰器)，那么就是说这多个url都可以访问这个视图\n >   \n >   重定向:从flask中导入redirect模块，就可以实现重定向(跳转，两次请求，重定向状态码302),用法:return redirect(url地址)\n >   \n >   反向解析: 从flask中导入url_for模块,就可以实现反向解析，用法: url = url_for('视图函数的名字', 参数列表)\n\n#### url带参数\n```text\n@app.route('/路径/<转换器类型:参数名>'):\n    已经实现的转换器类型: int , float , path,如:@app.route('/index/<int:id>'),在访问的时候:127.0.0.1:5000://index/123就可以访问.\n    不加转换器类型就是表示匹配普通的字符串（除了/）:@app.route('/路径/<参数名>')\n    int转换器类型，匹配整数\n    float转换器类型，匹配小数\n    path转换器类型，匹配字符串，但是包括/\n        @app.route('/goods/<int:id>')\n        def goods_detail(id):\n                '''定义商品视图函数'''\n            return f'goods detail page{id}'\n\n    自定义转换器(三步):\n        1、定义自己的转换器:\n            导入from werkzeug.routing import BaseConverter。\n            定义一个转换器类，使其继承BaseConverter.\n        2、将自定义的转换器添加到flask的应用中:\n            app.url_map.converters['转换器名'] = 类名\n        3、使用:\n            @app.route('/路径/<转换器类型:参数名>')\n```\n### 定义万能转换器\n```text\n说明一点:转换器也可以跟参数（re）: @app.route('/路径/<转换器类型(参数):参数名>')\n方式一、\n    class ReConverter(BaseConverter):\n        '''\n            re万能转换器\n            创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n            在视图函数使用的时候，可以跟参数，一个正则\n            工作原理:\n                在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n        '''\n        # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n        def __init__(self, url_map, regex):\n            super().__init__(url_map)\n            # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n            # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n            self.regex = regex\n    # 加到应用中\n    app.url_map.converters['re'] = ReConverter\n    @app.route(\"/goods/<re(r'1[34578]\\d{9}'):id>\")\n    def goods_detail(id):\n        '''定义商品视图函数'''\n        return f'goods detail page{id}'\n方式二、\n    class ReConverter(BaseConverter):\n        '''\n            re万能转换器\n            创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n            在视图函数使用的时候，可以跟参数，一个正则\n            工作原理:\n                在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n        '''\n        # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n        def __init__(self, url_map):\n            super().__init__(url_map)\n            # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n            # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n            self.regex = r'1[34578]\\d{9}'\n    # 加到应用中\n    app.url_map.converters['re'] = ReConverter\n    @app.route(\"/goods/<re:id>\")\n    def goods_detail(id):\n        '''定义商品视图函数'''\n        return f'goods detail page{id}'\n```\n\n### 高级的转换器应用\n```text\nclass ReConverter(BaseConverter):\n    '''\n        re万能转换器\n        创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n        在视图函数使用的时候，可以跟参数，一个正则\n        工作原理:\n            在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n    '''\n\n    # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n    def __init__(self, url_map):\n        super().__init__(url_map)\n        # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n        # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n        self.regex = r'1[34578]\\d{9}'\n\n    '''\n        to_python和to_url都是父类中的方法:\n            to_python:在匹配成功以后，请求网址带来的参数会交给to_python做出处理，返回的结果为视图函数的参数\n            to_url:在使用重定向(url_for)的时候使用，url(\"视图名\",参数)\n            使用重定向的时候，被定向的视图函数如果有参数需要匹配，那么，在重定向的时候，在使用url_for()的时候，就会去匹配一次被定向视图使用的转换器，在匹配成功的同时调用to_url方法\n            在to_url中处理以后，会交给to_python处理\n\n    '''\n\n    def to_python(self, value):\n        return value\n\n    def to_url(self, value):\n        return '13443218888'\n\n\n# 加到应用中\napp.url_map.converters['re'] = ReConverter\n\n\n@app.route(\"/goods/<re:id>\")\ndef goods_detail(id):\n    '''定义商品视图函数'''\n    return f'goods detail page{id}'\n\n\n@app.route(\"/index\")\ndef index():\n    url = url_for(\"goods_detail\", id=13412344321)\n    return redirect(url)\n```\n\n## Request对象\n```text\n从flask中导入request和Response\nrequest中常用的属性:\n    data:获取请求的数据，并转换为字符串，request.data\n    form:获取请求中的表单数据,request.form.get()，获取一对一,request.form.getlist()，获取一对多的数据\n    args:获取url中的参数(http:x.x.x.x:xxx/xxx?city=chengdu)，\n    cookies:获取到cookie，request.cookies.get()\n    headers:获取请求头中的报文:request.headers\n    method:获取请求方式:request.method\n    url:获取请求的url:request.url\n    files:获取上传的文件:  if request.method == 'POST':\n                            file = request.files.get('pic')\n                            file.save(f'./img/{file.filename}')\n    path: 拿到浏览器请求的地址（视图）\n```\n\n### abort\n```\n从flask中导入abort\n无条件终止视图函数的执行，并返回给前端特定的信息\n用法一、\n    abort（状态码）\n用法二、\n    re = Response(\"login defete\")\n    abort(re)\n```\n### 自定义错误信息\n```\n用户访问的页面不错在的时候，定义一个独立的视图,用@app.errorheader(404)来装饰\n固定写法:\n    @app.errorhandler(404)\n    def header_error(err):\n         return '没有'\n```\n### 设置响应信息的方法\n```\n从flask中导入make_response\n方法一:\n    使用:\n    rsp = make_response(显示的字符串)\n    rsp.status = '999 lqs'  状态码\n    rsp.headers['lqs'] = 'lqs'   头信息\n    return rsp\n方法二:\n    return 显示字符串, 状态码, 头信息\n ```\n#### json\n```\n方法一、import json\n    dic = {\"name\": \"lqs\", \"age\": 12}\n    json_str = json.dumps(dic)\n    print(type(json_str))\n    print(json_str)\n    dic_str = json.loads(json_str)\n    print(type(dic_str))\n    print(dic_str)\njson.dumps():字典转json字符串\njson.loads():json字符串转字典\n\n方法二、从flask中导入jsonify\n    return jsonify(dic) ：将字典转成json字符串，并且自动设置头信息\n```\n### cookie的读写\n```\n读写和django一样，都是通过response写入，通过request读取\n在有关cookie的操作中，都要 app.config[\"SECRET_KEY\"] = xxxxxx\n    导入:from flask import make_response\n    实例化:resp = make_response(显示字符串)\n    设置:resp.set_cookie(\"lqs\", \"Flask\", max_age=3600)\n    读取:request.cookies.get('lqs')\n    删除:resp.delete_cookie('lqs')\n```\n\n### session的读写\n```\n导入: from flask import session\n设置: session[key] = value\n读取: session.get(key)\n```\n\n### 钩子\n```\n类似于django中的中间件\n在请求的时候使用，不是任何请求都会调用，是调用到视图函数的时候，在之前或者之后进行操作\n@app.before_first_request : 第一次请求之前调用\n@app.before_request : 每次请求之前调用\n@app.after_request : 每次请求之后调用（视图函数没有出错的情况）\n@app.teardown_request : 每次请求之后调用（不论是否出错都会调用）\n\n@app.after_request : 对应的视图函数必须带一个参数，用来接收视图函数的返回值，也就是接收在页面上现实的东西\n@app.teardown_request : 对应的视图函数必须带一个参数，用来接收视图函数的返回值，也就是接收在页面上现实的东西\n```\n### g对象\n```\nfrom flask import g\ng对象中保存的数据，在一次请求中的，多个函数中可以使用\n使用:\n    g.key = value:存\n    xx = g.key:取\n```\n### flask_script扩展(实现shell代码),这样子可以和django一样，runserver\n```\npip install Flask-Script\nfrom flask_script import Manager\nmanager = Manager(flask应用名)\nmanager.run()\n```\n### flask使用模板文件\n```\nfrom flask import render_template\nreturn render_template(\"html模板\", key=value, key=value)  或者    return render_template(\"html模板\", **字典名（组织之后的上下文）)\n在html模板文件中，可以使用过滤器:使用方法:{{value | 过滤器}}如safe就表示转义\n```\n### flask中html模板转义\n```\n使用方法: {{ 处理对象 | 过滤器 }}\n常用过滤器:\n    safe : 禁用转义\n    capitalize : 变量值的首字母转换成大写其余小写\n    lower : 全部转换为小写\n    upper : 全部转换为大写\n    title : 每个单词首字母大写\n    trim  : 去除首尾空格\n    reverse : 字符串反转\n    format : 格式化输出\n    striptags : 渲染之前把所有的html标签去掉\n    first : 取出列表中的第一个元素\n    last : 取出列表中的最后一个元素\n    length : 获取列表的长度\n    sum : 列表数据求和\n    sort : 列表排序\n自定义过滤器:\n    在flask代码中定义\n    第一种方式(函数):\n        定义一个过滤器函数\n        返回值就是过滤后的数据\n        app.add_template_filter(函数名, 过滤器名)就可以注册这个过滤器\n        然后在html模板中使用\n    第二种方式(装饰器:\n        定义一个过滤器函数\n        返回值就是过滤后的数据\n        加装饰器:@app.template_filter(过滤器名)\n        然后在html模板中使用\n\n```\n### flask使用Flask-WTF\n```\n可以在服务器端(创建表单模型)校验表单数据，可以设置csrf攻击的关闭\npip install Flask-WTF\nfrom flask_wtf import FlaskForm : 这个模块让类继承之后就可以实现创建表单模型\nfrom wtforms import StringField, PasswordField, SubmitField : 这个wtforms模块中的方法都是关于表单中的各个控件的类型，这里没有写全面\nfrom wtforms.validators import DataRequired, EqualTo : wtforms下面的validators模块中的方法就是一些校验规则\n\n说明: 在flask中定义的表单模型作用有两个,首先，第一个作用就是不用用户再去自己打表单，可以将表单模型传到模板中生成表单，第二个作用就是验证数据，两个作用是区分开的\n\n定义表单模型类:\n    class LoginForm(FlaskForm):\n    '''\n        自定义的注册表单抽象类\n            label标签表示设置名称,用中文就使用u\"xx\"\n            validators表示验证数据，是一个列表类型\n            DataRequired表示必须输入，有一个参数，表示验证失败的时候显示文本\n            EqualTo表示和谁一样，有连个参数，第一个填写和谁一样，第二个填写验证失败的显示文本\n    '''\n        user_name = StringField(label=u\"用户名\", validators=[DataRequired(\"用户名不能为空\")])\n        password = PasswordField(label=r\"密码\", validators=[DataRequired(\"密码不能为空\")])\n        password2 = PasswordField(label=r\"确认密码\", validators=[DataRequired(\"确认密码不能为空\"), EqualTo(\"password\", \"两次密码不一致\")])\n        submit = SubmitField(label=u\"提交\")\n\n\n        @app.route(\"/login\", methods=[\"POST\", \"GET\"])\n        def login():\n            '''创建表单对象'''\n            form = LoginForm()\n            # 判断form中的数据是否合理\n            # 如果form中的数据完全满足验证，则返回真，否则返回假\n            if form.validate_on_submit():\n                uname = form.user_name.data\n                pwd = form.password.data\n                pwd2 = form.password2.data\n                print(uname, pwd, pwd2)\n                session[\"username\"] = uname\n                url = url_for(\"index\")\n                return redirect(url)\n            return render_template(\"login.html\", form=form)\n\n\n在html模板中生成表单:\n     <form  method=\"post\">\n        {{ form.csrf_token}}\n        {{ form.user_name.label }} {{ form.user_name }}<br>\n        {% for msg in form.user_name.errors %}\n        <p>{{ msg }}</p>\n        {% endfor %}\n\n        {{ form.password.label }} {{ form.password }}<br>\n        {% for msg in form.password.errors %}\n        <p>{{ msg }}</p>\n        {% endfor %}\n\n        {{ form.password2.label }} {{ form.password2 }}<br>\n        {% for msg in form.password2.errors %}\n        <p>{{ msg }}</p>\n        {% endfor %}\n\n        <p>{{ form.submit }}</p>\n\n     </form>\n\n```\n### 宏的定义和使用\n```\n在同一个html中定义和使用:\n    没有参数:\n        定义:\n        {% macro input() %}\n         <input type=\"text\" name=\"\" value=\"\" size=\"30\">\n        {% endmacro %}\n        使用:\n        {{ input() }}\n    有参数:\n    定义:\n    {% macro input(type,name,size) %}\n     <input type={{type}} name={{name}} value=\"\" size={{size}}>\n    {% endmacro %}\n    使用:\n    {{ input('text', 'username', 40) }}\n\n在不同html中定义和使用:\n    没有参数:\n        定义在macro2.html中:\n        {% macro input() %}\n         <input type=\"text\" name=\"\" value=\"\" size=\"30\">\n        {% endmacro %}\n        在macro。html使用:\n        {% import \"macro2.html\" as 别名 %}\n        {{ 别名.input() }}\n\n```\n### 模板继承\n```\n和django中的模板继承一样: {% extend \"模板名\" %}  使用 {% block xx %} {% endblock xx %}\n```\n\n### flask中一些特殊的方法\n```\n有些方法和变量不需要传递也可以在模板中直接使用\nconfig中的方法\nrequest中的方法\nurl_for中的方法\n模板的闪现:\n    闪现就是表示有的信息，只是出现一次\n    在flask中:from flask import flash\n            在视图中使用flash(xxx)来添加信息，可以添加很多条\n    在模板中:\n        {% for x in get_flashed_messages() %}\n        {{ x }}\n        {% endfor %}\n```\n### flask链接数据库\n```\npip install flask-sqlalchemy  模型类到sql语句的转换，再将结果转换为模型类对象\npip install flask-mysqldb   数据库驱动\nfrom flask_sqlalchemy import SQLAlchemy  可以创建数据库对象\n配置:\n    app.config['SQLALCHEMY_DATABASE_URI'] = \"mysql://root:123456@127.0.0.1:3306/msfood\"\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True   # 配置跟踪,数据库和模型类同步\n创建数据库sqlalchemy工具对象,就可以使用数据库了\n    db = SQLAlchemy(app)\n\n\n创建模型类\nclass Role(db.Model):\n    '''身份表'''\n    __tablename__ = \"tbl_roles\"  # 指明表名\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(32), unique=True)\n    users = db.relationship(\"User\", backref=\"role\")\n     def __repr__(self):\n        '''补充方法,可以让显示对象的时候更直观,类似于__str__方法'''\n        return f'{self.users}'\nclass User(db.Model):\n    '''用户表'''\n    __tablename__ = \"tbl_users\"  # 指明数据库的表名\n    id = db.Column(db.Integer, primary_key=True)  # 主键，自动递增\n    name = db.Column(db.String(64), unique=True)\n    email = db.Column(db.String(128), unique=True)\n    password = db.Column(db.String(128))\n    role_id = db.Column(db.Integer, db.ForeignKey(\"tbl_roles.id\"))\n\n生成数据表:\n    *第一次生成的时候清除所有数据:\n         db.drop_all()\n    创建所有表\n        db.create_all()\n\n说明:\n    创建表的时候，和底层相关，只要是表中的一行，都是有关底层的，用的都是真实的表的名字\n    users = db.relationship(\"User\", backref=\"role\"): 这个语句就是表示和底层无关，只和flask中的对象有关，User就是一个模型对象\n        users表和roles表是有关联的（外键）,那么db.relationship就可以让两个表相互拿东西，表示从User模型类中拿出和Role模型有关联的数据\n        backref表示没有定义relationship的对方表中，也可以反推拿出和User模型有关的Role模型的数据\n        使用方法:\n            在Role模型:role.users\n            在user模型中:user.role\n\n添加数据:\n    创建对象:xx = 模型(属性=值，属性=值)\n    session记录对象任务:db.session.add(xx),添加一条数据，db.session.add_all(),添加多条数据\n    提交任务到数据库:db.session.commit()\n```\n### sqlalchemy查询\n```\n用模型类来查询\n模型类.query.all():查询所有数据，返回的是一个列表，可以取出某一个对象，然后读取属性值\n模型类.query.first():返回第一条记录\n模型类.query.get(主键的id):根据主键id获取对象\n模型类.query.filter_by(字段=xx,字段==xx).all():获取满足条件的所有数据,条件是与\n模型类.query.filter(模型类.字段==xx,模型类.字段==xx).all():拿出满足条件的所有数据，条件是与\n模型类.query.filter(or_(模型类.字段==xx,模型类.字段.endswith(xxx))).all():拿出满足条件的所有数据，条件是或，使用或必须导入from sqlalchemy import or_\n模型类.query.filter(条件).offset(2).limit(3).order_by(模型类.字段.desc()).all():返回满足条件并且忽略前两条数据，取出三条数据然后降序排列的数据，每一个部分都可以单独使用\ndb.session.query(模型类.字段, func.count(模型类.字段)).group_by(模型类.字段).all():分组查询，from sqlalchemy import func,func.聚合函数(属性),就可以查出来\n```\n\n#### sqlalchemy修改\n```\n模型类.query.filter(条件).update({字段名:值,字段名:值,字段名:值})\ndb.session.commit()\n```\n#### sqlalchemy删除\n```\n xx = 模型类.query.get(x)\n db.session.delete(xx)\n db.session.commit()\n```\n\n#### flask中和django一样使用迁移的方式\n```\npip install flask-migrate\nfrom flask_script import Manager\nfrom flask_migrate import Migrate, MigrateCommand\n\ndb = SQLAlchemy(app)\n\n创建flask脚本管理工具\nmanager = Manager(app)\n创建数据库迁移工具对象\nMigrate(app, db)\n向manager对象中添加数据的操作命令\nmanager.add_command(\"操作的名字\", MigrateCommand)\n\nmain中:\n    manager.run()\n终端中:\n    python3 xxx.py 操作的名字 init  : 让他初始化一下，自动创文件夹\n    python3 xxx.py 操作的名字 migrate -m \"版本说明信息\" : 生成迁移文件（版本说明可以不要），同价与django中的makemigrations\n    多次migrate之后需要更新数据库:python3 xxx.py 操作的名字 upgrade，可以升级同步\n    python3 xxx.py 操作的名字 history : 查看历史修改\n    python3 xxx.py 操作的名字 downgrade 版本编号 : 版本回退\n\n```\n\n### flask发送邮件\n```\npip install flask-mail\nfrom flask_mail import Mail, Message\napp = Flask(__name__)\n\napp.config.update(\n    DEBUG=True,\n    MAIL_SERVER='smtp.qq.com',\n    MAIL_PROT=465,\n    MAIL_USE_TLS=True,\n    MAIL_USERNAME='749062870@qq.com',\n    MAIL_PASSWORD='kttumcufpqasbcii',\n)\n\n # sender发送方,recipients接收方列表\n    mail = Mail() : 创建mail对象\n    mail.init_app(app) : 初始化mail对象\n    msg = Message(\"傻逼\", sender=\"749062870@qq.com\", recipients=[\"2807175480@qq.com\"]) : 设置邮件消息的邮件头\n    msg.body = \"傻逼\"  : 设置邮件的正文\n    mail.send(msg) : 发送邮件\n```\n### 蓝图（Blueprint）\n```\n之前写的都在一个py文件中\n蓝图就是分割各个块\n将视图写在其他的py文件中，那么不用再给写在外面的视图加装饰器，可以在有app的py文件中导入，然后通过app.route(\"路径\")(视图函数)\n\n蓝图的正解:\n    '''\n        蓝图和django中的各个应用差不多,一个蓝图自成一块，在主窗口中注册进app里面就可以使用\n        使用方法:\n            创建一个应用目录，再添加一个__init__.py让这个目录成为一个可以调动的包，再__init__.py中定义好蓝图,再到视图中导入这个蓝图，就可以使用，最后再视图使用之后，再到__init__.py中\n            导入视图中使用了蓝图的视图函数。\n            蓝图再使用模板文件和静态文件的时候，和主app不同，主app有默认的配置，而蓝图中没有，需要再定义蓝图的时候手动设置，和主app的设置方法是一样的\n            蓝图在没有定义静态文件目录和模板文件目录的时候，默认是使用主app的，就算配置可静态目录和模板目录，蓝图也是先去主app的静态目录和模板目录查找，没有找到在回到自己的里面去找，这个时候，就是主app的优先级大于蓝图\n            在视图中使用蓝图:\n                1、在__init__.py中from flask import Blueprint\n                2、在__init__.py中定义蓝图,xx = Blueprint(\"蓝图名\",__name__)\n                3、导入蓝图\n                4、用蓝图装饰，和主app装饰视图一摸一样的\n                5、在__init__.py中导入使用了蓝图的视图函数（导入到蓝图之下）\n                6、在主app的文件中注册蓝图:app.register_blueprint(蓝图, url_prefix=\"/lqs\")，url_prefix表示前缀\n    '''\n```\n### 单元测试\n```\n在flask中使用单元测试的时候，千万不要动源代码，重新写个测试文件\nimport unittest\n导入要测试的flask代码文件\n创建测试类，继承unittest.TestCase\n定义好测试函数\nimport unittest\nimport json\nfrom flaskDay14 import Test\n\nclass Index(unittest.TestCase):\n    def setUp(self):\n        # 设置flask工作在测试模式下，在测试出错的时候会给出具体错误行\n        Test.app.testing = True\n        # 模拟flask客户端,setUp中的代码会在所有函数之前调用\n        self.client = Test.app.test_client()\n    def test_index(self):\n        # 模拟请求返回数据\n        ret = self.client.post(\"/index\", data={\"username\":\"lqs\", \"password\":\"lqs\"})\n        # 拿到数据\n        resp = ret.data\n        # 装成字典\n        resp = json.loads(resp)\n        # 断言\n        self.assertIn(\"code\", resp)\n        self.assertEqual(resp[\"code\"], 2)\n\n\nif __name__ == '__main__':\n    # 测试\n    unittest.main()\n\n对所有的测试都可以使用\n```","slug":"Flask基础","published":1,"updated":"2023-01-19T09:25:27.544Z","_id":"cld2uqf6000011svk6hw34k0k","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h1><h2 id=\"name-对象说明\"><a href=\"#name-对象说明\" class=\"headerlink\" title=\"__name__对象说明\"></a><code>__name__</code>对象说明</h2><p><code>__name__</code>返回的就是当前的模块名字</p>\n<p><code>__name__</code>如果在本文件中使用的话，那么就是<code>__main__</code></p>\n<p><code>__name__</code>如果本文件被导入到别的文件中使用的话，那么就是模块的名字<br>在文件中，被调用的时候，永远不可能等于<code>__main__</code></p>\n<h2 id=\"Flask-1\"><a href=\"#Flask-1\" class=\"headerlink\" title=\"Flask\"></a>Flask</h2><p>创建Flask对象: 名字 = Flask(一个魔法值(以这个为根目录)),括号里面的参数，就表示以这个参数所在的模块为根目录，默认这个目录中的static为静态目录，templates为模板目录</p>\n<p>创建视图: 等于创建一个函数，要显示给浏览器的数据，直接return</p>\n<p>路径配置: 给视图函数加装饰器,格式: app.route(‘路径’)</p>\n<p>运行flask: app.run(),flask的参数:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 创建flask的应用对象，__name__返回的就是当前的模块名字,表示以什么为根目录</span>\n   static_url_path<span class=\"token operator\">=</span><span class=\"token string\">'/python'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 访问静态的url前缀，不设置的话默认值是static</span>\n   static_folder<span class=\"token operator\">=</span><span class=\"token string\">'static'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 静态文件的目录，默认就是static</span>\n   template_folder<span class=\"token operator\">=</span><span class=\"token string\">'templates'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 模板文件的目录，默认的是templates</span>\n   <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask的配置\"><a href=\"#flask的配置\" class=\"headerlink\" title=\"flask的配置\"></a>flask的配置</h3><blockquote>\n<p>  flask没有Django那种的专门的配置文件，但是可以通过以下的三种方式来配置</p>\n<ul>\n<li>1、使用配置文件:<ul>\n<li>  1、创建一个配置文件xxx.cfg</li>\n<li> 2、app.config.from_pyfile(文件的路径)</li>\n</ul>\n</li>\n<li> 2、使用配置对象:<ul>\n<li>  1、创建一个类，将配置写入</li>\n<li>  2、app.config.from_object(类名)</li>\n</ul>\n</li>\n<li> 3、直接配置    -    app.config[‘DEBUG’] = True<ul>\n<li>  app.config.update(key=v1,k2=v2):一次性配置多个，如果已经存在，那么表示更新</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"获取配置中的参数\"><a href=\"#获取配置中的参数\" class=\"headerlink\" title=\"获取配置中的参数\"></a>获取配置中的参数</h3><blockquote>\n<p>   在flask中，配置中除了可以存储flask的配置，也可以存储开发者放的一些数据</p>\n<ul>\n<li>  获取方式一: app.config.get(‘key’)</li>\n<li>   获取方式二: current_app.config.get(‘key’),这是一个模块，也在flask模块中导入，current_app等价于app,有的时候我们拿不到app，所以这个模块可以替代</li>\n</ul>\n</blockquote>\n<h3 id=\"app-run-的使用\"><a href=\"#app-run-的使用\" class=\"headerlink\" title=\"app.run()的使用\"></a>app.run()的使用</h3><blockquote>\n<p>  app.run(host=’x.x.x.x’, port=xxx, debug=True(False)) ,app.run(host=’0.0.0.0’, port=xxx)是万能的</p>\n</blockquote>\n<h3 id=\"查看路由表\"><a href=\"#查看路由表\" class=\"headerlink\" title=\"查看路由表\"></a>查看路由表</h3><blockquote>\n<p> 和Django相比，Flask没有一个直观的路由表，而Django却有urls.py文件可以查看路由表</p>\n<p>  Flask查看路由表: app.url_map，这个方法就可以查看flask的路由表，默认的有static的路由记录，还可以查看请求方式</p>\n<p> 如果某些视图只能用某些请求方式来访问，那么方法就是:@app.route(‘路径’, methods=[请求方式列表])</p>\n<p>  当有多个视图对应同一个url地址的时候，解决方法是：要么修改url,要么修改请求方式</p>\n<p>  当有多个url地址对应一个视图函数的时候(给视图函数多装几个装饰器)，那么就是说这多个url都可以访问这个视图</p>\n<p>  重定向:从flask中导入redirect模块，就可以实现重定向(跳转，两次请求，重定向状态码302),用法:return redirect(url地址)</p>\n<p>  反向解析: 从flask中导入url_for模块,就可以实现反向解析，用法: url = url_for(‘视图函数的名字’, 参数列表)</p>\n</blockquote>\n<h4 id=\"url带参数\"><a href=\"#url带参数\" class=\"headerlink\" title=\"url带参数\"></a>url带参数</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">@app.route('/路径/&lt;转换器类型:参数名>'):\n    已经实现的转换器类型: int , float , path,如:@app.route('/index/&lt;int:id>'),在访问的时候:127.0.0.1:5000://index/123就可以访问.\n    不加转换器类型就是表示匹配普通的字符串（除了/）:@app.route('/路径/&lt;参数名>')\n    int转换器类型，匹配整数\n    float转换器类型，匹配小数\n    path转换器类型，匹配字符串，但是包括/\n        @app.route('/goods/&lt;int:id>')\n        def goods_detail(id):\n                '''定义商品视图函数'''\n            return f'goods detail page&#123;id&#125;'\n\n    自定义转换器(三步):\n        1、定义自己的转换器:\n            导入from werkzeug.routing import BaseConverter。\n            定义一个转换器类，使其继承BaseConverter.\n        2、将自定义的转换器添加到flask的应用中:\n            app.url_map.converters['转换器名'] = 类名\n        3、使用:\n            @app.route('/路径/&lt;转换器类型:参数名>')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"定义万能转换器\"><a href=\"#定义万能转换器\" class=\"headerlink\" title=\"定义万能转换器\"></a>定义万能转换器</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">说明一点:转换器也可以跟参数（re）: @app.route('/路径/&lt;转换器类型(参数):参数名>')\n方式一、\n    class ReConverter(BaseConverter):\n        '''\n            re万能转换器\n            创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n            在视图函数使用的时候，可以跟参数，一个正则\n            工作原理:\n                在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n        '''\n        # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n        def __init__(self, url_map, regex):\n            super().__init__(url_map)\n            # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n            # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n            self.regex = regex\n    # 加到应用中\n    app.url_map.converters['re'] = ReConverter\n    @app.route(\"/goods/&lt;re(r'1[34578]\\d&#123;9&#125;'):id>\")\n    def goods_detail(id):\n        '''定义商品视图函数'''\n        return f'goods detail page&#123;id&#125;'\n方式二、\n    class ReConverter(BaseConverter):\n        '''\n            re万能转换器\n            创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n            在视图函数使用的时候，可以跟参数，一个正则\n            工作原理:\n                在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n        '''\n        # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n        def __init__(self, url_map):\n            super().__init__(url_map)\n            # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n            # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n            self.regex = r'1[34578]\\d&#123;9&#125;'\n    # 加到应用中\n    app.url_map.converters['re'] = ReConverter\n    @app.route(\"/goods/&lt;re:id>\")\n    def goods_detail(id):\n        '''定义商品视图函数'''\n        return f'goods detail page&#123;id&#125;'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"高级的转换器应用\"><a href=\"#高级的转换器应用\" class=\"headerlink\" title=\"高级的转换器应用\"></a>高级的转换器应用</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">class ReConverter(BaseConverter):\n    '''\n        re万能转换器\n        创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n        在视图函数使用的时候，可以跟参数，一个正则\n        工作原理:\n            在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n    '''\n\n    # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n    def __init__(self, url_map):\n        super().__init__(url_map)\n        # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n        # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n        self.regex = r'1[34578]\\d&#123;9&#125;'\n\n    '''\n        to_python和to_url都是父类中的方法:\n            to_python:在匹配成功以后，请求网址带来的参数会交给to_python做出处理，返回的结果为视图函数的参数\n            to_url:在使用重定向(url_for)的时候使用，url(\"视图名\",参数)\n            使用重定向的时候，被定向的视图函数如果有参数需要匹配，那么，在重定向的时候，在使用url_for()的时候，就会去匹配一次被定向视图使用的转换器，在匹配成功的同时调用to_url方法\n            在to_url中处理以后，会交给to_python处理\n\n    '''\n\n    def to_python(self, value):\n        return value\n\n    def to_url(self, value):\n        return '13443218888'\n\n\n# 加到应用中\napp.url_map.converters['re'] = ReConverter\n\n\n@app.route(\"/goods/&lt;re:id>\")\ndef goods_detail(id):\n    '''定义商品视图函数'''\n    return f'goods detail page&#123;id&#125;'\n\n\n@app.route(\"/index\")\ndef index():\n    url = url_for(\"goods_detail\", id=13412344321)\n    return redirect(url)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Request对象\"><a href=\"#Request对象\" class=\"headerlink\" title=\"Request对象\"></a>Request对象</h2><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">从flask中导入request和Response\nrequest中常用的属性:\n    data:获取请求的数据，并转换为字符串，request.data\n    form:获取请求中的表单数据,request.form.get()，获取一对一,request.form.getlist()，获取一对多的数据\n    args:获取url中的参数(http:x.x.x.x:xxx/xxx?city=chengdu)，\n    cookies:获取到cookie，request.cookies.get()\n    headers:获取请求头中的报文:request.headers\n    method:获取请求方式:request.method\n    url:获取请求的url:request.url\n    files:获取上传的文件:  if request.method == 'POST':\n                            file = request.files.get('pic')\n                            file.save(f'./img/&#123;file.filename&#125;')\n    path: 拿到浏览器请求的地址（视图）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"abort\"><a href=\"#abort\" class=\"headerlink\" title=\"abort\"></a>abort</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">从flask中导入abort\n无条件终止视图函数的执行，并返回给前端特定的信息\n用法一、\n    abort（状态码）\n用法二、\n    re &#x3D; Response(&quot;login defete&quot;)\n    abort(re)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"自定义错误信息\"><a href=\"#自定义错误信息\" class=\"headerlink\" title=\"自定义错误信息\"></a>自定义错误信息</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">用户访问的页面不错在的时候，定义一个独立的视图,用@app.errorheader(404)来装饰\n固定写法:\n    @app.errorhandler(404)\n    def header_error(err):\n         return &#39;没有&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"设置响应信息的方法\"><a href=\"#设置响应信息的方法\" class=\"headerlink\" title=\"设置响应信息的方法\"></a>设置响应信息的方法</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">从flask中导入make_response\n方法一:\n    使用:\n    rsp &#x3D; make_response(显示的字符串)\n    rsp.status &#x3D; &#39;999 lqs&#39;  状态码\n    rsp.headers[&#39;lqs&#39;] &#x3D; &#39;lqs&#39;   头信息\n    return rsp\n方法二:\n    return 显示字符串, 状态码, 头信息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"json\"><a href=\"#json\" class=\"headerlink\" title=\"json\"></a>json</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">方法一、import json\n    dic &#x3D; &#123;&quot;name&quot;: &quot;lqs&quot;, &quot;age&quot;: 12&#125;\n    json_str &#x3D; json.dumps(dic)\n    print(type(json_str))\n    print(json_str)\n    dic_str &#x3D; json.loads(json_str)\n    print(type(dic_str))\n    print(dic_str)\njson.dumps():字典转json字符串\njson.loads():json字符串转字典\n\n方法二、从flask中导入jsonify\n    return jsonify(dic) ：将字典转成json字符串，并且自动设置头信息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"cookie的读写\"><a href=\"#cookie的读写\" class=\"headerlink\" title=\"cookie的读写\"></a>cookie的读写</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">读写和django一样，都是通过response写入，通过request读取\n在有关cookie的操作中，都要 app.config[&quot;SECRET_KEY&quot;] &#x3D; xxxxxx\n    导入:from flask import make_response\n    实例化:resp &#x3D; make_response(显示字符串)\n    设置:resp.set_cookie(&quot;lqs&quot;, &quot;Flask&quot;, max_age&#x3D;3600)\n    读取:request.cookies.get(&#39;lqs&#39;)\n    删除:resp.delete_cookie(&#39;lqs&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"session的读写\"><a href=\"#session的读写\" class=\"headerlink\" title=\"session的读写\"></a>session的读写</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">导入: from flask import session\n设置: session[key] &#x3D; value\n读取: session.get(key)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"钩子\"><a href=\"#钩子\" class=\"headerlink\" title=\"钩子\"></a>钩子</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">类似于django中的中间件\n在请求的时候使用，不是任何请求都会调用，是调用到视图函数的时候，在之前或者之后进行操作\n@app.before_first_request : 第一次请求之前调用\n@app.before_request : 每次请求之前调用\n@app.after_request : 每次请求之后调用（视图函数没有出错的情况）\n@app.teardown_request : 每次请求之后调用（不论是否出错都会调用）\n\n@app.after_request : 对应的视图函数必须带一个参数，用来接收视图函数的返回值，也就是接收在页面上现实的东西\n@app.teardown_request : 对应的视图函数必须带一个参数，用来接收视图函数的返回值，也就是接收在页面上现实的东西<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"g对象\"><a href=\"#g对象\" class=\"headerlink\" title=\"g对象\"></a>g对象</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">from flask import g\ng对象中保存的数据，在一次请求中的，多个函数中可以使用\n使用:\n    g.key &#x3D; value:存\n    xx &#x3D; g.key:取<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask-script扩展-实现shell代码-这样子可以和django一样，runserver\"><a href=\"#flask-script扩展-实现shell代码-这样子可以和django一样，runserver\" class=\"headerlink\" title=\"flask_script扩展(实现shell代码),这样子可以和django一样，runserver\"></a>flask_script扩展(实现shell代码),这样子可以和django一样，runserver</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install Flask-Script\nfrom flask_script import Manager\nmanager &#x3D; Manager(flask应用名)\nmanager.run()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask使用模板文件\"><a href=\"#flask使用模板文件\" class=\"headerlink\" title=\"flask使用模板文件\"></a>flask使用模板文件</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">from flask import render_template\nreturn render_template(&quot;html模板&quot;, key&#x3D;value, key&#x3D;value)  或者    return render_template(&quot;html模板&quot;, **字典名（组织之后的上下文）)\n在html模板文件中，可以使用过滤器:使用方法:&#123;&#123;value | 过滤器&#125;&#125;如safe就表示转义<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask中html模板转义\"><a href=\"#flask中html模板转义\" class=\"headerlink\" title=\"flask中html模板转义\"></a>flask中html模板转义</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">使用方法: &#123;&#123; 处理对象 | 过滤器 &#125;&#125;\n常用过滤器:\n    safe : 禁用转义\n    capitalize : 变量值的首字母转换成大写其余小写\n    lower : 全部转换为小写\n    upper : 全部转换为大写\n    title : 每个单词首字母大写\n    trim  : 去除首尾空格\n    reverse : 字符串反转\n    format : 格式化输出\n    striptags : 渲染之前把所有的html标签去掉\n    first : 取出列表中的第一个元素\n    last : 取出列表中的最后一个元素\n    length : 获取列表的长度\n    sum : 列表数据求和\n    sort : 列表排序\n自定义过滤器:\n    在flask代码中定义\n    第一种方式(函数):\n        定义一个过滤器函数\n        返回值就是过滤后的数据\n        app.add_template_filter(函数名, 过滤器名)就可以注册这个过滤器\n        然后在html模板中使用\n    第二种方式(装饰器:\n        定义一个过滤器函数\n        返回值就是过滤后的数据\n        加装饰器:@app.template_filter(过滤器名)\n        然后在html模板中使用\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask使用Flask-WTF\"><a href=\"#flask使用Flask-WTF\" class=\"headerlink\" title=\"flask使用Flask-WTF\"></a>flask使用Flask-WTF</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">可以在服务器端(创建表单模型)校验表单数据，可以设置csrf攻击的关闭\npip install Flask-WTF\nfrom flask_wtf import FlaskForm : 这个模块让类继承之后就可以实现创建表单模型\nfrom wtforms import StringField, PasswordField, SubmitField : 这个wtforms模块中的方法都是关于表单中的各个控件的类型，这里没有写全面\nfrom wtforms.validators import DataRequired, EqualTo : wtforms下面的validators模块中的方法就是一些校验规则\n\n说明: 在flask中定义的表单模型作用有两个,首先，第一个作用就是不用用户再去自己打表单，可以将表单模型传到模板中生成表单，第二个作用就是验证数据，两个作用是区分开的\n\n定义表单模型类:\n    class LoginForm(FlaskForm):\n    &#39;&#39;&#39;\n        自定义的注册表单抽象类\n            label标签表示设置名称,用中文就使用u&quot;xx&quot;\n            validators表示验证数据，是一个列表类型\n            DataRequired表示必须输入，有一个参数，表示验证失败的时候显示文本\n            EqualTo表示和谁一样，有连个参数，第一个填写和谁一样，第二个填写验证失败的显示文本\n    &#39;&#39;&#39;\n        user_name &#x3D; StringField(label&#x3D;u&quot;用户名&quot;, validators&#x3D;[DataRequired(&quot;用户名不能为空&quot;)])\n        password &#x3D; PasswordField(label&#x3D;r&quot;密码&quot;, validators&#x3D;[DataRequired(&quot;密码不能为空&quot;)])\n        password2 &#x3D; PasswordField(label&#x3D;r&quot;确认密码&quot;, validators&#x3D;[DataRequired(&quot;确认密码不能为空&quot;), EqualTo(&quot;password&quot;, &quot;两次密码不一致&quot;)])\n        submit &#x3D; SubmitField(label&#x3D;u&quot;提交&quot;)\n\n\n        @app.route(&quot;&#x2F;login&quot;, methods&#x3D;[&quot;POST&quot;, &quot;GET&quot;])\n        def login():\n            &#39;&#39;&#39;创建表单对象&#39;&#39;&#39;\n            form &#x3D; LoginForm()\n            # 判断form中的数据是否合理\n            # 如果form中的数据完全满足验证，则返回真，否则返回假\n            if form.validate_on_submit():\n                uname &#x3D; form.user_name.data\n                pwd &#x3D; form.password.data\n                pwd2 &#x3D; form.password2.data\n                print(uname, pwd, pwd2)\n                session[&quot;username&quot;] &#x3D; uname\n                url &#x3D; url_for(&quot;index&quot;)\n                return redirect(url)\n            return render_template(&quot;login.html&quot;, form&#x3D;form)\n\n\n在html模板中生成表单:\n     &lt;form  method&#x3D;&quot;post&quot;&gt;\n        &#123;&#123; form.csrf_token&#125;&#125;\n        &#123;&#123; form.user_name.label &#125;&#125; &#123;&#123; form.user_name &#125;&#125;&lt;br&gt;\n        &#123;% for msg in form.user_name.errors %&#125;\n        &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;\n        &#123;% endfor %&#125;\n\n        &#123;&#123; form.password.label &#125;&#125; &#123;&#123; form.password &#125;&#125;&lt;br&gt;\n        &#123;% for msg in form.password.errors %&#125;\n        &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;\n        &#123;% endfor %&#125;\n\n        &#123;&#123; form.password2.label &#125;&#125; &#123;&#123; form.password2 &#125;&#125;&lt;br&gt;\n        &#123;% for msg in form.password2.errors %&#125;\n        &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;\n        &#123;% endfor %&#125;\n\n        &lt;p&gt;&#123;&#123; form.submit &#125;&#125;&lt;&#x2F;p&gt;\n\n     &lt;&#x2F;form&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"宏的定义和使用\"><a href=\"#宏的定义和使用\" class=\"headerlink\" title=\"宏的定义和使用\"></a>宏的定义和使用</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">在同一个html中定义和使用:\n    没有参数:\n        定义:\n        &#123;% macro input() %&#125;\n         &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;&quot; size&#x3D;&quot;30&quot;&gt;\n        &#123;% endmacro %&#125;\n        使用:\n        &#123;&#123; input() &#125;&#125;\n    有参数:\n    定义:\n    &#123;% macro input(type,name,size) %&#125;\n     &lt;input type&#x3D;&#123;&#123;type&#125;&#125; name&#x3D;&#123;&#123;name&#125;&#125; value&#x3D;&quot;&quot; size&#x3D;&#123;&#123;size&#125;&#125;&gt;\n    &#123;% endmacro %&#125;\n    使用:\n    &#123;&#123; input(&#39;text&#39;, &#39;username&#39;, 40) &#125;&#125;\n\n在不同html中定义和使用:\n    没有参数:\n        定义在macro2.html中:\n        &#123;% macro input() %&#125;\n         &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;&quot; size&#x3D;&quot;30&quot;&gt;\n        &#123;% endmacro %&#125;\n        在macro。html使用:\n        &#123;% import &quot;macro2.html&quot; as 别名 %&#125;\n        &#123;&#123; 别名.input() &#125;&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"模板继承\"><a href=\"#模板继承\" class=\"headerlink\" title=\"模板继承\"></a>模板继承</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">和django中的模板继承一样: &#123;% extend &quot;模板名&quot; %&#125;  使用 &#123;% block xx %&#125; &#123;% endblock xx %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"flask中一些特殊的方法\"><a href=\"#flask中一些特殊的方法\" class=\"headerlink\" title=\"flask中一些特殊的方法\"></a>flask中一些特殊的方法</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">有些方法和变量不需要传递也可以在模板中直接使用\nconfig中的方法\nrequest中的方法\nurl_for中的方法\n模板的闪现:\n    闪现就是表示有的信息，只是出现一次\n    在flask中:from flask import flash\n            在视图中使用flash(xxx)来添加信息，可以添加很多条\n    在模板中:\n        &#123;% for x in get_flashed_messages() %&#125;\n        &#123;&#123; x &#125;&#125;\n        &#123;% endfor %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask链接数据库\"><a href=\"#flask链接数据库\" class=\"headerlink\" title=\"flask链接数据库\"></a>flask链接数据库</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install flask-sqlalchemy  模型类到sql语句的转换，再将结果转换为模型类对象\npip install flask-mysqldb   数据库驱动\nfrom flask_sqlalchemy import SQLAlchemy  可以创建数据库对象\n配置:\n    app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] &#x3D; &quot;mysql:&#x2F;&#x2F;root:123456@127.0.0.1:3306&#x2F;msfood&quot;\n    app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] &#x3D; True   # 配置跟踪,数据库和模型类同步\n创建数据库sqlalchemy工具对象,就可以使用数据库了\n    db &#x3D; SQLAlchemy(app)\n\n\n创建模型类\nclass Role(db.Model):\n    &#39;&#39;&#39;身份表&#39;&#39;&#39;\n    __tablename__ &#x3D; &quot;tbl_roles&quot;  # 指明表名\n    id &#x3D; db.Column(db.Integer, primary_key&#x3D;True)\n    name &#x3D; db.Column(db.String(32), unique&#x3D;True)\n    users &#x3D; db.relationship(&quot;User&quot;, backref&#x3D;&quot;role&quot;)\n     def __repr__(self):\n        &#39;&#39;&#39;补充方法,可以让显示对象的时候更直观,类似于__str__方法&#39;&#39;&#39;\n        return f&#39;&#123;self.users&#125;&#39;\nclass User(db.Model):\n    &#39;&#39;&#39;用户表&#39;&#39;&#39;\n    __tablename__ &#x3D; &quot;tbl_users&quot;  # 指明数据库的表名\n    id &#x3D; db.Column(db.Integer, primary_key&#x3D;True)  # 主键，自动递增\n    name &#x3D; db.Column(db.String(64), unique&#x3D;True)\n    email &#x3D; db.Column(db.String(128), unique&#x3D;True)\n    password &#x3D; db.Column(db.String(128))\n    role_id &#x3D; db.Column(db.Integer, db.ForeignKey(&quot;tbl_roles.id&quot;))\n\n生成数据表:\n    *第一次生成的时候清除所有数据:\n         db.drop_all()\n    创建所有表\n        db.create_all()\n\n说明:\n    创建表的时候，和底层相关，只要是表中的一行，都是有关底层的，用的都是真实的表的名字\n    users &#x3D; db.relationship(&quot;User&quot;, backref&#x3D;&quot;role&quot;): 这个语句就是表示和底层无关，只和flask中的对象有关，User就是一个模型对象\n        users表和roles表是有关联的（外键）,那么db.relationship就可以让两个表相互拿东西，表示从User模型类中拿出和Role模型有关联的数据\n        backref表示没有定义relationship的对方表中，也可以反推拿出和User模型有关的Role模型的数据\n        使用方法:\n            在Role模型:role.users\n            在user模型中:user.role\n\n添加数据:\n    创建对象:xx &#x3D; 模型(属性&#x3D;值，属性&#x3D;值)\n    session记录对象任务:db.session.add(xx),添加一条数据，db.session.add_all(),添加多条数据\n    提交任务到数据库:db.session.commit()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"sqlalchemy查询\"><a href=\"#sqlalchemy查询\" class=\"headerlink\" title=\"sqlalchemy查询\"></a>sqlalchemy查询</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">用模型类来查询\n模型类.query.all():查询所有数据，返回的是一个列表，可以取出某一个对象，然后读取属性值\n模型类.query.first():返回第一条记录\n模型类.query.get(主键的id):根据主键id获取对象\n模型类.query.filter_by(字段&#x3D;xx,字段&#x3D;&#x3D;xx).all():获取满足条件的所有数据,条件是与\n模型类.query.filter(模型类.字段&#x3D;&#x3D;xx,模型类.字段&#x3D;&#x3D;xx).all():拿出满足条件的所有数据，条件是与\n模型类.query.filter(or_(模型类.字段&#x3D;&#x3D;xx,模型类.字段.endswith(xxx))).all():拿出满足条件的所有数据，条件是或，使用或必须导入from sqlalchemy import or_\n模型类.query.filter(条件).offset(2).limit(3).order_by(模型类.字段.desc()).all():返回满足条件并且忽略前两条数据，取出三条数据然后降序排列的数据，每一个部分都可以单独使用\ndb.session.query(模型类.字段, func.count(模型类.字段)).group_by(模型类.字段).all():分组查询，from sqlalchemy import func,func.聚合函数(属性),就可以查出来<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"sqlalchemy修改\"><a href=\"#sqlalchemy修改\" class=\"headerlink\" title=\"sqlalchemy修改\"></a>sqlalchemy修改</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">模型类.query.filter(条件).update(&#123;字段名:值,字段名:值,字段名:值&#125;)\ndb.session.commit()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"sqlalchemy删除\"><a href=\"#sqlalchemy删除\" class=\"headerlink\" title=\"sqlalchemy删除\"></a>sqlalchemy删除</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">xx &#x3D; 模型类.query.get(x)\ndb.session.delete(xx)\ndb.session.commit()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"flask中和django一样使用迁移的方式\"><a href=\"#flask中和django一样使用迁移的方式\" class=\"headerlink\" title=\"flask中和django一样使用迁移的方式\"></a>flask中和django一样使用迁移的方式</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install flask-migrate\nfrom flask_script import Manager\nfrom flask_migrate import Migrate, MigrateCommand\n\ndb &#x3D; SQLAlchemy(app)\n\n创建flask脚本管理工具\nmanager &#x3D; Manager(app)\n创建数据库迁移工具对象\nMigrate(app, db)\n向manager对象中添加数据的操作命令\nmanager.add_command(&quot;操作的名字&quot;, MigrateCommand)\n\nmain中:\n    manager.run()\n终端中:\n    python3 xxx.py 操作的名字 init  : 让他初始化一下，自动创文件夹\n    python3 xxx.py 操作的名字 migrate -m &quot;版本说明信息&quot; : 生成迁移文件（版本说明可以不要），同价与django中的makemigrations\n    多次migrate之后需要更新数据库:python3 xxx.py 操作的名字 upgrade，可以升级同步\n    python3 xxx.py 操作的名字 history : 查看历史修改\n    python3 xxx.py 操作的名字 downgrade 版本编号 : 版本回退\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"flask发送邮件\"><a href=\"#flask发送邮件\" class=\"headerlink\" title=\"flask发送邮件\"></a>flask发送邮件</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install flask-mail\nfrom flask_mail import Mail, Message\napp &#x3D; Flask(__name__)\n\napp.config.update(\n    DEBUG&#x3D;True,\n    MAIL_SERVER&#x3D;&#39;smtp.qq.com&#39;,\n    MAIL_PROT&#x3D;465,\n    MAIL_USE_TLS&#x3D;True,\n    MAIL_USERNAME&#x3D;&#39;749062870@qq.com&#39;,\n    MAIL_PASSWORD&#x3D;&#39;kttumcufpqasbcii&#39;,\n)\n\n # sender发送方,recipients接收方列表\n    mail &#x3D; Mail() : 创建mail对象\n    mail.init_app(app) : 初始化mail对象\n    msg &#x3D; Message(&quot;傻逼&quot;, sender&#x3D;&quot;749062870@qq.com&quot;, recipients&#x3D;[&quot;2807175480@qq.com&quot;]) : 设置邮件消息的邮件头\n    msg.body &#x3D; &quot;傻逼&quot;  : 设置邮件的正文\n    mail.send(msg) : 发送邮件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"蓝图（Blueprint）\"><a href=\"#蓝图（Blueprint）\" class=\"headerlink\" title=\"蓝图（Blueprint）\"></a>蓝图（Blueprint）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">之前写的都在一个py文件中\n蓝图就是分割各个块\n将视图写在其他的py文件中，那么不用再给写在外面的视图加装饰器，可以在有app的py文件中导入，然后通过app.route(&quot;路径&quot;)(视图函数)\n\n蓝图的正解:\n    &#39;&#39;&#39;\n        蓝图和django中的各个应用差不多,一个蓝图自成一块，在主窗口中注册进app里面就可以使用\n        使用方法:\n            创建一个应用目录，再添加一个__init__.py让这个目录成为一个可以调动的包，再__init__.py中定义好蓝图,再到视图中导入这个蓝图，就可以使用，最后再视图使用之后，再到__init__.py中\n            导入视图中使用了蓝图的视图函数。\n            蓝图再使用模板文件和静态文件的时候，和主app不同，主app有默认的配置，而蓝图中没有，需要再定义蓝图的时候手动设置，和主app的设置方法是一样的\n            蓝图在没有定义静态文件目录和模板文件目录的时候，默认是使用主app的，就算配置可静态目录和模板目录，蓝图也是先去主app的静态目录和模板目录查找，没有找到在回到自己的里面去找，这个时候，就是主app的优先级大于蓝图\n            在视图中使用蓝图:\n                1、在__init__.py中from flask import Blueprint\n                2、在__init__.py中定义蓝图,xx &#x3D; Blueprint(&quot;蓝图名&quot;,__name__)\n                3、导入蓝图\n                4、用蓝图装饰，和主app装饰视图一摸一样的\n                5、在__init__.py中导入使用了蓝图的视图函数（导入到蓝图之下）\n                6、在主app的文件中注册蓝图:app.register_blueprint(蓝图, url_prefix&#x3D;&quot;&#x2F;lqs&quot;)，url_prefix表示前缀\n    &#39;&#39;&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">在flask中使用单元测试的时候，千万不要动源代码，重新写个测试文件\nimport unittest\n导入要测试的flask代码文件\n创建测试类，继承unittest.TestCase\n定义好测试函数\nimport unittest\nimport json\nfrom flaskDay14 import Test\n\nclass Index(unittest.TestCase):\n    def setUp(self):\n        # 设置flask工作在测试模式下，在测试出错的时候会给出具体错误行\n        Test.app.testing &#x3D; True\n        # 模拟flask客户端,setUp中的代码会在所有函数之前调用\n        self.client &#x3D; Test.app.test_client()\n    def test_index(self):\n        # 模拟请求返回数据\n        ret &#x3D; self.client.post(&quot;&#x2F;index&quot;, data&#x3D;&#123;&quot;username&quot;:&quot;lqs&quot;, &quot;password&quot;:&quot;lqs&quot;&#125;)\n        # 拿到数据\n        resp &#x3D; ret.data\n        # 装成字典\n        resp &#x3D; json.loads(resp)\n        # 断言\n        self.assertIn(&quot;code&quot;, resp)\n        self.assertEqual(resp[&quot;code&quot;], 2)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    # 测试\n    unittest.main()\n\n对所有的测试都可以使用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h1><h2 id=\"name-对象说明\"><a href=\"#name-对象说明\" class=\"headerlink\" title=\"__name__对象说明\"></a><code>__name__</code>对象说明</h2><p><code>__name__</code>返回的就是当前的模块名字</p>\n<p><code>__name__</code>如果在本文件中使用的话，那么就是<code>__main__</code></p>\n<p><code>__name__</code>如果本文件被导入到别的文件中使用的话，那么就是模块的名字<br>在文件中，被调用的时候，永远不可能等于<code>__main__</code></p>\n<h2 id=\"Flask-1\"><a href=\"#Flask-1\" class=\"headerlink\" title=\"Flask\"></a>Flask</h2><p>创建Flask对象: 名字 = Flask(一个魔法值(以这个为根目录)),括号里面的参数，就表示以这个参数所在的模块为根目录，默认这个目录中的static为静态目录，templates为模板目录</p>\n<p>创建视图: 等于创建一个函数，要显示给浏览器的数据，直接return</p>\n<p>路径配置: 给视图函数加装饰器,格式: app.route(‘路径’)</p>\n<p>运行flask: app.run(),flask的参数:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 创建flask的应用对象，__name__返回的就是当前的模块名字,表示以什么为根目录</span>\n   static_url_path<span class=\"token operator\">=</span><span class=\"token string\">'/python'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 访问静态的url前缀，不设置的话默认值是static</span>\n   static_folder<span class=\"token operator\">=</span><span class=\"token string\">'static'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 静态文件的目录，默认就是static</span>\n   template_folder<span class=\"token operator\">=</span><span class=\"token string\">'templates'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 模板文件的目录，默认的是templates</span>\n   <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask的配置\"><a href=\"#flask的配置\" class=\"headerlink\" title=\"flask的配置\"></a>flask的配置</h3><blockquote>\n<p>  flask没有Django那种的专门的配置文件，但是可以通过以下的三种方式来配置</p>\n<ul>\n<li>1、使用配置文件:<ul>\n<li>  1、创建一个配置文件xxx.cfg</li>\n<li> 2、app.config.from_pyfile(文件的路径)</li>\n</ul>\n</li>\n<li> 2、使用配置对象:<ul>\n<li>  1、创建一个类，将配置写入</li>\n<li>  2、app.config.from_object(类名)</li>\n</ul>\n</li>\n<li> 3、直接配置    -    app.config[‘DEBUG’] = True<ul>\n<li>  app.config.update(key=v1,k2=v2):一次性配置多个，如果已经存在，那么表示更新</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"获取配置中的参数\"><a href=\"#获取配置中的参数\" class=\"headerlink\" title=\"获取配置中的参数\"></a>获取配置中的参数</h3><blockquote>\n<p>   在flask中，配置中除了可以存储flask的配置，也可以存储开发者放的一些数据</p>\n<ul>\n<li>  获取方式一: app.config.get(‘key’)</li>\n<li>   获取方式二: current_app.config.get(‘key’),这是一个模块，也在flask模块中导入，current_app等价于app,有的时候我们拿不到app，所以这个模块可以替代</li>\n</ul>\n</blockquote>\n<h3 id=\"app-run-的使用\"><a href=\"#app-run-的使用\" class=\"headerlink\" title=\"app.run()的使用\"></a>app.run()的使用</h3><blockquote>\n<p>  app.run(host=’x.x.x.x’, port=xxx, debug=True(False)) ,app.run(host=’0.0.0.0’, port=xxx)是万能的</p>\n</blockquote>\n<h3 id=\"查看路由表\"><a href=\"#查看路由表\" class=\"headerlink\" title=\"查看路由表\"></a>查看路由表</h3><blockquote>\n<p> 和Django相比，Flask没有一个直观的路由表，而Django却有urls.py文件可以查看路由表</p>\n<p>  Flask查看路由表: app.url_map，这个方法就可以查看flask的路由表，默认的有static的路由记录，还可以查看请求方式</p>\n<p> 如果某些视图只能用某些请求方式来访问，那么方法就是:@app.route(‘路径’, methods=[请求方式列表])</p>\n<p>  当有多个视图对应同一个url地址的时候，解决方法是：要么修改url,要么修改请求方式</p>\n<p>  当有多个url地址对应一个视图函数的时候(给视图函数多装几个装饰器)，那么就是说这多个url都可以访问这个视图</p>\n<p>  重定向:从flask中导入redirect模块，就可以实现重定向(跳转，两次请求，重定向状态码302),用法:return redirect(url地址)</p>\n<p>  反向解析: 从flask中导入url_for模块,就可以实现反向解析，用法: url = url_for(‘视图函数的名字’, 参数列表)</p>\n</blockquote>\n<h4 id=\"url带参数\"><a href=\"#url带参数\" class=\"headerlink\" title=\"url带参数\"></a>url带参数</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">@app.route('/路径/&lt;转换器类型:参数名>'):\n    已经实现的转换器类型: int , float , path,如:@app.route('/index/&lt;int:id>'),在访问的时候:127.0.0.1:5000://index/123就可以访问.\n    不加转换器类型就是表示匹配普通的字符串（除了/）:@app.route('/路径/&lt;参数名>')\n    int转换器类型，匹配整数\n    float转换器类型，匹配小数\n    path转换器类型，匹配字符串，但是包括/\n        @app.route('/goods/&lt;int:id>')\n        def goods_detail(id):\n                '''定义商品视图函数'''\n            return f'goods detail page&#123;id&#125;'\n\n    自定义转换器(三步):\n        1、定义自己的转换器:\n            导入from werkzeug.routing import BaseConverter。\n            定义一个转换器类，使其继承BaseConverter.\n        2、将自定义的转换器添加到flask的应用中:\n            app.url_map.converters['转换器名'] = 类名\n        3、使用:\n            @app.route('/路径/&lt;转换器类型:参数名>')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"定义万能转换器\"><a href=\"#定义万能转换器\" class=\"headerlink\" title=\"定义万能转换器\"></a>定义万能转换器</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">说明一点:转换器也可以跟参数（re）: @app.route('/路径/&lt;转换器类型(参数):参数名>')\n方式一、\n    class ReConverter(BaseConverter):\n        '''\n            re万能转换器\n            创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n            在视图函数使用的时候，可以跟参数，一个正则\n            工作原理:\n                在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n        '''\n        # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n        def __init__(self, url_map, regex):\n            super().__init__(url_map)\n            # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n            # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n            self.regex = regex\n    # 加到应用中\n    app.url_map.converters['re'] = ReConverter\n    @app.route(\"/goods/&lt;re(r'1[34578]\\d&#123;9&#125;'):id>\")\n    def goods_detail(id):\n        '''定义商品视图函数'''\n        return f'goods detail page&#123;id&#125;'\n方式二、\n    class ReConverter(BaseConverter):\n        '''\n            re万能转换器\n            创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n            在视图函数使用的时候，可以跟参数，一个正则\n            工作原理:\n                在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n        '''\n        # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n        def __init__(self, url_map):\n            super().__init__(url_map)\n            # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n            # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n            self.regex = r'1[34578]\\d&#123;9&#125;'\n    # 加到应用中\n    app.url_map.converters['re'] = ReConverter\n    @app.route(\"/goods/&lt;re:id>\")\n    def goods_detail(id):\n        '''定义商品视图函数'''\n        return f'goods detail page&#123;id&#125;'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"高级的转换器应用\"><a href=\"#高级的转换器应用\" class=\"headerlink\" title=\"高级的转换器应用\"></a>高级的转换器应用</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">class ReConverter(BaseConverter):\n    '''\n        re万能转换器\n        创建好自定义的转换器之后，我们就将这个自定义的转换器，添加到应用中\n        在视图函数使用的时候，可以跟参数，一个正则\n        工作原理:\n            在访问网址的时候，给定参数，在服务器接收到数据时，会根据转换器的正则来判断时候是一个非法的数据\n    '''\n\n    # url_map是一个固定的参数,必须调用父类的初始化方法，也必须传入这个参数\n    def __init__(self, url_map):\n        super().__init__(url_map)\n        # self.regex是BaseConverter中的参数（接收正则）,他是专门来看看你自定义的转换器是什么样的一个转换器，接收参数（re）\n        # 将正则表达式的参数保存到对象的属性中，flask会去使用这个属性来进行正则匹配\n        self.regex = r'1[34578]\\d&#123;9&#125;'\n\n    '''\n        to_python和to_url都是父类中的方法:\n            to_python:在匹配成功以后，请求网址带来的参数会交给to_python做出处理，返回的结果为视图函数的参数\n            to_url:在使用重定向(url_for)的时候使用，url(\"视图名\",参数)\n            使用重定向的时候，被定向的视图函数如果有参数需要匹配，那么，在重定向的时候，在使用url_for()的时候，就会去匹配一次被定向视图使用的转换器，在匹配成功的同时调用to_url方法\n            在to_url中处理以后，会交给to_python处理\n\n    '''\n\n    def to_python(self, value):\n        return value\n\n    def to_url(self, value):\n        return '13443218888'\n\n\n# 加到应用中\napp.url_map.converters['re'] = ReConverter\n\n\n@app.route(\"/goods/&lt;re:id>\")\ndef goods_detail(id):\n    '''定义商品视图函数'''\n    return f'goods detail page&#123;id&#125;'\n\n\n@app.route(\"/index\")\ndef index():\n    url = url_for(\"goods_detail\", id=13412344321)\n    return redirect(url)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Request对象\"><a href=\"#Request对象\" class=\"headerlink\" title=\"Request对象\"></a>Request对象</h2><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">从flask中导入request和Response\nrequest中常用的属性:\n    data:获取请求的数据，并转换为字符串，request.data\n    form:获取请求中的表单数据,request.form.get()，获取一对一,request.form.getlist()，获取一对多的数据\n    args:获取url中的参数(http:x.x.x.x:xxx/xxx?city=chengdu)，\n    cookies:获取到cookie，request.cookies.get()\n    headers:获取请求头中的报文:request.headers\n    method:获取请求方式:request.method\n    url:获取请求的url:request.url\n    files:获取上传的文件:  if request.method == 'POST':\n                            file = request.files.get('pic')\n                            file.save(f'./img/&#123;file.filename&#125;')\n    path: 拿到浏览器请求的地址（视图）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"abort\"><a href=\"#abort\" class=\"headerlink\" title=\"abort\"></a>abort</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">从flask中导入abort\n无条件终止视图函数的执行，并返回给前端特定的信息\n用法一、\n    abort（状态码）\n用法二、\n    re &#x3D; Response(&quot;login defete&quot;)\n    abort(re)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"自定义错误信息\"><a href=\"#自定义错误信息\" class=\"headerlink\" title=\"自定义错误信息\"></a>自定义错误信息</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">用户访问的页面不错在的时候，定义一个独立的视图,用@app.errorheader(404)来装饰\n固定写法:\n    @app.errorhandler(404)\n    def header_error(err):\n         return &#39;没有&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"设置响应信息的方法\"><a href=\"#设置响应信息的方法\" class=\"headerlink\" title=\"设置响应信息的方法\"></a>设置响应信息的方法</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">从flask中导入make_response\n方法一:\n    使用:\n    rsp &#x3D; make_response(显示的字符串)\n    rsp.status &#x3D; &#39;999 lqs&#39;  状态码\n    rsp.headers[&#39;lqs&#39;] &#x3D; &#39;lqs&#39;   头信息\n    return rsp\n方法二:\n    return 显示字符串, 状态码, 头信息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"json\"><a href=\"#json\" class=\"headerlink\" title=\"json\"></a>json</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">方法一、import json\n    dic &#x3D; &#123;&quot;name&quot;: &quot;lqs&quot;, &quot;age&quot;: 12&#125;\n    json_str &#x3D; json.dumps(dic)\n    print(type(json_str))\n    print(json_str)\n    dic_str &#x3D; json.loads(json_str)\n    print(type(dic_str))\n    print(dic_str)\njson.dumps():字典转json字符串\njson.loads():json字符串转字典\n\n方法二、从flask中导入jsonify\n    return jsonify(dic) ：将字典转成json字符串，并且自动设置头信息<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"cookie的读写\"><a href=\"#cookie的读写\" class=\"headerlink\" title=\"cookie的读写\"></a>cookie的读写</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">读写和django一样，都是通过response写入，通过request读取\n在有关cookie的操作中，都要 app.config[&quot;SECRET_KEY&quot;] &#x3D; xxxxxx\n    导入:from flask import make_response\n    实例化:resp &#x3D; make_response(显示字符串)\n    设置:resp.set_cookie(&quot;lqs&quot;, &quot;Flask&quot;, max_age&#x3D;3600)\n    读取:request.cookies.get(&#39;lqs&#39;)\n    删除:resp.delete_cookie(&#39;lqs&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"session的读写\"><a href=\"#session的读写\" class=\"headerlink\" title=\"session的读写\"></a>session的读写</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">导入: from flask import session\n设置: session[key] &#x3D; value\n读取: session.get(key)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"钩子\"><a href=\"#钩子\" class=\"headerlink\" title=\"钩子\"></a>钩子</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">类似于django中的中间件\n在请求的时候使用，不是任何请求都会调用，是调用到视图函数的时候，在之前或者之后进行操作\n@app.before_first_request : 第一次请求之前调用\n@app.before_request : 每次请求之前调用\n@app.after_request : 每次请求之后调用（视图函数没有出错的情况）\n@app.teardown_request : 每次请求之后调用（不论是否出错都会调用）\n\n@app.after_request : 对应的视图函数必须带一个参数，用来接收视图函数的返回值，也就是接收在页面上现实的东西\n@app.teardown_request : 对应的视图函数必须带一个参数，用来接收视图函数的返回值，也就是接收在页面上现实的东西<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"g对象\"><a href=\"#g对象\" class=\"headerlink\" title=\"g对象\"></a>g对象</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">from flask import g\ng对象中保存的数据，在一次请求中的，多个函数中可以使用\n使用:\n    g.key &#x3D; value:存\n    xx &#x3D; g.key:取<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask-script扩展-实现shell代码-这样子可以和django一样，runserver\"><a href=\"#flask-script扩展-实现shell代码-这样子可以和django一样，runserver\" class=\"headerlink\" title=\"flask_script扩展(实现shell代码),这样子可以和django一样，runserver\"></a>flask_script扩展(实现shell代码),这样子可以和django一样，runserver</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install Flask-Script\nfrom flask_script import Manager\nmanager &#x3D; Manager(flask应用名)\nmanager.run()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask使用模板文件\"><a href=\"#flask使用模板文件\" class=\"headerlink\" title=\"flask使用模板文件\"></a>flask使用模板文件</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">from flask import render_template\nreturn render_template(&quot;html模板&quot;, key&#x3D;value, key&#x3D;value)  或者    return render_template(&quot;html模板&quot;, **字典名（组织之后的上下文）)\n在html模板文件中，可以使用过滤器:使用方法:&#123;&#123;value | 过滤器&#125;&#125;如safe就表示转义<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask中html模板转义\"><a href=\"#flask中html模板转义\" class=\"headerlink\" title=\"flask中html模板转义\"></a>flask中html模板转义</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">使用方法: &#123;&#123; 处理对象 | 过滤器 &#125;&#125;\n常用过滤器:\n    safe : 禁用转义\n    capitalize : 变量值的首字母转换成大写其余小写\n    lower : 全部转换为小写\n    upper : 全部转换为大写\n    title : 每个单词首字母大写\n    trim  : 去除首尾空格\n    reverse : 字符串反转\n    format : 格式化输出\n    striptags : 渲染之前把所有的html标签去掉\n    first : 取出列表中的第一个元素\n    last : 取出列表中的最后一个元素\n    length : 获取列表的长度\n    sum : 列表数据求和\n    sort : 列表排序\n自定义过滤器:\n    在flask代码中定义\n    第一种方式(函数):\n        定义一个过滤器函数\n        返回值就是过滤后的数据\n        app.add_template_filter(函数名, 过滤器名)就可以注册这个过滤器\n        然后在html模板中使用\n    第二种方式(装饰器:\n        定义一个过滤器函数\n        返回值就是过滤后的数据\n        加装饰器:@app.template_filter(过滤器名)\n        然后在html模板中使用\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask使用Flask-WTF\"><a href=\"#flask使用Flask-WTF\" class=\"headerlink\" title=\"flask使用Flask-WTF\"></a>flask使用Flask-WTF</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">可以在服务器端(创建表单模型)校验表单数据，可以设置csrf攻击的关闭\npip install Flask-WTF\nfrom flask_wtf import FlaskForm : 这个模块让类继承之后就可以实现创建表单模型\nfrom wtforms import StringField, PasswordField, SubmitField : 这个wtforms模块中的方法都是关于表单中的各个控件的类型，这里没有写全面\nfrom wtforms.validators import DataRequired, EqualTo : wtforms下面的validators模块中的方法就是一些校验规则\n\n说明: 在flask中定义的表单模型作用有两个,首先，第一个作用就是不用用户再去自己打表单，可以将表单模型传到模板中生成表单，第二个作用就是验证数据，两个作用是区分开的\n\n定义表单模型类:\n    class LoginForm(FlaskForm):\n    &#39;&#39;&#39;\n        自定义的注册表单抽象类\n            label标签表示设置名称,用中文就使用u&quot;xx&quot;\n            validators表示验证数据，是一个列表类型\n            DataRequired表示必须输入，有一个参数，表示验证失败的时候显示文本\n            EqualTo表示和谁一样，有连个参数，第一个填写和谁一样，第二个填写验证失败的显示文本\n    &#39;&#39;&#39;\n        user_name &#x3D; StringField(label&#x3D;u&quot;用户名&quot;, validators&#x3D;[DataRequired(&quot;用户名不能为空&quot;)])\n        password &#x3D; PasswordField(label&#x3D;r&quot;密码&quot;, validators&#x3D;[DataRequired(&quot;密码不能为空&quot;)])\n        password2 &#x3D; PasswordField(label&#x3D;r&quot;确认密码&quot;, validators&#x3D;[DataRequired(&quot;确认密码不能为空&quot;), EqualTo(&quot;password&quot;, &quot;两次密码不一致&quot;)])\n        submit &#x3D; SubmitField(label&#x3D;u&quot;提交&quot;)\n\n\n        @app.route(&quot;&#x2F;login&quot;, methods&#x3D;[&quot;POST&quot;, &quot;GET&quot;])\n        def login():\n            &#39;&#39;&#39;创建表单对象&#39;&#39;&#39;\n            form &#x3D; LoginForm()\n            # 判断form中的数据是否合理\n            # 如果form中的数据完全满足验证，则返回真，否则返回假\n            if form.validate_on_submit():\n                uname &#x3D; form.user_name.data\n                pwd &#x3D; form.password.data\n                pwd2 &#x3D; form.password2.data\n                print(uname, pwd, pwd2)\n                session[&quot;username&quot;] &#x3D; uname\n                url &#x3D; url_for(&quot;index&quot;)\n                return redirect(url)\n            return render_template(&quot;login.html&quot;, form&#x3D;form)\n\n\n在html模板中生成表单:\n     &lt;form  method&#x3D;&quot;post&quot;&gt;\n        &#123;&#123; form.csrf_token&#125;&#125;\n        &#123;&#123; form.user_name.label &#125;&#125; &#123;&#123; form.user_name &#125;&#125;&lt;br&gt;\n        &#123;% for msg in form.user_name.errors %&#125;\n        &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;\n        &#123;% endfor %&#125;\n\n        &#123;&#123; form.password.label &#125;&#125; &#123;&#123; form.password &#125;&#125;&lt;br&gt;\n        &#123;% for msg in form.password.errors %&#125;\n        &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;\n        &#123;% endfor %&#125;\n\n        &#123;&#123; form.password2.label &#125;&#125; &#123;&#123; form.password2 &#125;&#125;&lt;br&gt;\n        &#123;% for msg in form.password2.errors %&#125;\n        &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;\n        &#123;% endfor %&#125;\n\n        &lt;p&gt;&#123;&#123; form.submit &#125;&#125;&lt;&#x2F;p&gt;\n\n     &lt;&#x2F;form&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"宏的定义和使用\"><a href=\"#宏的定义和使用\" class=\"headerlink\" title=\"宏的定义和使用\"></a>宏的定义和使用</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">在同一个html中定义和使用:\n    没有参数:\n        定义:\n        &#123;% macro input() %&#125;\n         &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;&quot; size&#x3D;&quot;30&quot;&gt;\n        &#123;% endmacro %&#125;\n        使用:\n        &#123;&#123; input() &#125;&#125;\n    有参数:\n    定义:\n    &#123;% macro input(type,name,size) %&#125;\n     &lt;input type&#x3D;&#123;&#123;type&#125;&#125; name&#x3D;&#123;&#123;name&#125;&#125; value&#x3D;&quot;&quot; size&#x3D;&#123;&#123;size&#125;&#125;&gt;\n    &#123;% endmacro %&#125;\n    使用:\n    &#123;&#123; input(&#39;text&#39;, &#39;username&#39;, 40) &#125;&#125;\n\n在不同html中定义和使用:\n    没有参数:\n        定义在macro2.html中:\n        &#123;% macro input() %&#125;\n         &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;&quot; size&#x3D;&quot;30&quot;&gt;\n        &#123;% endmacro %&#125;\n        在macro。html使用:\n        &#123;% import &quot;macro2.html&quot; as 别名 %&#125;\n        &#123;&#123; 别名.input() &#125;&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"模板继承\"><a href=\"#模板继承\" class=\"headerlink\" title=\"模板继承\"></a>模板继承</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">和django中的模板继承一样: &#123;% extend &quot;模板名&quot; %&#125;  使用 &#123;% block xx %&#125; &#123;% endblock xx %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"flask中一些特殊的方法\"><a href=\"#flask中一些特殊的方法\" class=\"headerlink\" title=\"flask中一些特殊的方法\"></a>flask中一些特殊的方法</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">有些方法和变量不需要传递也可以在模板中直接使用\nconfig中的方法\nrequest中的方法\nurl_for中的方法\n模板的闪现:\n    闪现就是表示有的信息，只是出现一次\n    在flask中:from flask import flash\n            在视图中使用flash(xxx)来添加信息，可以添加很多条\n    在模板中:\n        &#123;% for x in get_flashed_messages() %&#125;\n        &#123;&#123; x &#125;&#125;\n        &#123;% endfor %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"flask链接数据库\"><a href=\"#flask链接数据库\" class=\"headerlink\" title=\"flask链接数据库\"></a>flask链接数据库</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install flask-sqlalchemy  模型类到sql语句的转换，再将结果转换为模型类对象\npip install flask-mysqldb   数据库驱动\nfrom flask_sqlalchemy import SQLAlchemy  可以创建数据库对象\n配置:\n    app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] &#x3D; &quot;mysql:&#x2F;&#x2F;root:123456@127.0.0.1:3306&#x2F;msfood&quot;\n    app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] &#x3D; True   # 配置跟踪,数据库和模型类同步\n创建数据库sqlalchemy工具对象,就可以使用数据库了\n    db &#x3D; SQLAlchemy(app)\n\n\n创建模型类\nclass Role(db.Model):\n    &#39;&#39;&#39;身份表&#39;&#39;&#39;\n    __tablename__ &#x3D; &quot;tbl_roles&quot;  # 指明表名\n    id &#x3D; db.Column(db.Integer, primary_key&#x3D;True)\n    name &#x3D; db.Column(db.String(32), unique&#x3D;True)\n    users &#x3D; db.relationship(&quot;User&quot;, backref&#x3D;&quot;role&quot;)\n     def __repr__(self):\n        &#39;&#39;&#39;补充方法,可以让显示对象的时候更直观,类似于__str__方法&#39;&#39;&#39;\n        return f&#39;&#123;self.users&#125;&#39;\nclass User(db.Model):\n    &#39;&#39;&#39;用户表&#39;&#39;&#39;\n    __tablename__ &#x3D; &quot;tbl_users&quot;  # 指明数据库的表名\n    id &#x3D; db.Column(db.Integer, primary_key&#x3D;True)  # 主键，自动递增\n    name &#x3D; db.Column(db.String(64), unique&#x3D;True)\n    email &#x3D; db.Column(db.String(128), unique&#x3D;True)\n    password &#x3D; db.Column(db.String(128))\n    role_id &#x3D; db.Column(db.Integer, db.ForeignKey(&quot;tbl_roles.id&quot;))\n\n生成数据表:\n    *第一次生成的时候清除所有数据:\n         db.drop_all()\n    创建所有表\n        db.create_all()\n\n说明:\n    创建表的时候，和底层相关，只要是表中的一行，都是有关底层的，用的都是真实的表的名字\n    users &#x3D; db.relationship(&quot;User&quot;, backref&#x3D;&quot;role&quot;): 这个语句就是表示和底层无关，只和flask中的对象有关，User就是一个模型对象\n        users表和roles表是有关联的（外键）,那么db.relationship就可以让两个表相互拿东西，表示从User模型类中拿出和Role模型有关联的数据\n        backref表示没有定义relationship的对方表中，也可以反推拿出和User模型有关的Role模型的数据\n        使用方法:\n            在Role模型:role.users\n            在user模型中:user.role\n\n添加数据:\n    创建对象:xx &#x3D; 模型(属性&#x3D;值，属性&#x3D;值)\n    session记录对象任务:db.session.add(xx),添加一条数据，db.session.add_all(),添加多条数据\n    提交任务到数据库:db.session.commit()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"sqlalchemy查询\"><a href=\"#sqlalchemy查询\" class=\"headerlink\" title=\"sqlalchemy查询\"></a>sqlalchemy查询</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">用模型类来查询\n模型类.query.all():查询所有数据，返回的是一个列表，可以取出某一个对象，然后读取属性值\n模型类.query.first():返回第一条记录\n模型类.query.get(主键的id):根据主键id获取对象\n模型类.query.filter_by(字段&#x3D;xx,字段&#x3D;&#x3D;xx).all():获取满足条件的所有数据,条件是与\n模型类.query.filter(模型类.字段&#x3D;&#x3D;xx,模型类.字段&#x3D;&#x3D;xx).all():拿出满足条件的所有数据，条件是与\n模型类.query.filter(or_(模型类.字段&#x3D;&#x3D;xx,模型类.字段.endswith(xxx))).all():拿出满足条件的所有数据，条件是或，使用或必须导入from sqlalchemy import or_\n模型类.query.filter(条件).offset(2).limit(3).order_by(模型类.字段.desc()).all():返回满足条件并且忽略前两条数据，取出三条数据然后降序排列的数据，每一个部分都可以单独使用\ndb.session.query(模型类.字段, func.count(模型类.字段)).group_by(模型类.字段).all():分组查询，from sqlalchemy import func,func.聚合函数(属性),就可以查出来<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"sqlalchemy修改\"><a href=\"#sqlalchemy修改\" class=\"headerlink\" title=\"sqlalchemy修改\"></a>sqlalchemy修改</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">模型类.query.filter(条件).update(&#123;字段名:值,字段名:值,字段名:值&#125;)\ndb.session.commit()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"sqlalchemy删除\"><a href=\"#sqlalchemy删除\" class=\"headerlink\" title=\"sqlalchemy删除\"></a>sqlalchemy删除</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">xx &#x3D; 模型类.query.get(x)\ndb.session.delete(xx)\ndb.session.commit()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"flask中和django一样使用迁移的方式\"><a href=\"#flask中和django一样使用迁移的方式\" class=\"headerlink\" title=\"flask中和django一样使用迁移的方式\"></a>flask中和django一样使用迁移的方式</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install flask-migrate\nfrom flask_script import Manager\nfrom flask_migrate import Migrate, MigrateCommand\n\ndb &#x3D; SQLAlchemy(app)\n\n创建flask脚本管理工具\nmanager &#x3D; Manager(app)\n创建数据库迁移工具对象\nMigrate(app, db)\n向manager对象中添加数据的操作命令\nmanager.add_command(&quot;操作的名字&quot;, MigrateCommand)\n\nmain中:\n    manager.run()\n终端中:\n    python3 xxx.py 操作的名字 init  : 让他初始化一下，自动创文件夹\n    python3 xxx.py 操作的名字 migrate -m &quot;版本说明信息&quot; : 生成迁移文件（版本说明可以不要），同价与django中的makemigrations\n    多次migrate之后需要更新数据库:python3 xxx.py 操作的名字 upgrade，可以升级同步\n    python3 xxx.py 操作的名字 history : 查看历史修改\n    python3 xxx.py 操作的名字 downgrade 版本编号 : 版本回退\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"flask发送邮件\"><a href=\"#flask发送邮件\" class=\"headerlink\" title=\"flask发送邮件\"></a>flask发送邮件</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install flask-mail\nfrom flask_mail import Mail, Message\napp &#x3D; Flask(__name__)\n\napp.config.update(\n    DEBUG&#x3D;True,\n    MAIL_SERVER&#x3D;&#39;smtp.qq.com&#39;,\n    MAIL_PROT&#x3D;465,\n    MAIL_USE_TLS&#x3D;True,\n    MAIL_USERNAME&#x3D;&#39;749062870@qq.com&#39;,\n    MAIL_PASSWORD&#x3D;&#39;kttumcufpqasbcii&#39;,\n)\n\n # sender发送方,recipients接收方列表\n    mail &#x3D; Mail() : 创建mail对象\n    mail.init_app(app) : 初始化mail对象\n    msg &#x3D; Message(&quot;傻逼&quot;, sender&#x3D;&quot;749062870@qq.com&quot;, recipients&#x3D;[&quot;2807175480@qq.com&quot;]) : 设置邮件消息的邮件头\n    msg.body &#x3D; &quot;傻逼&quot;  : 设置邮件的正文\n    mail.send(msg) : 发送邮件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"蓝图（Blueprint）\"><a href=\"#蓝图（Blueprint）\" class=\"headerlink\" title=\"蓝图（Blueprint）\"></a>蓝图（Blueprint）</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">之前写的都在一个py文件中\n蓝图就是分割各个块\n将视图写在其他的py文件中，那么不用再给写在外面的视图加装饰器，可以在有app的py文件中导入，然后通过app.route(&quot;路径&quot;)(视图函数)\n\n蓝图的正解:\n    &#39;&#39;&#39;\n        蓝图和django中的各个应用差不多,一个蓝图自成一块，在主窗口中注册进app里面就可以使用\n        使用方法:\n            创建一个应用目录，再添加一个__init__.py让这个目录成为一个可以调动的包，再__init__.py中定义好蓝图,再到视图中导入这个蓝图，就可以使用，最后再视图使用之后，再到__init__.py中\n            导入视图中使用了蓝图的视图函数。\n            蓝图再使用模板文件和静态文件的时候，和主app不同，主app有默认的配置，而蓝图中没有，需要再定义蓝图的时候手动设置，和主app的设置方法是一样的\n            蓝图在没有定义静态文件目录和模板文件目录的时候，默认是使用主app的，就算配置可静态目录和模板目录，蓝图也是先去主app的静态目录和模板目录查找，没有找到在回到自己的里面去找，这个时候，就是主app的优先级大于蓝图\n            在视图中使用蓝图:\n                1、在__init__.py中from flask import Blueprint\n                2、在__init__.py中定义蓝图,xx &#x3D; Blueprint(&quot;蓝图名&quot;,__name__)\n                3、导入蓝图\n                4、用蓝图装饰，和主app装饰视图一摸一样的\n                5、在__init__.py中导入使用了蓝图的视图函数（导入到蓝图之下）\n                6、在主app的文件中注册蓝图:app.register_blueprint(蓝图, url_prefix&#x3D;&quot;&#x2F;lqs&quot;)，url_prefix表示前缀\n    &#39;&#39;&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">在flask中使用单元测试的时候，千万不要动源代码，重新写个测试文件\nimport unittest\n导入要测试的flask代码文件\n创建测试类，继承unittest.TestCase\n定义好测试函数\nimport unittest\nimport json\nfrom flaskDay14 import Test\n\nclass Index(unittest.TestCase):\n    def setUp(self):\n        # 设置flask工作在测试模式下，在测试出错的时候会给出具体错误行\n        Test.app.testing &#x3D; True\n        # 模拟flask客户端,setUp中的代码会在所有函数之前调用\n        self.client &#x3D; Test.app.test_client()\n    def test_index(self):\n        # 模拟请求返回数据\n        ret &#x3D; self.client.post(&quot;&#x2F;index&quot;, data&#x3D;&#123;&quot;username&quot;:&quot;lqs&quot;, &quot;password&quot;:&quot;lqs&quot;&#125;)\n        # 拿到数据\n        resp &#x3D; ret.data\n        # 装成字典\n        resp &#x3D; json.loads(resp)\n        # 断言\n        self.assertIn(&quot;code&quot;, resp)\n        self.assertEqual(resp[&quot;code&quot;], 2)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    # 测试\n    unittest.main()\n\n对所有的测试都可以使用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"fdfs搭建","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T08:14:57.000Z","password":null,"summary":"FastDfs搭建","_content":"## FastDFS\n---\n### FastDFS安装\n#### 安装fastdfs依赖包libfastcommon-master\n```shell\n./make.sh\nsudo ./make.sh install\n```\n#### 安装fastdfs\n```\nfastdfs-master目录中\n./make.sh\nsudo ./make.sh install\n```\t\n#### 配置tracker\n\n```\t\t\ncp/etc/fdfs/tracker.conf.sample/etc/fdfs/tracker.conf\n\n在/home/python/目录中创建目录 fastdfs/tracker      \t\t\t\n    mkdir –p /home/python/fastdfs/tracker\n\n编辑/etc/fdfs/tracker.conf配置文件    \n    sudo vim /etc/fdfs/tracker.conf\n    修改 base_path=xxx\n```\t\n#### 配置storage\n```\nsudo cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf\n\n在/home/python/fastdfs/ 目录中创建目录 storage\n    mkdir –p /home/python/fastdfs/storage\n\n编辑/etc/fdfs/storage.conf配置文件  \n    sudo vim /etc/fdfs/storage.conf\n\n修改内容：\n    base_path=/home/python/fastdfs/storage\n    store_path0=/home/python/fastdfs/storage\n    tracker_server=自己ubuntu虚拟机的ip地址:22122\n```\n#### 配置client\n\n```\nbase_path=/home/python/fastdfs/tracker\ntracker_server=自己ubuntu虚拟机的ip地址:22122\n```\t\n\n### 上传文件测试\n\n```\nfdfs_upload_file /etc/fdfs/client.conf 要上传的图片文件 \n```","source":"_posts/fdfs搭建.md","raw":"---\ntitle: fdfs搭建\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 16:14:57\npassword:\nsummary: FastDfs搭建\ntags: fdfs\ncategories: 工具\n---\n## FastDFS\n---\n### FastDFS安装\n#### 安装fastdfs依赖包libfastcommon-master\n```shell\n./make.sh\nsudo ./make.sh install\n```\n#### 安装fastdfs\n```\nfastdfs-master目录中\n./make.sh\nsudo ./make.sh install\n```\t\n#### 配置tracker\n\n```\t\t\ncp/etc/fdfs/tracker.conf.sample/etc/fdfs/tracker.conf\n\n在/home/python/目录中创建目录 fastdfs/tracker      \t\t\t\n    mkdir –p /home/python/fastdfs/tracker\n\n编辑/etc/fdfs/tracker.conf配置文件    \n    sudo vim /etc/fdfs/tracker.conf\n    修改 base_path=xxx\n```\t\n#### 配置storage\n```\nsudo cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf\n\n在/home/python/fastdfs/ 目录中创建目录 storage\n    mkdir –p /home/python/fastdfs/storage\n\n编辑/etc/fdfs/storage.conf配置文件  \n    sudo vim /etc/fdfs/storage.conf\n\n修改内容：\n    base_path=/home/python/fastdfs/storage\n    store_path0=/home/python/fastdfs/storage\n    tracker_server=自己ubuntu虚拟机的ip地址:22122\n```\n#### 配置client\n\n```\nbase_path=/home/python/fastdfs/tracker\ntracker_server=自己ubuntu虚拟机的ip地址:22122\n```\t\n\n### 上传文件测试\n\n```\nfdfs_upload_file /etc/fdfs/client.conf 要上传的图片文件 \n```","slug":"fdfs搭建","published":1,"updated":"2023-01-19T10:11:08.497Z","_id":"cld2uqf6600041svk69nrdz5r","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"FastDFS\"><a href=\"#FastDFS\" class=\"headerlink\" title=\"FastDFS\"></a>FastDFS</h2><hr>\n<h3 id=\"FastDFS安装\"><a href=\"#FastDFS安装\" class=\"headerlink\" title=\"FastDFS安装\"></a>FastDFS安装</h3><h4 id=\"安装fastdfs依赖包libfastcommon-master\"><a href=\"#安装fastdfs依赖包libfastcommon-master\" class=\"headerlink\" title=\"安装fastdfs依赖包libfastcommon-master\"></a>安装fastdfs依赖包libfastcommon-master</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./make.sh\n<span class=\"token function\">sudo</span> ./make.sh <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"安装fastdfs\"><a href=\"#安装fastdfs\" class=\"headerlink\" title=\"安装fastdfs\"></a>安装fastdfs</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">fastdfs-master目录中\n.&#x2F;make.sh\nsudo .&#x2F;make.sh install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"配置tracker\"><a href=\"#配置tracker\" class=\"headerlink\" title=\"配置tracker\"></a>配置tracker</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cp&#x2F;etc&#x2F;fdfs&#x2F;tracker.conf.sample&#x2F;etc&#x2F;fdfs&#x2F;tracker.conf\n\n在&#x2F;home&#x2F;python&#x2F;目录中创建目录 fastdfs&#x2F;tracker      \t\t\t\n    mkdir –p &#x2F;home&#x2F;python&#x2F;fastdfs&#x2F;tracker\n\n编辑&#x2F;etc&#x2F;fdfs&#x2F;tracker.conf配置文件    \n    sudo vim &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf\n    修改 base_path&#x3D;xxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"配置storage\"><a href=\"#配置storage\" class=\"headerlink\" title=\"配置storage\"></a>配置storage</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo cp &#x2F;etc&#x2F;fdfs&#x2F;storage.conf.sample &#x2F;etc&#x2F;fdfs&#x2F;storage.conf\n\n在&#x2F;home&#x2F;python&#x2F;fastdfs&#x2F; 目录中创建目录 storage\n    mkdir –p &#x2F;home&#x2F;python&#x2F;fastdfs&#x2F;storage\n\n编辑&#x2F;etc&#x2F;fdfs&#x2F;storage.conf配置文件  \n    sudo vim &#x2F;etc&#x2F;fdfs&#x2F;storage.conf\n\n修改内容：\n    base_path&#x3D;&#x2F;home&#x2F;python&#x2F;fastdfs&#x2F;storage\n    store_path0&#x3D;&#x2F;home&#x2F;python&#x2F;fastdfs&#x2F;storage\n    tracker_server&#x3D;自己ubuntu虚拟机的ip地址:22122<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"配置client\"><a href=\"#配置client\" class=\"headerlink\" title=\"配置client\"></a>配置client</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">base_path&#x3D;&#x2F;home&#x2F;python&#x2F;fastdfs&#x2F;tracker\ntracker_server&#x3D;自己ubuntu虚拟机的ip地址:22122<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"上传文件测试\"><a href=\"#上传文件测试\" class=\"headerlink\" title=\"上传文件测试\"></a>上传文件测试</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">fdfs_upload_file &#x2F;etc&#x2F;fdfs&#x2F;client.conf 要上传的图片文件 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"FastDFS\"><a href=\"#FastDFS\" class=\"headerlink\" title=\"FastDFS\"></a>FastDFS</h2><hr>\n<h3 id=\"FastDFS安装\"><a href=\"#FastDFS安装\" class=\"headerlink\" title=\"FastDFS安装\"></a>FastDFS安装</h3><h4 id=\"安装fastdfs依赖包libfastcommon-master\"><a href=\"#安装fastdfs依赖包libfastcommon-master\" class=\"headerlink\" title=\"安装fastdfs依赖包libfastcommon-master\"></a>安装fastdfs依赖包libfastcommon-master</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./make.sh\n<span class=\"token function\">sudo</span> ./make.sh <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"安装fastdfs\"><a href=\"#安装fastdfs\" class=\"headerlink\" title=\"安装fastdfs\"></a>安装fastdfs</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">fastdfs-master目录中\n.&#x2F;make.sh\nsudo .&#x2F;make.sh install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"配置tracker\"><a href=\"#配置tracker\" class=\"headerlink\" title=\"配置tracker\"></a>配置tracker</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">cp&#x2F;etc&#x2F;fdfs&#x2F;tracker.conf.sample&#x2F;etc&#x2F;fdfs&#x2F;tracker.conf\n\n在&#x2F;home&#x2F;python&#x2F;目录中创建目录 fastdfs&#x2F;tracker      \t\t\t\n    mkdir –p &#x2F;home&#x2F;python&#x2F;fastdfs&#x2F;tracker\n\n编辑&#x2F;etc&#x2F;fdfs&#x2F;tracker.conf配置文件    \n    sudo vim &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf\n    修改 base_path&#x3D;xxx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"配置storage\"><a href=\"#配置storage\" class=\"headerlink\" title=\"配置storage\"></a>配置storage</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo cp &#x2F;etc&#x2F;fdfs&#x2F;storage.conf.sample &#x2F;etc&#x2F;fdfs&#x2F;storage.conf\n\n在&#x2F;home&#x2F;python&#x2F;fastdfs&#x2F; 目录中创建目录 storage\n    mkdir –p &#x2F;home&#x2F;python&#x2F;fastdfs&#x2F;storage\n\n编辑&#x2F;etc&#x2F;fdfs&#x2F;storage.conf配置文件  \n    sudo vim &#x2F;etc&#x2F;fdfs&#x2F;storage.conf\n\n修改内容：\n    base_path&#x3D;&#x2F;home&#x2F;python&#x2F;fastdfs&#x2F;storage\n    store_path0&#x3D;&#x2F;home&#x2F;python&#x2F;fastdfs&#x2F;storage\n    tracker_server&#x3D;自己ubuntu虚拟机的ip地址:22122<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"配置client\"><a href=\"#配置client\" class=\"headerlink\" title=\"配置client\"></a>配置client</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">base_path&#x3D;&#x2F;home&#x2F;python&#x2F;fastdfs&#x2F;tracker\ntracker_server&#x3D;自己ubuntu虚拟机的ip地址:22122<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"上传文件测试\"><a href=\"#上传文件测试\" class=\"headerlink\" title=\"上传文件测试\"></a>上传文件测试</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">fdfs_upload_file &#x2F;etc&#x2F;fdfs&#x2F;client.conf 要上传的图片文件 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"git笔记","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T07:07:32.000Z","password":null,"summary":"Git工具使用","_content":"## Git（文件只有放入了暂存区之后才会被追踪）\n### 特点\n-\t版本控制:解决多人同时开发的代码问题，解决找回历史代码的问题\n-\t分布式:Git是分布式版本控制系统，如同一个GIT仓库，可以分不到不同的机器上，工作原理:找一台电脑做服务器（中央服务器），不关机，其他的人可以把这个服务器克隆到自己的电脑上\n\n### 安装Git\n```shell\nsudo apt-get install git\n```\n#### 创建版本库\n```shell\ngit init\n```\n#### 创建版本(两步)\n```shell\ngit add 文件\n\ngit commit -m ‘版本说明’ # 版本:第一次创建版本的时候是记录里面的内容，以后的版本都是保存被修改的信息\n```\n#### 查询版本记录信息\n```shell\n git log\n\n git log --pretty=oneline # 更好用\n\n git log --graph --pretty=oneline # 可以查看分支图\n```\n#### 版本的回退\n>\t有一个指针HEAD指向最新的版本， 上一个版本可以被表示为\n\t\n> HEAD^,一个^表示前一个版本，100个^表示第前100个版本,还可以表示为:HEAD~1,HEAD~100,分别表示前一个和前100个版本\n \n> 版本回退命令\n\n```shell\n git reset –hard HEAD~1\n```\n> 版本前进命令\n\n```shell\ngit reset –hard 版本编号 #（commit) 版本编号可以通过git reflog来查看，这里面都是操作记录\n```\n\n### 工作区\n就是使用git init命令的目录，创建文件和编辑文件都是在工作区完成的\n版本库:拥有暂存区,HEAD区\n```shell\ngit add . # 就是添加修改到暂存区,git commit就是创建版本\n\ngit status # 可以查看工作区的情况\n\ngit add # 可以同时添加很多个文件（也可以是目录）到暂存区，用空格分别，并且使用git commit的时候可以将同时提交的所有文件，创建一个版本，\n\ngit checkout – 文件名 # 在没有加到暂存区可以直接用这个命令丢弃修改(删除以后也可用这个恢复)，如果已经加到了暂存区，可以通过git reset HEAD 文件名解除添加到暂存区，然后用这个命令直接放弃修改\n```\n\n\n\n#### 删除文件\nrm 文件名,因为是对工作区的文件的修改，所以可以用git checkout恢复，也可以用git rm将删除放入暂存区，彻底删除。\n```text\n第一步：使用rm\n第二步：如果要恢复,git checkout --文件名,如果要删除，git rm放入暂存区\n第三步: 如果删除文件的修改被放入了暂存区，可以用git reset HEAD 文件名 解除暂存，然后用git checkout恢复\n```\n\n\n\n#### git 分支的概念(比如两个平行的宇宙，出现了交点)\n```shell\ngit主分支:master分支,HEAD指向master然后master再指向提交的指针\ngit从分支:dev分支，和master分支相互独立，可以和master分支合并，还可以删除\n\ngit branch可以查看有多少个分支\n创建分支: git branch 名字\n创建新的分支并切换到新分支: git checkout -b dev（名字随便取）,创建了dev分支，HEAD就会指向dev\n切换到master分支: git checkout master\n将dev分支的东西合并到master（一般都是合并在master分支上，也可以合并到其他的相关分支上，比如修复hug的时候）：git merge dev\n删除dev分支：git branch -d dev\n```\n>  分支合并冲突:master分支和其他分支都修改了同一个文件的版本，合并就会报错，解决办法就是手动解决 \n\n>  分支的管理决策: 在两个分支中修改了不同的文件的版本，那么合并的时候，就不会是快速合并,而是跳出一个弹框,第一行写入你的说明信息，退出之后合并完成，或者git merge --no-ff -m 合并版本说明 合并的分支， 这样可以禁用快速合并，保留分支的文件信息\n\n>  分支bug管理:当我们在一个分支上进行工作的时候，其他的分支有bug需要及时的修复，那么可以使用git stash保存正在工作的分支上的状态，然后马上去需要修复bug的分支上修复bug：\n-\t首先我们要确定在哪一个分支上修复bug \n-\t然后在到那个分支上创建一个临时的分支来修复这个bug \n-\t然后切换回出hug的分支\n-\t然后合并分支，并用 git merge --no-ff -m '说明信息' 临时分支,用来保存bug记录\n-\t然后删除临时分支，在修复完成以后,再回到最初工作的分支\n-\t用git stash pop恢复工作现场就可以继续工作（用git stash list 可以查看保存的工作现场的列表)\n\n\n\n\n#### 链接远程的仓库\n```text\n生成ssh公钥:ssh-keygen -t rsa -C'749062870@qq.com'一直回车(3个)\n\n生成的ssh存放在用户文件夹下面的.ssh下面\n\n将.ssh下面的id_rsa.pub内容复制到github\n\n使用ssh -T git@github.com来测试是否连通\n```\n\n\n#### GitHub：\n```text\n1、创建新的仓库(同git中的git init): start project  => 项目名称 => 公开 => 两个add(readme使用说明，gitignore忽略文件)\n2、添加ssh账户(本机和github交互):创好仓库之后，点击头像下拉，找到settings => SSH and GPG keys => New SSH key就可以添加本地ssh账户，Title随便写,Key则需要本地的ssh公钥，（生成本地电脑的ssh公钥，回到家目录，编辑vim .gitconfig,然后ssh-keygen -t rsa -C '749062870@qq.com'一直回车，完成之后，cd ssh，然后cat id_rsa.pub，复制过去就行了）\n3、克隆项目:github中的仓库中，code下拉中，选择ssh(我们用的就是ssh)，复制地址到相对应的文件夹下用终端 git clone 复制的地址, 将github中的项目下载到本地\n4、推送代码:被下载到本地的项目,不用master分支开发，而是创建一个自己的分支，一直在自己的分支上开发，开发完成之后先add，commit到本地，然后可以用git push origin 分支名称，就可以推送到github上面\n5、追踪远程分支：git branch --set-upstream-to=origin/远程分支 本地分支,追踪之后，就可以用git status来查看本地分支和远程分支的提交情况\n6、拉去代码: git pull origin 要拉取的分支.从远程分支上下载，拉取代码\n\n```\n\n> 链接——>切换分支-->add--->commit---->push到lqs\n\n##### 常用命令\n\n```shell\ngit config --global user.name '用户名' # 修改配置的用户名\ngit config --global user.email '邮箱'  # 修改配置的邮箱\n\ngit init # 初始化git仓库\ngit status # 查看工作区的文件是否被管理\ngit add . # 把工作区的文件提交到暂存区，也就是将工作区的文件进行管理\ngit commit -m '日志' # 将暂存区的文件提交到本地仓库\ngit log # 查看提交的日志，点击q退出\ngit branch # 查看本地分支\ngit branch -a # 查看本地和远程的分支\ngit checkout '远程分支' # 可以从本地分支切换到远程分支\ngit checkout -b '分支名称' # 新建并切换到分支\ngit branch -d '分支名称' # 删除分支，分支被合并之后才允许删除\ngit branch -D '分支名称' # 删除分支，强制删除\ngit merge '分支名称' # 合并分支\ngit push '远程地址 '# 将本地仓库推送到远程仓库或者如下\ngit remote add origin '远程地址' # 给远程仓库添加别名\ngit push -u origin '分支名称' # 远程仓库没有这个分支，第一次向远程仓库推送分支\ngit push  # 第二次推送\ngit clone '远程地址' # 克隆远程仓库的代码\ngit pull '远程地址' '远程分支' # 拉去远程仓库的代码\n```","source":"_posts/git笔记.md","raw":"---\ntitle: git笔记\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 15:07:32\npassword:\nsummary: Git工具使用\ntags: git\ncategories: 工具\n---\n## Git（文件只有放入了暂存区之后才会被追踪）\n### 特点\n-\t版本控制:解决多人同时开发的代码问题，解决找回历史代码的问题\n-\t分布式:Git是分布式版本控制系统，如同一个GIT仓库，可以分不到不同的机器上，工作原理:找一台电脑做服务器（中央服务器），不关机，其他的人可以把这个服务器克隆到自己的电脑上\n\n### 安装Git\n```shell\nsudo apt-get install git\n```\n#### 创建版本库\n```shell\ngit init\n```\n#### 创建版本(两步)\n```shell\ngit add 文件\n\ngit commit -m ‘版本说明’ # 版本:第一次创建版本的时候是记录里面的内容，以后的版本都是保存被修改的信息\n```\n#### 查询版本记录信息\n```shell\n git log\n\n git log --pretty=oneline # 更好用\n\n git log --graph --pretty=oneline # 可以查看分支图\n```\n#### 版本的回退\n>\t有一个指针HEAD指向最新的版本， 上一个版本可以被表示为\n\t\n> HEAD^,一个^表示前一个版本，100个^表示第前100个版本,还可以表示为:HEAD~1,HEAD~100,分别表示前一个和前100个版本\n \n> 版本回退命令\n\n```shell\n git reset –hard HEAD~1\n```\n> 版本前进命令\n\n```shell\ngit reset –hard 版本编号 #（commit) 版本编号可以通过git reflog来查看，这里面都是操作记录\n```\n\n### 工作区\n就是使用git init命令的目录，创建文件和编辑文件都是在工作区完成的\n版本库:拥有暂存区,HEAD区\n```shell\ngit add . # 就是添加修改到暂存区,git commit就是创建版本\n\ngit status # 可以查看工作区的情况\n\ngit add # 可以同时添加很多个文件（也可以是目录）到暂存区，用空格分别，并且使用git commit的时候可以将同时提交的所有文件，创建一个版本，\n\ngit checkout – 文件名 # 在没有加到暂存区可以直接用这个命令丢弃修改(删除以后也可用这个恢复)，如果已经加到了暂存区，可以通过git reset HEAD 文件名解除添加到暂存区，然后用这个命令直接放弃修改\n```\n\n\n\n#### 删除文件\nrm 文件名,因为是对工作区的文件的修改，所以可以用git checkout恢复，也可以用git rm将删除放入暂存区，彻底删除。\n```text\n第一步：使用rm\n第二步：如果要恢复,git checkout --文件名,如果要删除，git rm放入暂存区\n第三步: 如果删除文件的修改被放入了暂存区，可以用git reset HEAD 文件名 解除暂存，然后用git checkout恢复\n```\n\n\n\n#### git 分支的概念(比如两个平行的宇宙，出现了交点)\n```shell\ngit主分支:master分支,HEAD指向master然后master再指向提交的指针\ngit从分支:dev分支，和master分支相互独立，可以和master分支合并，还可以删除\n\ngit branch可以查看有多少个分支\n创建分支: git branch 名字\n创建新的分支并切换到新分支: git checkout -b dev（名字随便取）,创建了dev分支，HEAD就会指向dev\n切换到master分支: git checkout master\n将dev分支的东西合并到master（一般都是合并在master分支上，也可以合并到其他的相关分支上，比如修复hug的时候）：git merge dev\n删除dev分支：git branch -d dev\n```\n>  分支合并冲突:master分支和其他分支都修改了同一个文件的版本，合并就会报错，解决办法就是手动解决 \n\n>  分支的管理决策: 在两个分支中修改了不同的文件的版本，那么合并的时候，就不会是快速合并,而是跳出一个弹框,第一行写入你的说明信息，退出之后合并完成，或者git merge --no-ff -m 合并版本说明 合并的分支， 这样可以禁用快速合并，保留分支的文件信息\n\n>  分支bug管理:当我们在一个分支上进行工作的时候，其他的分支有bug需要及时的修复，那么可以使用git stash保存正在工作的分支上的状态，然后马上去需要修复bug的分支上修复bug：\n-\t首先我们要确定在哪一个分支上修复bug \n-\t然后在到那个分支上创建一个临时的分支来修复这个bug \n-\t然后切换回出hug的分支\n-\t然后合并分支，并用 git merge --no-ff -m '说明信息' 临时分支,用来保存bug记录\n-\t然后删除临时分支，在修复完成以后,再回到最初工作的分支\n-\t用git stash pop恢复工作现场就可以继续工作（用git stash list 可以查看保存的工作现场的列表)\n\n\n\n\n#### 链接远程的仓库\n```text\n生成ssh公钥:ssh-keygen -t rsa -C'749062870@qq.com'一直回车(3个)\n\n生成的ssh存放在用户文件夹下面的.ssh下面\n\n将.ssh下面的id_rsa.pub内容复制到github\n\n使用ssh -T git@github.com来测试是否连通\n```\n\n\n#### GitHub：\n```text\n1、创建新的仓库(同git中的git init): start project  => 项目名称 => 公开 => 两个add(readme使用说明，gitignore忽略文件)\n2、添加ssh账户(本机和github交互):创好仓库之后，点击头像下拉，找到settings => SSH and GPG keys => New SSH key就可以添加本地ssh账户，Title随便写,Key则需要本地的ssh公钥，（生成本地电脑的ssh公钥，回到家目录，编辑vim .gitconfig,然后ssh-keygen -t rsa -C '749062870@qq.com'一直回车，完成之后，cd ssh，然后cat id_rsa.pub，复制过去就行了）\n3、克隆项目:github中的仓库中，code下拉中，选择ssh(我们用的就是ssh)，复制地址到相对应的文件夹下用终端 git clone 复制的地址, 将github中的项目下载到本地\n4、推送代码:被下载到本地的项目,不用master分支开发，而是创建一个自己的分支，一直在自己的分支上开发，开发完成之后先add，commit到本地，然后可以用git push origin 分支名称，就可以推送到github上面\n5、追踪远程分支：git branch --set-upstream-to=origin/远程分支 本地分支,追踪之后，就可以用git status来查看本地分支和远程分支的提交情况\n6、拉去代码: git pull origin 要拉取的分支.从远程分支上下载，拉取代码\n\n```\n\n> 链接——>切换分支-->add--->commit---->push到lqs\n\n##### 常用命令\n\n```shell\ngit config --global user.name '用户名' # 修改配置的用户名\ngit config --global user.email '邮箱'  # 修改配置的邮箱\n\ngit init # 初始化git仓库\ngit status # 查看工作区的文件是否被管理\ngit add . # 把工作区的文件提交到暂存区，也就是将工作区的文件进行管理\ngit commit -m '日志' # 将暂存区的文件提交到本地仓库\ngit log # 查看提交的日志，点击q退出\ngit branch # 查看本地分支\ngit branch -a # 查看本地和远程的分支\ngit checkout '远程分支' # 可以从本地分支切换到远程分支\ngit checkout -b '分支名称' # 新建并切换到分支\ngit branch -d '分支名称' # 删除分支，分支被合并之后才允许删除\ngit branch -D '分支名称' # 删除分支，强制删除\ngit merge '分支名称' # 合并分支\ngit push '远程地址 '# 将本地仓库推送到远程仓库或者如下\ngit remote add origin '远程地址' # 给远程仓库添加别名\ngit push -u origin '分支名称' # 远程仓库没有这个分支，第一次向远程仓库推送分支\ngit push  # 第二次推送\ngit clone '远程地址' # 克隆远程仓库的代码\ngit pull '远程地址' '远程分支' # 拉去远程仓库的代码\n```","slug":"git笔记","published":1,"updated":"2023-01-19T10:22:10.865Z","_id":"cld2uqf6700051svk3x1qckjr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Git（文件只有放入了暂存区之后才会被追踪）\"><a href=\"#Git（文件只有放入了暂存区之后才会被追踪）\" class=\"headerlink\" title=\"Git（文件只有放入了暂存区之后才会被追踪）\"></a>Git（文件只有放入了暂存区之后才会被追踪）</h2><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>   版本控制:解决多人同时开发的代码问题，解决找回历史代码的问题</li>\n<li>   分布式:Git是分布式版本控制系统，如同一个GIT仓库，可以分不到不同的机器上，工作原理:找一台电脑做服务器（中央服务器），不关机，其他的人可以把这个服务器克隆到自己的电脑上</li>\n</ul>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"创建版本-两步\"><a href=\"#创建版本-两步\" class=\"headerlink\" title=\"创建版本(两步)\"></a>创建版本(两步)</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> 文件\n\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> ‘版本说明’ <span class=\"token comment\"># 版本:第一次创建版本的时候是记录里面的内容，以后的版本都是保存被修改的信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"查询版本记录信息\"><a href=\"#查询版本记录信息\" class=\"headerlink\" title=\"查询版本记录信息\"></a>查询版本记录信息</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log\n\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>oneline <span class=\"token comment\"># 更好用</span>\n\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--graph</span> <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>oneline <span class=\"token comment\"># 可以查看分支图</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"版本的回退\"><a href=\"#版本的回退\" class=\"headerlink\" title=\"版本的回退\"></a>版本的回退</h4><blockquote>\n<p>   有一个指针HEAD指向最新的版本， 上一个版本可以被表示为</p>\n</blockquote>\n<blockquote>\n<p>HEAD^,一个^表示前一个版本，100个^表示第前100个版本,还可以表示为:HEAD<del>1,HEAD</del>100,分别表示前一个和前100个版本</p>\n</blockquote>\n<blockquote>\n<p>版本回退命令</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset –hard HEAD~1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>版本前进命令</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset –hard 版本编号 <span class=\"token comment\">#（commit) 版本编号可以通过git reflog来查看，这里面都是操作记录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"工作区\"><a href=\"#工作区\" class=\"headerlink\" title=\"工作区\"></a>工作区</h3><p>就是使用git init命令的目录，创建文件和编辑文件都是在工作区完成的<br>版本库:拥有暂存区,HEAD区</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 就是添加修改到暂存区,git commit就是创建版本</span>\n\n<span class=\"token function\">git</span> status <span class=\"token comment\"># 可以查看工作区的情况</span>\n\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token comment\"># 可以同时添加很多个文件（也可以是目录）到暂存区，用空格分别，并且使用git commit的时候可以将同时提交的所有文件，创建一个版本，</span>\n\n<span class=\"token function\">git</span> checkout – 文件名 <span class=\"token comment\"># 在没有加到暂存区可以直接用这个命令丢弃修改(删除以后也可用这个恢复)，如果已经加到了暂存区，可以通过git reset HEAD 文件名解除添加到暂存区，然后用这个命令直接放弃修改</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><p>rm 文件名,因为是对工作区的文件的修改，所以可以用git checkout恢复，也可以用git rm将删除放入暂存区，彻底删除。</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">第一步：使用rm\n第二步：如果要恢复,git checkout --文件名,如果要删除，git rm放入暂存区\n第三步: 如果删除文件的修改被放入了暂存区，可以用git reset HEAD 文件名 解除暂存，然后用git checkout恢复<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"git-分支的概念-比如两个平行的宇宙，出现了交点\"><a href=\"#git-分支的概念-比如两个平行的宇宙，出现了交点\" class=\"headerlink\" title=\"git 分支的概念(比如两个平行的宇宙，出现了交点)\"></a>git 分支的概念(比如两个平行的宇宙，出现了交点)</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git主分支:master分支,HEAD指向master然后master再指向提交的指针\ngit从分支:dev分支，和master分支相互独立，可以和master分支合并，还可以删除\n\n<span class=\"token function\">git</span> branch可以查看有多少个分支\n创建分支: <span class=\"token function\">git</span> branch 名字\n创建新的分支并切换到新分支: <span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> dev（名字随便取）,创建了dev分支，HEAD就会指向dev\n切换到master分支: <span class=\"token function\">git</span> checkout master\n将dev分支的东西合并到master（一般都是合并在master分支上，也可以合并到其他的相关分支上，比如修复hug的时候）：git merge dev\n删除dev分支：git branch <span class=\"token parameter variable\">-d</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p> 分支合并冲突:master分支和其他分支都修改了同一个文件的版本，合并就会报错，解决办法就是手动解决 </p>\n</blockquote>\n<blockquote>\n<p> 分支的管理决策: 在两个分支中修改了不同的文件的版本，那么合并的时候，就不会是快速合并,而是跳出一个弹框,第一行写入你的说明信息，退出之后合并完成，或者git merge –no-ff -m 合并版本说明 合并的分支， 这样可以禁用快速合并，保留分支的文件信息</p>\n</blockquote>\n<blockquote>\n<p> 分支bug管理:当我们在一个分支上进行工作的时候，其他的分支有bug需要及时的修复，那么可以使用git stash保存正在工作的分支上的状态，然后马上去需要修复bug的分支上修复bug：</p>\n</blockquote>\n<ul>\n<li>   首先我们要确定在哪一个分支上修复bug </li>\n<li>   然后在到那个分支上创建一个临时的分支来修复这个bug </li>\n<li>   然后切换回出hug的分支</li>\n<li>   然后合并分支，并用 git merge –no-ff -m ‘说明信息’ 临时分支,用来保存bug记录</li>\n<li>   然后删除临时分支，在修复完成以后,再回到最初工作的分支</li>\n<li>   用git stash pop恢复工作现场就可以继续工作（用git stash list 可以查看保存的工作现场的列表)</li>\n</ul>\n<h4 id=\"链接远程的仓库\"><a href=\"#链接远程的仓库\" class=\"headerlink\" title=\"链接远程的仓库\"></a>链接远程的仓库</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">生成ssh公钥:ssh-keygen -t rsa -C'749062870@qq.com'一直回车(3个)\n\n生成的ssh存放在用户文件夹下面的.ssh下面\n\n将.ssh下面的id_rsa.pub内容复制到github\n\n使用ssh -T git@github.com来测试是否连通<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"GitHub：\"><a href=\"#GitHub：\" class=\"headerlink\" title=\"GitHub：\"></a>GitHub：</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">1、创建新的仓库(同git中的git init): start project  => 项目名称 => 公开 => 两个add(readme使用说明，gitignore忽略文件)\n2、添加ssh账户(本机和github交互):创好仓库之后，点击头像下拉，找到settings => SSH and GPG keys => New SSH key就可以添加本地ssh账户，Title随便写,Key则需要本地的ssh公钥，（生成本地电脑的ssh公钥，回到家目录，编辑vim .gitconfig,然后ssh-keygen -t rsa -C '749062870@qq.com'一直回车，完成之后，cd ssh，然后cat id_rsa.pub，复制过去就行了）\n3、克隆项目:github中的仓库中，code下拉中，选择ssh(我们用的就是ssh)，复制地址到相对应的文件夹下用终端 git clone 复制的地址, 将github中的项目下载到本地\n4、推送代码:被下载到本地的项目,不用master分支开发，而是创建一个自己的分支，一直在自己的分支上开发，开发完成之后先add，commit到本地，然后可以用git push origin 分支名称，就可以推送到github上面\n5、追踪远程分支：git branch --set-upstream-to=origin/远程分支 本地分支,追踪之后，就可以用git status来查看本地分支和远程分支的提交情况\n6、拉去代码: git pull origin 要拉取的分支.从远程分支上下载，拉取代码\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>链接——&gt;切换分支–&gt;add—&gt;commit—-&gt;push到lqs</p>\n</blockquote>\n<h5 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">'用户名'</span> <span class=\"token comment\"># 修改配置的用户名</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">'邮箱'</span>  <span class=\"token comment\"># 修改配置的邮箱</span>\n\n<span class=\"token function\">git</span> init <span class=\"token comment\"># 初始化git仓库</span>\n<span class=\"token function\">git</span> status <span class=\"token comment\"># 查看工作区的文件是否被管理</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 把工作区的文件提交到暂存区，也就是将工作区的文件进行管理</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'日志'</span> <span class=\"token comment\"># 将暂存区的文件提交到本地仓库</span>\n<span class=\"token function\">git</span> log <span class=\"token comment\"># 查看提交的日志，点击q退出</span>\n<span class=\"token function\">git</span> branch <span class=\"token comment\"># 查看本地分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-a</span> <span class=\"token comment\"># 查看本地和远程的分支</span>\n<span class=\"token function\">git</span> checkout <span class=\"token string\">'远程分支'</span> <span class=\"token comment\"># 可以从本地分支切换到远程分支</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> <span class=\"token string\">'分支名称'</span> <span class=\"token comment\"># 新建并切换到分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'分支名称'</span> <span class=\"token comment\"># 删除分支，分支被合并之后才允许删除</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> <span class=\"token string\">'分支名称'</span> <span class=\"token comment\"># 删除分支，强制删除</span>\n<span class=\"token function\">git</span> merge <span class=\"token string\">'分支名称'</span> <span class=\"token comment\"># 合并分支</span>\n<span class=\"token function\">git</span> push <span class=\"token string\">'远程地址 '</span><span class=\"token comment\"># 将本地仓库推送到远程仓库或者如下</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin <span class=\"token string\">'远程地址'</span> <span class=\"token comment\"># 给远程仓库添加别名</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin <span class=\"token string\">'分支名称'</span> <span class=\"token comment\"># 远程仓库没有这个分支，第一次向远程仓库推送分支</span>\n<span class=\"token function\">git</span> push  <span class=\"token comment\"># 第二次推送</span>\n<span class=\"token function\">git</span> clone <span class=\"token string\">'远程地址'</span> <span class=\"token comment\"># 克隆远程仓库的代码</span>\n<span class=\"token function\">git</span> pull <span class=\"token string\">'远程地址'</span> <span class=\"token string\">'远程分支'</span> <span class=\"token comment\"># 拉去远程仓库的代码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Git（文件只有放入了暂存区之后才会被追踪）\"><a href=\"#Git（文件只有放入了暂存区之后才会被追踪）\" class=\"headerlink\" title=\"Git（文件只有放入了暂存区之后才会被追踪）\"></a>Git（文件只有放入了暂存区之后才会被追踪）</h2><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>   版本控制:解决多人同时开发的代码问题，解决找回历史代码的问题</li>\n<li>   分布式:Git是分布式版本控制系统，如同一个GIT仓库，可以分不到不同的机器上，工作原理:找一台电脑做服务器（中央服务器），不关机，其他的人可以把这个服务器克隆到自己的电脑上</li>\n</ul>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"创建版本-两步\"><a href=\"#创建版本-两步\" class=\"headerlink\" title=\"创建版本(两步)\"></a>创建版本(两步)</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> 文件\n\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> ‘版本说明’ <span class=\"token comment\"># 版本:第一次创建版本的时候是记录里面的内容，以后的版本都是保存被修改的信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"查询版本记录信息\"><a href=\"#查询版本记录信息\" class=\"headerlink\" title=\"查询版本记录信息\"></a>查询版本记录信息</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log\n\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>oneline <span class=\"token comment\"># 更好用</span>\n\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--graph</span> <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>oneline <span class=\"token comment\"># 可以查看分支图</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"版本的回退\"><a href=\"#版本的回退\" class=\"headerlink\" title=\"版本的回退\"></a>版本的回退</h4><blockquote>\n<p>   有一个指针HEAD指向最新的版本， 上一个版本可以被表示为</p>\n</blockquote>\n<blockquote>\n<p>HEAD^,一个^表示前一个版本，100个^表示第前100个版本,还可以表示为:HEAD<del>1,HEAD</del>100,分别表示前一个和前100个版本</p>\n</blockquote>\n<blockquote>\n<p>版本回退命令</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset –hard HEAD~1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>版本前进命令</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset –hard 版本编号 <span class=\"token comment\">#（commit) 版本编号可以通过git reflog来查看，这里面都是操作记录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"工作区\"><a href=\"#工作区\" class=\"headerlink\" title=\"工作区\"></a>工作区</h3><p>就是使用git init命令的目录，创建文件和编辑文件都是在工作区完成的<br>版本库:拥有暂存区,HEAD区</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 就是添加修改到暂存区,git commit就是创建版本</span>\n\n<span class=\"token function\">git</span> status <span class=\"token comment\"># 可以查看工作区的情况</span>\n\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token comment\"># 可以同时添加很多个文件（也可以是目录）到暂存区，用空格分别，并且使用git commit的时候可以将同时提交的所有文件，创建一个版本，</span>\n\n<span class=\"token function\">git</span> checkout – 文件名 <span class=\"token comment\"># 在没有加到暂存区可以直接用这个命令丢弃修改(删除以后也可用这个恢复)，如果已经加到了暂存区，可以通过git reset HEAD 文件名解除添加到暂存区，然后用这个命令直接放弃修改</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><p>rm 文件名,因为是对工作区的文件的修改，所以可以用git checkout恢复，也可以用git rm将删除放入暂存区，彻底删除。</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">第一步：使用rm\n第二步：如果要恢复,git checkout --文件名,如果要删除，git rm放入暂存区\n第三步: 如果删除文件的修改被放入了暂存区，可以用git reset HEAD 文件名 解除暂存，然后用git checkout恢复<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"git-分支的概念-比如两个平行的宇宙，出现了交点\"><a href=\"#git-分支的概念-比如两个平行的宇宙，出现了交点\" class=\"headerlink\" title=\"git 分支的概念(比如两个平行的宇宙，出现了交点)\"></a>git 分支的概念(比如两个平行的宇宙，出现了交点)</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git主分支:master分支,HEAD指向master然后master再指向提交的指针\ngit从分支:dev分支，和master分支相互独立，可以和master分支合并，还可以删除\n\n<span class=\"token function\">git</span> branch可以查看有多少个分支\n创建分支: <span class=\"token function\">git</span> branch 名字\n创建新的分支并切换到新分支: <span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> dev（名字随便取）,创建了dev分支，HEAD就会指向dev\n切换到master分支: <span class=\"token function\">git</span> checkout master\n将dev分支的东西合并到master（一般都是合并在master分支上，也可以合并到其他的相关分支上，比如修复hug的时候）：git merge dev\n删除dev分支：git branch <span class=\"token parameter variable\">-d</span> dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p> 分支合并冲突:master分支和其他分支都修改了同一个文件的版本，合并就会报错，解决办法就是手动解决 </p>\n</blockquote>\n<blockquote>\n<p> 分支的管理决策: 在两个分支中修改了不同的文件的版本，那么合并的时候，就不会是快速合并,而是跳出一个弹框,第一行写入你的说明信息，退出之后合并完成，或者git merge –no-ff -m 合并版本说明 合并的分支， 这样可以禁用快速合并，保留分支的文件信息</p>\n</blockquote>\n<blockquote>\n<p> 分支bug管理:当我们在一个分支上进行工作的时候，其他的分支有bug需要及时的修复，那么可以使用git stash保存正在工作的分支上的状态，然后马上去需要修复bug的分支上修复bug：</p>\n</blockquote>\n<ul>\n<li>   首先我们要确定在哪一个分支上修复bug </li>\n<li>   然后在到那个分支上创建一个临时的分支来修复这个bug </li>\n<li>   然后切换回出hug的分支</li>\n<li>   然后合并分支，并用 git merge –no-ff -m ‘说明信息’ 临时分支,用来保存bug记录</li>\n<li>   然后删除临时分支，在修复完成以后,再回到最初工作的分支</li>\n<li>   用git stash pop恢复工作现场就可以继续工作（用git stash list 可以查看保存的工作现场的列表)</li>\n</ul>\n<h4 id=\"链接远程的仓库\"><a href=\"#链接远程的仓库\" class=\"headerlink\" title=\"链接远程的仓库\"></a>链接远程的仓库</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">生成ssh公钥:ssh-keygen -t rsa -C'749062870@qq.com'一直回车(3个)\n\n生成的ssh存放在用户文件夹下面的.ssh下面\n\n将.ssh下面的id_rsa.pub内容复制到github\n\n使用ssh -T git@github.com来测试是否连通<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"GitHub：\"><a href=\"#GitHub：\" class=\"headerlink\" title=\"GitHub：\"></a>GitHub：</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">1、创建新的仓库(同git中的git init): start project  => 项目名称 => 公开 => 两个add(readme使用说明，gitignore忽略文件)\n2、添加ssh账户(本机和github交互):创好仓库之后，点击头像下拉，找到settings => SSH and GPG keys => New SSH key就可以添加本地ssh账户，Title随便写,Key则需要本地的ssh公钥，（生成本地电脑的ssh公钥，回到家目录，编辑vim .gitconfig,然后ssh-keygen -t rsa -C '749062870@qq.com'一直回车，完成之后，cd ssh，然后cat id_rsa.pub，复制过去就行了）\n3、克隆项目:github中的仓库中，code下拉中，选择ssh(我们用的就是ssh)，复制地址到相对应的文件夹下用终端 git clone 复制的地址, 将github中的项目下载到本地\n4、推送代码:被下载到本地的项目,不用master分支开发，而是创建一个自己的分支，一直在自己的分支上开发，开发完成之后先add，commit到本地，然后可以用git push origin 分支名称，就可以推送到github上面\n5、追踪远程分支：git branch --set-upstream-to=origin/远程分支 本地分支,追踪之后，就可以用git status来查看本地分支和远程分支的提交情况\n6、拉去代码: git pull origin 要拉取的分支.从远程分支上下载，拉取代码\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>链接——&gt;切换分支–&gt;add—&gt;commit—-&gt;push到lqs</p>\n</blockquote>\n<h5 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">'用户名'</span> <span class=\"token comment\"># 修改配置的用户名</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">'邮箱'</span>  <span class=\"token comment\"># 修改配置的邮箱</span>\n\n<span class=\"token function\">git</span> init <span class=\"token comment\"># 初始化git仓库</span>\n<span class=\"token function\">git</span> status <span class=\"token comment\"># 查看工作区的文件是否被管理</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 把工作区的文件提交到暂存区，也就是将工作区的文件进行管理</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'日志'</span> <span class=\"token comment\"># 将暂存区的文件提交到本地仓库</span>\n<span class=\"token function\">git</span> log <span class=\"token comment\"># 查看提交的日志，点击q退出</span>\n<span class=\"token function\">git</span> branch <span class=\"token comment\"># 查看本地分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-a</span> <span class=\"token comment\"># 查看本地和远程的分支</span>\n<span class=\"token function\">git</span> checkout <span class=\"token string\">'远程分支'</span> <span class=\"token comment\"># 可以从本地分支切换到远程分支</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> <span class=\"token string\">'分支名称'</span> <span class=\"token comment\"># 新建并切换到分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'分支名称'</span> <span class=\"token comment\"># 删除分支，分支被合并之后才允许删除</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> <span class=\"token string\">'分支名称'</span> <span class=\"token comment\"># 删除分支，强制删除</span>\n<span class=\"token function\">git</span> merge <span class=\"token string\">'分支名称'</span> <span class=\"token comment\"># 合并分支</span>\n<span class=\"token function\">git</span> push <span class=\"token string\">'远程地址 '</span><span class=\"token comment\"># 将本地仓库推送到远程仓库或者如下</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin <span class=\"token string\">'远程地址'</span> <span class=\"token comment\"># 给远程仓库添加别名</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin <span class=\"token string\">'分支名称'</span> <span class=\"token comment\"># 远程仓库没有这个分支，第一次向远程仓库推送分支</span>\n<span class=\"token function\">git</span> push  <span class=\"token comment\"># 第二次推送</span>\n<span class=\"token function\">git</span> clone <span class=\"token string\">'远程地址'</span> <span class=\"token comment\"># 克隆远程仓库的代码</span>\n<span class=\"token function\">git</span> pull <span class=\"token string\">'远程地址'</span> <span class=\"token string\">'远程分支'</span> <span class=\"token comment\"># 拉去远程仓库的代码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"mongoDB使用","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T08:39:14.000Z","password":null,"summary":"MongoDB基础","_content":"# Mongodb\n\n> - 全局说明:文档=字典=map=dict=json \n> \n> - $是mongodb的专用字符\n\n## 安装\n```shell\nsudo apt-get install -y mongodb-org\n```\n## 启动(服务器):\n```shell\nsudo service mongod start\nsudo service mongod stop\nsudo service mongod restart\n```\n## 启动客户端\n```shell\nmongo\n```\n\n\n\n##    服务环境:\n```text\nmongod://localhost:27017\nredis://localhost:6379\nmysql://localhost:3306\nnginx://localhost:8888\ntomcat://localhost:8080\nflask://localhost:5000\ndjango://localhost:8000\n```\n\n\n## mongodb的命令\n```text\nshow dbs: 查看有哪些数据库\nshow database: 查看有哪些数据库\nuse 数据库: 切换到某个数据库,如果没有,直接创建(如果被使用的数据库是没有的,那么也是可以用的,因为mongodb是会自动创建的,但是,如果在创建完成之后没有存入任何数据,那么这个表用完之后,也不会保存)\ndb: 查看当前数据库(代表当前数据库)\ndb.dropDatabase(): 删除当前使用的数据库\n\nmongodb没有表的概念 数据都存储在集合当中\n\n集合也是不需要自己创建的,可以在存入数据的时候,mongodb自动创建集合\n\n也可以手动创建集合\ndb.createCollection(name, options): name 是被创建的这个集合的名字,options是这个集合的一些属性约束,用一个字典来设置\ndb.createCollection(\"userinfo\",{capped:true, size:10}):表示的就是,创建一个叫做userinfo的集合,capped表示限制,默认false,无上限,size是在capped为true的时候设置,表示数据超过10字节的时候,就会被新的数据覆盖,把之前的数据往外挤\n\nshow cllections: 查看所有的集合\ndb.集合名.drop(): 删除给定的集合\ndb.集合名: 使用指定的集合\ndb.集合名.find(): 查询指定的集合中的数据\ndb.集合名.insert({\"name\": \"lqs\",\"age\":\"12\"}): 往指定的集合插入数据\n\n这是一个Object类型(文档类型,字典),那么他会自动生成一个_id:ObjectId(\"xxxxxxx\"),保证文档的唯一性\n```\n### 添加数据\n```text\ndb.集合名.insert({})\ndb.集合名.save({})\n两者的区别:\n    insert()的方式来添加数据的时候,是绝对添加,如果添加一个_id已经存在的数据,那么它会直接报错,说,如果添加一个_id已经存在\n    save()的方式来添加数据的时候,是相对添加,如果添加一个_id不存在的数据,就和insert()方法一样,如果添加一个_id已经存在的数据,那么就是替换这个数据\n```\n###    文档插入\n```text\ndb.集合名.insert({_id:value,key:\"value\",key:\"value\",...}): key是可以不用引起来,也可以引起,value根据具体数数据类型,字符串就引起,数字就不引起,_id如果自己不设置,系统就会自动生成\n```\n### 查询数据\n```text\n美化查询:db.集合名.find().pretty():\n\ndb.集合名.find(): 查给定集合的所有数据\n\ndb.集合名.find(条件 根据这个条件查出对应的数据 字典格式, 返回的字段): 查询出给定集合里满足条件的所有数据\ndb.集合名.findOne(条件 根据这个条件查出对应的数据 字典格式): 查询出给定集合里满足条件的一条数据\n\n比较运算符\n    $lt: 小于\n    $lte: 小于等于\n    $gt: 大于\n    $gte: 大于等于\n    $ne: 不等\n使用例子:\n    db.collection.find({age:{$lt:18}}):查询出collection集合中的年龄小于18的所有数据\n\n\n范围运算符:\n    $in: 范围是指定的范围给在数组中\n    $nin: 不在指定的范围的\n使用例子:\n    db.collection.find({age:{$in:[12,45,23]}}):查询出collection集合中的年龄是12,23,45的人\n\n\n逻辑运算符:\n    与: 没有直接的运算符,直接写\n\n    $or       逻辑或\n    $and      逻辑与\n    $not      逻辑非\n    $nor      逻辑or的取反\n    $exists   存在逻辑\n    $type     查询键的数据类型\n使用例子:\n    db.collection.find({$or:[{age:{$lt:18}},{name:\"sc\"}]}):查询出collection中的年龄小于18或者名字等于sc的\n\n\n正则:\n    用/正则表达式/或者$regex:\"正则表达式\"编写正则表达式\n使用例子:\n    db.collection.find({name:/^abc/}):查询名字是abc开头的\n    db.collection.find({name:{$regex:\"123$\"}}):查询名字是123结尾的\n\n\nlimit和skip:\n    limit: 选中多少个\n    skip: 跳过多少个\n    配合使用的时候,先skip再limit\n使用例子:\n    db.collection.find().skip(2).limit(2):跳过两个再选中两个\n\n\n自定义查询(写js):\n    db.collection.find({$where:function(){return this.age>30}})\n    where可以执行一个函数,this就是表示当前collection中的数据,一条一条的来过this,类似于遍历\n```\n\n\n#### 查询之后返回字段的过滤\n```text\ndb.collection.find({条件},{name:1,_id:0 参数就是返回的字段,1为返回,不写不返回,除了_id,如果不想返回_id,那么_id:0})\n```\n#### 排序\n```\ndb.collection.find().sort({排序字段:1, 排序字段:-1}): sort表示排序,1为升序,-1为降序\n```\n#### 统计个数\n```\ndb.collection.find({条件}).count()\ndb.collection.count({条件})\n```\n\n#### 去重\n```\ndb.collection.distinct(\"字段名字\",{条件}): 返回的是一个列表,列表里面是不重复的\n```\n#### 聚合查询\n```\n管道:上层的结果给下层用\n$sum:总和,统计个数,$sum:1,以一倍计数\n$avg:平均\n$min:最小值\n$max:最大值\n$push:结果文档插入到一个数组中，\n$addToSet:结果文档插入到一个数组中,但不创建副本\n$first:根据资源文档排序获取第一个文档数据,\n$last:根据资源文档排序获取最后一个文档数据,\n$limit:显示多少个\n$skip:跳过多少个\n$sort:排序\n$project:修改输入文档的结构,如重命名\\添加\\删除字段,创建计算结果\n$unwind:将数组类型的字段进行拆分\n\n$match:相当于mysql中where\n$group:相当于mysql中group by\n\ndb.collection.aggregate(pipeline, options):语法:pipeline,管道,必须是一个数组\n格式:db.collection.aggregate([{管道:{表达式}},{管道:{表达式}}])\n\n管道中使用字段:\n    不加$:在明确的条件中字段不用加$如{name:\"lqs\"}:这种表示name是lqs,冒号前面不加\n    加$:在不明确的使用值的时候加$如{name2:$name}:这种表示获取name的值,冒号后面加\n\n例子:\n    db.collection.aggregate([{$match:{name:\"lqs\"}}]):查出名字是lqs的\n    db.collection.aggregate([{$match:{_id:{\"$gt\":2}}},{$group:{_id:$name,aavg:{$avg:$salary}}}]):查出_id大于2的所有数据,在上面查出的数据中,再按照name分组,求出salary的平均,_id表示分组字段的key,分组字段必须加上$,在这里面出现的变量多用$修饰,aavg是别名这种有多个操作的,都是衔接的,必须下面能用\n    db.collection.aggregate([{$group:{_id:$name,maxM:{$max:$salary},minM:{$min:$salary}}}]):分组查出最大最小\n    db.collection.aggregate([{$group:{_id:$sex,count:{$sum:1}}}]):分组统计男女生的总个数\n    db.collection.aggregate([{$group:{_id:null,count:{$sum:1}}}]):表示查出这个文档的个数,_id=null的时候,表示整个文档为一组\n    上面的各种结果中都一定有一个_id字段,id表示分组依据\n    db.collection.aggregate([{$group:{_id:$gender,count:{$sum:1}}},{$[project:{gender:$_id,count:1,_id:0}]}]):表示创建一个gender字段,值为上一个管道的_id的值,count:1表示显示这个字段,_id:0,表示不显示这个字段,也可以使用count:$count来显示,个之前的投影一样的1\\0操作\n\n    db.collection.aggregate([{$sort:{name:1}}]):按照姓名升序排序\n    db.collection.aggregate([\n        {$group:{_id:$gender,count:{$sum:1}}},\n        {$project:{_id:0,gender:$_id.gender,count:1}},\n        {$sort:{count:1}}\n    ]) 按照男女生总数升序排列\n    db.cllection.aggregate([\n        {$skip:2},\n        {$limit:2}\n    ]) 跳过两条显示两条\n\n    原数据:{\"_id\":1, \"name\":\"map\", \"size\":[1,2,3]}\n    db.collection.aggregate([{$unwind:$size}]):将上面的数据中的size对应的列表拆分成三个,这个管道只对列表有用\n    拆分后:\n        {\"_id\":1, \"name\":\"map\", \"size\":1}\n        {\"_id\":1, \"name\":\"map\", \"size\":2}\n        {\"_id\":1, \"name\":\"map\", \"size\":3}\n\n\n    高级使用:\n    db.collection.aggregate([\n        {$group:{_id:{conutry:$conutry,prevent:$prevent,userid:$userid}}}, 将不同国家的不同省份的用户分出来userid用于去重\n        {$group:{_id:{conutry:$_id.conutry,prevent:$_id.prevent},conunt:{$sum:1}}}, 在将以上分好的用国家和省份分组统计出总个数\n        {$project:{_id:0,conutry:$_id.conutry,prevent:$_id.prevent,conunt:1}} 显示某个国家某个地区的总人数\n    ])\n```\n\n\n\n### 更新数据\n```\ndb.集合名.update({条件 根据这个条件查出对应的数据 字典格式},{把查到的数据更新成什么 字典格式},{multi Boolean 如果是true那么就是把查到的所有符合的数据都更新,false的话就只是更新查到的一个符合条件的数据})\n    这种方式不是简单的更新,这种属于是替换\ndb.集合名.update({条件 根据这个条件查出对应的数据 字典格式},{$set:把查到的数据更新成什么 字典格式},{multi Boolean 如果是true那么就是把查到的所有符合的数据都更新,false的话就只是更新查到的一个符合条件的数据})\n    这种方式就是更新,不会把本不该更新的键值对也替换了\n```\n\n### 删除数据\n```\ndb.集合名.remove({条件 根据这个条件查出对应的数据 字典格式},{justOne:true})\n\n    justOne表示是否只删除一条,如果是false,那么删除满足条件的所有数据,默认false\n```\n    \n\n\n\n\n### 数据类型\n```\nObject ID: 文档ID\nString: 字符串,最常用,必须是utf-8\nBoolean: 存储一个布尔,true或者false\nInteger: 整数,可以是32位\\64位\nDouble: 浮点数\nArrays: 数组或者列表,多个值存入一个键\nObject: 用于嵌入式的文档,即一个值为一个文档\nNull: 存储Null值\nTimestamp: 时间戳,表示从1970-1-1到现在的总秒数\nData: 存储当前日期或者时间的UNIX时间格式,在mongodb中可以通过new Date(日期)来使用,存入的是年月日\n\n\n说明:\n    文档:要存入数据库中的字典,可以是各种嵌套的字典\n\n    每一个文档都有一个固定的属性 _id 会自动生成(12字节的十六进制数),多数时间自己设置_id,为了保证唯一性\n```\n\n\n\n\n### 索引\n```\n创建索引:\n    db.collection.ensureIndex({\"索引字段\",排序方式1升序-1降序},{\"索引字段\",\"取得名字\"}):索引的创建\\取名\n查询索引:\n    db.collection.getIndexes():查询所有的索引\n删除索引：\n    db.collection.dorpIndex(\"索引名\")\n```","source":"_posts/mongoDB使用.md","raw":"---\ntitle: mongoDB使用\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 16:39:14\npassword:\nsummary: MongoDB基础\ntags: mongo\ncategories: db\n---\n# Mongodb\n\n> - 全局说明:文档=字典=map=dict=json \n> \n> - $是mongodb的专用字符\n\n## 安装\n```shell\nsudo apt-get install -y mongodb-org\n```\n## 启动(服务器):\n```shell\nsudo service mongod start\nsudo service mongod stop\nsudo service mongod restart\n```\n## 启动客户端\n```shell\nmongo\n```\n\n\n\n##    服务环境:\n```text\nmongod://localhost:27017\nredis://localhost:6379\nmysql://localhost:3306\nnginx://localhost:8888\ntomcat://localhost:8080\nflask://localhost:5000\ndjango://localhost:8000\n```\n\n\n## mongodb的命令\n```text\nshow dbs: 查看有哪些数据库\nshow database: 查看有哪些数据库\nuse 数据库: 切换到某个数据库,如果没有,直接创建(如果被使用的数据库是没有的,那么也是可以用的,因为mongodb是会自动创建的,但是,如果在创建完成之后没有存入任何数据,那么这个表用完之后,也不会保存)\ndb: 查看当前数据库(代表当前数据库)\ndb.dropDatabase(): 删除当前使用的数据库\n\nmongodb没有表的概念 数据都存储在集合当中\n\n集合也是不需要自己创建的,可以在存入数据的时候,mongodb自动创建集合\n\n也可以手动创建集合\ndb.createCollection(name, options): name 是被创建的这个集合的名字,options是这个集合的一些属性约束,用一个字典来设置\ndb.createCollection(\"userinfo\",{capped:true, size:10}):表示的就是,创建一个叫做userinfo的集合,capped表示限制,默认false,无上限,size是在capped为true的时候设置,表示数据超过10字节的时候,就会被新的数据覆盖,把之前的数据往外挤\n\nshow cllections: 查看所有的集合\ndb.集合名.drop(): 删除给定的集合\ndb.集合名: 使用指定的集合\ndb.集合名.find(): 查询指定的集合中的数据\ndb.集合名.insert({\"name\": \"lqs\",\"age\":\"12\"}): 往指定的集合插入数据\n\n这是一个Object类型(文档类型,字典),那么他会自动生成一个_id:ObjectId(\"xxxxxxx\"),保证文档的唯一性\n```\n### 添加数据\n```text\ndb.集合名.insert({})\ndb.集合名.save({})\n两者的区别:\n    insert()的方式来添加数据的时候,是绝对添加,如果添加一个_id已经存在的数据,那么它会直接报错,说,如果添加一个_id已经存在\n    save()的方式来添加数据的时候,是相对添加,如果添加一个_id不存在的数据,就和insert()方法一样,如果添加一个_id已经存在的数据,那么就是替换这个数据\n```\n###    文档插入\n```text\ndb.集合名.insert({_id:value,key:\"value\",key:\"value\",...}): key是可以不用引起来,也可以引起,value根据具体数数据类型,字符串就引起,数字就不引起,_id如果自己不设置,系统就会自动生成\n```\n### 查询数据\n```text\n美化查询:db.集合名.find().pretty():\n\ndb.集合名.find(): 查给定集合的所有数据\n\ndb.集合名.find(条件 根据这个条件查出对应的数据 字典格式, 返回的字段): 查询出给定集合里满足条件的所有数据\ndb.集合名.findOne(条件 根据这个条件查出对应的数据 字典格式): 查询出给定集合里满足条件的一条数据\n\n比较运算符\n    $lt: 小于\n    $lte: 小于等于\n    $gt: 大于\n    $gte: 大于等于\n    $ne: 不等\n使用例子:\n    db.collection.find({age:{$lt:18}}):查询出collection集合中的年龄小于18的所有数据\n\n\n范围运算符:\n    $in: 范围是指定的范围给在数组中\n    $nin: 不在指定的范围的\n使用例子:\n    db.collection.find({age:{$in:[12,45,23]}}):查询出collection集合中的年龄是12,23,45的人\n\n\n逻辑运算符:\n    与: 没有直接的运算符,直接写\n\n    $or       逻辑或\n    $and      逻辑与\n    $not      逻辑非\n    $nor      逻辑or的取反\n    $exists   存在逻辑\n    $type     查询键的数据类型\n使用例子:\n    db.collection.find({$or:[{age:{$lt:18}},{name:\"sc\"}]}):查询出collection中的年龄小于18或者名字等于sc的\n\n\n正则:\n    用/正则表达式/或者$regex:\"正则表达式\"编写正则表达式\n使用例子:\n    db.collection.find({name:/^abc/}):查询名字是abc开头的\n    db.collection.find({name:{$regex:\"123$\"}}):查询名字是123结尾的\n\n\nlimit和skip:\n    limit: 选中多少个\n    skip: 跳过多少个\n    配合使用的时候,先skip再limit\n使用例子:\n    db.collection.find().skip(2).limit(2):跳过两个再选中两个\n\n\n自定义查询(写js):\n    db.collection.find({$where:function(){return this.age>30}})\n    where可以执行一个函数,this就是表示当前collection中的数据,一条一条的来过this,类似于遍历\n```\n\n\n#### 查询之后返回字段的过滤\n```text\ndb.collection.find({条件},{name:1,_id:0 参数就是返回的字段,1为返回,不写不返回,除了_id,如果不想返回_id,那么_id:0})\n```\n#### 排序\n```\ndb.collection.find().sort({排序字段:1, 排序字段:-1}): sort表示排序,1为升序,-1为降序\n```\n#### 统计个数\n```\ndb.collection.find({条件}).count()\ndb.collection.count({条件})\n```\n\n#### 去重\n```\ndb.collection.distinct(\"字段名字\",{条件}): 返回的是一个列表,列表里面是不重复的\n```\n#### 聚合查询\n```\n管道:上层的结果给下层用\n$sum:总和,统计个数,$sum:1,以一倍计数\n$avg:平均\n$min:最小值\n$max:最大值\n$push:结果文档插入到一个数组中，\n$addToSet:结果文档插入到一个数组中,但不创建副本\n$first:根据资源文档排序获取第一个文档数据,\n$last:根据资源文档排序获取最后一个文档数据,\n$limit:显示多少个\n$skip:跳过多少个\n$sort:排序\n$project:修改输入文档的结构,如重命名\\添加\\删除字段,创建计算结果\n$unwind:将数组类型的字段进行拆分\n\n$match:相当于mysql中where\n$group:相当于mysql中group by\n\ndb.collection.aggregate(pipeline, options):语法:pipeline,管道,必须是一个数组\n格式:db.collection.aggregate([{管道:{表达式}},{管道:{表达式}}])\n\n管道中使用字段:\n    不加$:在明确的条件中字段不用加$如{name:\"lqs\"}:这种表示name是lqs,冒号前面不加\n    加$:在不明确的使用值的时候加$如{name2:$name}:这种表示获取name的值,冒号后面加\n\n例子:\n    db.collection.aggregate([{$match:{name:\"lqs\"}}]):查出名字是lqs的\n    db.collection.aggregate([{$match:{_id:{\"$gt\":2}}},{$group:{_id:$name,aavg:{$avg:$salary}}}]):查出_id大于2的所有数据,在上面查出的数据中,再按照name分组,求出salary的平均,_id表示分组字段的key,分组字段必须加上$,在这里面出现的变量多用$修饰,aavg是别名这种有多个操作的,都是衔接的,必须下面能用\n    db.collection.aggregate([{$group:{_id:$name,maxM:{$max:$salary},minM:{$min:$salary}}}]):分组查出最大最小\n    db.collection.aggregate([{$group:{_id:$sex,count:{$sum:1}}}]):分组统计男女生的总个数\n    db.collection.aggregate([{$group:{_id:null,count:{$sum:1}}}]):表示查出这个文档的个数,_id=null的时候,表示整个文档为一组\n    上面的各种结果中都一定有一个_id字段,id表示分组依据\n    db.collection.aggregate([{$group:{_id:$gender,count:{$sum:1}}},{$[project:{gender:$_id,count:1,_id:0}]}]):表示创建一个gender字段,值为上一个管道的_id的值,count:1表示显示这个字段,_id:0,表示不显示这个字段,也可以使用count:$count来显示,个之前的投影一样的1\\0操作\n\n    db.collection.aggregate([{$sort:{name:1}}]):按照姓名升序排序\n    db.collection.aggregate([\n        {$group:{_id:$gender,count:{$sum:1}}},\n        {$project:{_id:0,gender:$_id.gender,count:1}},\n        {$sort:{count:1}}\n    ]) 按照男女生总数升序排列\n    db.cllection.aggregate([\n        {$skip:2},\n        {$limit:2}\n    ]) 跳过两条显示两条\n\n    原数据:{\"_id\":1, \"name\":\"map\", \"size\":[1,2,3]}\n    db.collection.aggregate([{$unwind:$size}]):将上面的数据中的size对应的列表拆分成三个,这个管道只对列表有用\n    拆分后:\n        {\"_id\":1, \"name\":\"map\", \"size\":1}\n        {\"_id\":1, \"name\":\"map\", \"size\":2}\n        {\"_id\":1, \"name\":\"map\", \"size\":3}\n\n\n    高级使用:\n    db.collection.aggregate([\n        {$group:{_id:{conutry:$conutry,prevent:$prevent,userid:$userid}}}, 将不同国家的不同省份的用户分出来userid用于去重\n        {$group:{_id:{conutry:$_id.conutry,prevent:$_id.prevent},conunt:{$sum:1}}}, 在将以上分好的用国家和省份分组统计出总个数\n        {$project:{_id:0,conutry:$_id.conutry,prevent:$_id.prevent,conunt:1}} 显示某个国家某个地区的总人数\n    ])\n```\n\n\n\n### 更新数据\n```\ndb.集合名.update({条件 根据这个条件查出对应的数据 字典格式},{把查到的数据更新成什么 字典格式},{multi Boolean 如果是true那么就是把查到的所有符合的数据都更新,false的话就只是更新查到的一个符合条件的数据})\n    这种方式不是简单的更新,这种属于是替换\ndb.集合名.update({条件 根据这个条件查出对应的数据 字典格式},{$set:把查到的数据更新成什么 字典格式},{multi Boolean 如果是true那么就是把查到的所有符合的数据都更新,false的话就只是更新查到的一个符合条件的数据})\n    这种方式就是更新,不会把本不该更新的键值对也替换了\n```\n\n### 删除数据\n```\ndb.集合名.remove({条件 根据这个条件查出对应的数据 字典格式},{justOne:true})\n\n    justOne表示是否只删除一条,如果是false,那么删除满足条件的所有数据,默认false\n```\n    \n\n\n\n\n### 数据类型\n```\nObject ID: 文档ID\nString: 字符串,最常用,必须是utf-8\nBoolean: 存储一个布尔,true或者false\nInteger: 整数,可以是32位\\64位\nDouble: 浮点数\nArrays: 数组或者列表,多个值存入一个键\nObject: 用于嵌入式的文档,即一个值为一个文档\nNull: 存储Null值\nTimestamp: 时间戳,表示从1970-1-1到现在的总秒数\nData: 存储当前日期或者时间的UNIX时间格式,在mongodb中可以通过new Date(日期)来使用,存入的是年月日\n\n\n说明:\n    文档:要存入数据库中的字典,可以是各种嵌套的字典\n\n    每一个文档都有一个固定的属性 _id 会自动生成(12字节的十六进制数),多数时间自己设置_id,为了保证唯一性\n```\n\n\n\n\n### 索引\n```\n创建索引:\n    db.collection.ensureIndex({\"索引字段\",排序方式1升序-1降序},{\"索引字段\",\"取得名字\"}):索引的创建\\取名\n查询索引:\n    db.collection.getIndexes():查询所有的索引\n删除索引：\n    db.collection.dorpIndex(\"索引名\")\n```","slug":"mongoDB使用","published":1,"updated":"2023-01-19T11:46:17.982Z","_id":"cld2uqf6900061svkd4gebgfn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h1><blockquote>\n<ul>\n<li><p>全局说明:文档=字典=map=dict=json </p>\n</li>\n<li><p>$是mongodb的专用字符</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> mongodb-org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"启动-服务器\"><a href=\"#启动-服务器\" class=\"headerlink\" title=\"启动(服务器):\"></a>启动(服务器):</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mongod start\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mongod stop\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mongod restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"服务环境\"><a href=\"#服务环境\" class=\"headerlink\" title=\"服务环境:\"></a>服务环境:</h2><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">mongod://localhost:27017\nredis://localhost:6379\nmysql://localhost:3306\nnginx://localhost:8888\ntomcat://localhost:8080\nflask://localhost:5000\ndjango://localhost:8000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"mongodb的命令\"><a href=\"#mongodb的命令\" class=\"headerlink\" title=\"mongodb的命令\"></a>mongodb的命令</h2><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">show dbs: 查看有哪些数据库\nshow database: 查看有哪些数据库\nuse 数据库: 切换到某个数据库,如果没有,直接创建(如果被使用的数据库是没有的,那么也是可以用的,因为mongodb是会自动创建的,但是,如果在创建完成之后没有存入任何数据,那么这个表用完之后,也不会保存)\ndb: 查看当前数据库(代表当前数据库)\ndb.dropDatabase(): 删除当前使用的数据库\n\nmongodb没有表的概念 数据都存储在集合当中\n\n集合也是不需要自己创建的,可以在存入数据的时候,mongodb自动创建集合\n\n也可以手动创建集合\ndb.createCollection(name, options): name 是被创建的这个集合的名字,options是这个集合的一些属性约束,用一个字典来设置\ndb.createCollection(\"userinfo\",&#123;capped:true, size:10&#125;):表示的就是,创建一个叫做userinfo的集合,capped表示限制,默认false,无上限,size是在capped为true的时候设置,表示数据超过10字节的时候,就会被新的数据覆盖,把之前的数据往外挤\n\nshow cllections: 查看所有的集合\ndb.集合名.drop(): 删除给定的集合\ndb.集合名: 使用指定的集合\ndb.集合名.find(): 查询指定的集合中的数据\ndb.集合名.insert(&#123;\"name\": \"lqs\",\"age\":\"12\"&#125;): 往指定的集合插入数据\n\n这是一个Object类型(文档类型,字典),那么他会自动生成一个_id:ObjectId(\"xxxxxxx\"),保证文档的唯一性<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">db.集合名.insert(&#123;&#125;)\ndb.集合名.save(&#123;&#125;)\n两者的区别:\n    insert()的方式来添加数据的时候,是绝对添加,如果添加一个_id已经存在的数据,那么它会直接报错,说,如果添加一个_id已经存在\n    save()的方式来添加数据的时候,是相对添加,如果添加一个_id不存在的数据,就和insert()方法一样,如果添加一个_id已经存在的数据,那么就是替换这个数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"文档插入\"><a href=\"#文档插入\" class=\"headerlink\" title=\"文档插入\"></a>文档插入</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">db.集合名.insert(&#123;_id:value,key:\"value\",key:\"value\",...&#125;): key是可以不用引起来,也可以引起,value根据具体数数据类型,字符串就引起,数字就不引起,_id如果自己不设置,系统就会自动生成<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">美化查询:db.集合名.find().pretty():\n\ndb.集合名.find(): 查给定集合的所有数据\n\ndb.集合名.find(条件 根据这个条件查出对应的数据 字典格式, 返回的字段): 查询出给定集合里满足条件的所有数据\ndb.集合名.findOne(条件 根据这个条件查出对应的数据 字典格式): 查询出给定集合里满足条件的一条数据\n\n比较运算符\n    $lt: 小于\n    $lte: 小于等于\n    $gt: 大于\n    $gte: 大于等于\n    $ne: 不等\n使用例子:\n    db.collection.find(&#123;age:&#123;$lt:18&#125;&#125;):查询出collection集合中的年龄小于18的所有数据\n\n\n范围运算符:\n    $in: 范围是指定的范围给在数组中\n    $nin: 不在指定的范围的\n使用例子:\n    db.collection.find(&#123;age:&#123;$in:[12,45,23]&#125;&#125;):查询出collection集合中的年龄是12,23,45的人\n\n\n逻辑运算符:\n    与: 没有直接的运算符,直接写\n\n    $or       逻辑或\n    $and      逻辑与\n    $not      逻辑非\n    $nor      逻辑or的取反\n    $exists   存在逻辑\n    $type     查询键的数据类型\n使用例子:\n    db.collection.find(&#123;$or:[&#123;age:&#123;$lt:18&#125;&#125;,&#123;name:\"sc\"&#125;]&#125;):查询出collection中的年龄小于18或者名字等于sc的\n\n\n正则:\n    用/正则表达式/或者$regex:\"正则表达式\"编写正则表达式\n使用例子:\n    db.collection.find(&#123;name:/^abc/&#125;):查询名字是abc开头的\n    db.collection.find(&#123;name:&#123;$regex:\"123$\"&#125;&#125;):查询名字是123结尾的\n\n\nlimit和skip:\n    limit: 选中多少个\n    skip: 跳过多少个\n    配合使用的时候,先skip再limit\n使用例子:\n    db.collection.find().skip(2).limit(2):跳过两个再选中两个\n\n\n自定义查询(写js):\n    db.collection.find(&#123;$where:function()&#123;return this.age>30&#125;&#125;)\n    where可以执行一个函数,this就是表示当前collection中的数据,一条一条的来过this,类似于遍历<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"查询之后返回字段的过滤\"><a href=\"#查询之后返回字段的过滤\" class=\"headerlink\" title=\"查询之后返回字段的过滤\"></a>查询之后返回字段的过滤</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">db.collection.find(&#123;条件&#125;,&#123;name:1,_id:0 参数就是返回的字段,1为返回,不写不返回,除了_id,如果不想返回_id,那么_id:0&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">db.collection.find().sort(&#123;排序字段:1, 排序字段:-1&#125;): sort表示排序,1为升序,-1为降序<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"统计个数\"><a href=\"#统计个数\" class=\"headerlink\" title=\"统计个数\"></a>统计个数</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">db.collection.find(&#123;条件&#125;).count()\ndb.collection.count(&#123;条件&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">db.collection.distinct(&quot;字段名字&quot;,&#123;条件&#125;): 返回的是一个列表,列表里面是不重复的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">管道:上层的结果给下层用\n$sum:总和,统计个数,$sum:1,以一倍计数\n$avg:平均\n$min:最小值\n$max:最大值\n$push:结果文档插入到一个数组中，\n$addToSet:结果文档插入到一个数组中,但不创建副本\n$first:根据资源文档排序获取第一个文档数据,\n$last:根据资源文档排序获取最后一个文档数据,\n$limit:显示多少个\n$skip:跳过多少个\n$sort:排序\n$project:修改输入文档的结构,如重命名\\添加\\删除字段,创建计算结果\n$unwind:将数组类型的字段进行拆分\n\n$match:相当于mysql中where\n$group:相当于mysql中group by\n\ndb.collection.aggregate(pipeline, options):语法:pipeline,管道,必须是一个数组\n格式:db.collection.aggregate([&#123;管道:&#123;表达式&#125;&#125;,&#123;管道:&#123;表达式&#125;&#125;])\n\n管道中使用字段:\n    不加$:在明确的条件中字段不用加$如&#123;name:&quot;lqs&quot;&#125;:这种表示name是lqs,冒号前面不加\n    加$:在不明确的使用值的时候加$如&#123;name2:$name&#125;:这种表示获取name的值,冒号后面加\n\n例子:\n    db.collection.aggregate([&#123;$match:&#123;name:&quot;lqs&quot;&#125;&#125;]):查出名字是lqs的\n    db.collection.aggregate([&#123;$match:&#123;_id:&#123;&quot;$gt&quot;:2&#125;&#125;&#125;,&#123;$group:&#123;_id:$name,aavg:&#123;$avg:$salary&#125;&#125;&#125;]):查出_id大于2的所有数据,在上面查出的数据中,再按照name分组,求出salary的平均,_id表示分组字段的key,分组字段必须加上$,在这里面出现的变量多用$修饰,aavg是别名这种有多个操作的,都是衔接的,必须下面能用\n    db.collection.aggregate([&#123;$group:&#123;_id:$name,maxM:&#123;$max:$salary&#125;,minM:&#123;$min:$salary&#125;&#125;&#125;]):分组查出最大最小\n    db.collection.aggregate([&#123;$group:&#123;_id:$sex,count:&#123;$sum:1&#125;&#125;&#125;]):分组统计男女生的总个数\n    db.collection.aggregate([&#123;$group:&#123;_id:null,count:&#123;$sum:1&#125;&#125;&#125;]):表示查出这个文档的个数,_id&#x3D;null的时候,表示整个文档为一组\n    上面的各种结果中都一定有一个_id字段,id表示分组依据\n    db.collection.aggregate([&#123;$group:&#123;_id:$gender,count:&#123;$sum:1&#125;&#125;&#125;,&#123;$[project:&#123;gender:$_id,count:1,_id:0&#125;]&#125;]):表示创建一个gender字段,值为上一个管道的_id的值,count:1表示显示这个字段,_id:0,表示不显示这个字段,也可以使用count:$count来显示,个之前的投影一样的1\\0操作\n\n    db.collection.aggregate([&#123;$sort:&#123;name:1&#125;&#125;]):按照姓名升序排序\n    db.collection.aggregate([\n        &#123;$group:&#123;_id:$gender,count:&#123;$sum:1&#125;&#125;&#125;,\n        &#123;$project:&#123;_id:0,gender:$_id.gender,count:1&#125;&#125;,\n        &#123;$sort:&#123;count:1&#125;&#125;\n    ]) 按照男女生总数升序排列\n    db.cllection.aggregate([\n        &#123;$skip:2&#125;,\n        &#123;$limit:2&#125;\n    ]) 跳过两条显示两条\n\n    原数据:&#123;&quot;_id&quot;:1, &quot;name&quot;:&quot;map&quot;, &quot;size&quot;:[1,2,3]&#125;\n    db.collection.aggregate([&#123;$unwind:$size&#125;]):将上面的数据中的size对应的列表拆分成三个,这个管道只对列表有用\n    拆分后:\n        &#123;&quot;_id&quot;:1, &quot;name&quot;:&quot;map&quot;, &quot;size&quot;:1&#125;\n        &#123;&quot;_id&quot;:1, &quot;name&quot;:&quot;map&quot;, &quot;size&quot;:2&#125;\n        &#123;&quot;_id&quot;:1, &quot;name&quot;:&quot;map&quot;, &quot;size&quot;:3&#125;\n\n\n    高级使用:\n    db.collection.aggregate([\n        &#123;$group:&#123;_id:&#123;conutry:$conutry,prevent:$prevent,userid:$userid&#125;&#125;&#125;, 将不同国家的不同省份的用户分出来userid用于去重\n        &#123;$group:&#123;_id:&#123;conutry:$_id.conutry,prevent:$_id.prevent&#125;,conunt:&#123;$sum:1&#125;&#125;&#125;, 在将以上分好的用国家和省份分组统计出总个数\n        &#123;$project:&#123;_id:0,conutry:$_id.conutry,prevent:$_id.prevent,conunt:1&#125;&#125; 显示某个国家某个地区的总人数\n    ])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">db.集合名.update(&#123;条件 根据这个条件查出对应的数据 字典格式&#125;,&#123;把查到的数据更新成什么 字典格式&#125;,&#123;multi Boolean 如果是true那么就是把查到的所有符合的数据都更新,false的话就只是更新查到的一个符合条件的数据&#125;)\n    这种方式不是简单的更新,这种属于是替换\ndb.集合名.update(&#123;条件 根据这个条件查出对应的数据 字典格式&#125;,&#123;$set:把查到的数据更新成什么 字典格式&#125;,&#123;multi Boolean 如果是true那么就是把查到的所有符合的数据都更新,false的话就只是更新查到的一个符合条件的数据&#125;)\n    这种方式就是更新,不会把本不该更新的键值对也替换了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">db.集合名.remove(&#123;条件 根据这个条件查出对应的数据 字典格式&#125;,&#123;justOne:true&#125;)\n\n    justOne表示是否只删除一条,如果是false,那么删除满足条件的所有数据,默认false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">Object ID: 文档ID\nString: 字符串,最常用,必须是utf-8\nBoolean: 存储一个布尔,true或者false\nInteger: 整数,可以是32位\\64位\nDouble: 浮点数\nArrays: 数组或者列表,多个值存入一个键\nObject: 用于嵌入式的文档,即一个值为一个文档\nNull: 存储Null值\nTimestamp: 时间戳,表示从1970-1-1到现在的总秒数\nData: 存储当前日期或者时间的UNIX时间格式,在mongodb中可以通过new Date(日期)来使用,存入的是年月日\n\n\n说明:\n    文档:要存入数据库中的字典,可以是各种嵌套的字典\n\n    每一个文档都有一个固定的属性 _id 会自动生成(12字节的十六进制数),多数时间自己设置_id,为了保证唯一性<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">创建索引:\n    db.collection.ensureIndex(&#123;&quot;索引字段&quot;,排序方式1升序-1降序&#125;,&#123;&quot;索引字段&quot;,&quot;取得名字&quot;&#125;):索引的创建\\取名\n查询索引:\n    db.collection.getIndexes():查询所有的索引\n删除索引：\n    db.collection.dorpIndex(&quot;索引名&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h1><blockquote>\n<ul>\n<li><p>全局说明:文档=字典=map=dict=json </p>\n</li>\n<li><p>$是mongodb的专用字符</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> mongodb-org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"启动-服务器\"><a href=\"#启动-服务器\" class=\"headerlink\" title=\"启动(服务器):\"></a>启动(服务器):</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mongod start\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mongod stop\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> mongod restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"服务环境\"><a href=\"#服务环境\" class=\"headerlink\" title=\"服务环境:\"></a>服务环境:</h2><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">mongod://localhost:27017\nredis://localhost:6379\nmysql://localhost:3306\nnginx://localhost:8888\ntomcat://localhost:8080\nflask://localhost:5000\ndjango://localhost:8000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"mongodb的命令\"><a href=\"#mongodb的命令\" class=\"headerlink\" title=\"mongodb的命令\"></a>mongodb的命令</h2><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">show dbs: 查看有哪些数据库\nshow database: 查看有哪些数据库\nuse 数据库: 切换到某个数据库,如果没有,直接创建(如果被使用的数据库是没有的,那么也是可以用的,因为mongodb是会自动创建的,但是,如果在创建完成之后没有存入任何数据,那么这个表用完之后,也不会保存)\ndb: 查看当前数据库(代表当前数据库)\ndb.dropDatabase(): 删除当前使用的数据库\n\nmongodb没有表的概念 数据都存储在集合当中\n\n集合也是不需要自己创建的,可以在存入数据的时候,mongodb自动创建集合\n\n也可以手动创建集合\ndb.createCollection(name, options): name 是被创建的这个集合的名字,options是这个集合的一些属性约束,用一个字典来设置\ndb.createCollection(\"userinfo\",&#123;capped:true, size:10&#125;):表示的就是,创建一个叫做userinfo的集合,capped表示限制,默认false,无上限,size是在capped为true的时候设置,表示数据超过10字节的时候,就会被新的数据覆盖,把之前的数据往外挤\n\nshow cllections: 查看所有的集合\ndb.集合名.drop(): 删除给定的集合\ndb.集合名: 使用指定的集合\ndb.集合名.find(): 查询指定的集合中的数据\ndb.集合名.insert(&#123;\"name\": \"lqs\",\"age\":\"12\"&#125;): 往指定的集合插入数据\n\n这是一个Object类型(文档类型,字典),那么他会自动生成一个_id:ObjectId(\"xxxxxxx\"),保证文档的唯一性<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">db.集合名.insert(&#123;&#125;)\ndb.集合名.save(&#123;&#125;)\n两者的区别:\n    insert()的方式来添加数据的时候,是绝对添加,如果添加一个_id已经存在的数据,那么它会直接报错,说,如果添加一个_id已经存在\n    save()的方式来添加数据的时候,是相对添加,如果添加一个_id不存在的数据,就和insert()方法一样,如果添加一个_id已经存在的数据,那么就是替换这个数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"文档插入\"><a href=\"#文档插入\" class=\"headerlink\" title=\"文档插入\"></a>文档插入</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">db.集合名.insert(&#123;_id:value,key:\"value\",key:\"value\",...&#125;): key是可以不用引起来,也可以引起,value根据具体数数据类型,字符串就引起,数字就不引起,_id如果自己不设置,系统就会自动生成<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">美化查询:db.集合名.find().pretty():\n\ndb.集合名.find(): 查给定集合的所有数据\n\ndb.集合名.find(条件 根据这个条件查出对应的数据 字典格式, 返回的字段): 查询出给定集合里满足条件的所有数据\ndb.集合名.findOne(条件 根据这个条件查出对应的数据 字典格式): 查询出给定集合里满足条件的一条数据\n\n比较运算符\n    $lt: 小于\n    $lte: 小于等于\n    $gt: 大于\n    $gte: 大于等于\n    $ne: 不等\n使用例子:\n    db.collection.find(&#123;age:&#123;$lt:18&#125;&#125;):查询出collection集合中的年龄小于18的所有数据\n\n\n范围运算符:\n    $in: 范围是指定的范围给在数组中\n    $nin: 不在指定的范围的\n使用例子:\n    db.collection.find(&#123;age:&#123;$in:[12,45,23]&#125;&#125;):查询出collection集合中的年龄是12,23,45的人\n\n\n逻辑运算符:\n    与: 没有直接的运算符,直接写\n\n    $or       逻辑或\n    $and      逻辑与\n    $not      逻辑非\n    $nor      逻辑or的取反\n    $exists   存在逻辑\n    $type     查询键的数据类型\n使用例子:\n    db.collection.find(&#123;$or:[&#123;age:&#123;$lt:18&#125;&#125;,&#123;name:\"sc\"&#125;]&#125;):查询出collection中的年龄小于18或者名字等于sc的\n\n\n正则:\n    用/正则表达式/或者$regex:\"正则表达式\"编写正则表达式\n使用例子:\n    db.collection.find(&#123;name:/^abc/&#125;):查询名字是abc开头的\n    db.collection.find(&#123;name:&#123;$regex:\"123$\"&#125;&#125;):查询名字是123结尾的\n\n\nlimit和skip:\n    limit: 选中多少个\n    skip: 跳过多少个\n    配合使用的时候,先skip再limit\n使用例子:\n    db.collection.find().skip(2).limit(2):跳过两个再选中两个\n\n\n自定义查询(写js):\n    db.collection.find(&#123;$where:function()&#123;return this.age>30&#125;&#125;)\n    where可以执行一个函数,this就是表示当前collection中的数据,一条一条的来过this,类似于遍历<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"查询之后返回字段的过滤\"><a href=\"#查询之后返回字段的过滤\" class=\"headerlink\" title=\"查询之后返回字段的过滤\"></a>查询之后返回字段的过滤</h4><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">db.collection.find(&#123;条件&#125;,&#123;name:1,_id:0 参数就是返回的字段,1为返回,不写不返回,除了_id,如果不想返回_id,那么_id:0&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">db.collection.find().sort(&#123;排序字段:1, 排序字段:-1&#125;): sort表示排序,1为升序,-1为降序<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"统计个数\"><a href=\"#统计个数\" class=\"headerlink\" title=\"统计个数\"></a>统计个数</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">db.collection.find(&#123;条件&#125;).count()\ndb.collection.count(&#123;条件&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">db.collection.distinct(&quot;字段名字&quot;,&#123;条件&#125;): 返回的是一个列表,列表里面是不重复的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">管道:上层的结果给下层用\n$sum:总和,统计个数,$sum:1,以一倍计数\n$avg:平均\n$min:最小值\n$max:最大值\n$push:结果文档插入到一个数组中，\n$addToSet:结果文档插入到一个数组中,但不创建副本\n$first:根据资源文档排序获取第一个文档数据,\n$last:根据资源文档排序获取最后一个文档数据,\n$limit:显示多少个\n$skip:跳过多少个\n$sort:排序\n$project:修改输入文档的结构,如重命名\\添加\\删除字段,创建计算结果\n$unwind:将数组类型的字段进行拆分\n\n$match:相当于mysql中where\n$group:相当于mysql中group by\n\ndb.collection.aggregate(pipeline, options):语法:pipeline,管道,必须是一个数组\n格式:db.collection.aggregate([&#123;管道:&#123;表达式&#125;&#125;,&#123;管道:&#123;表达式&#125;&#125;])\n\n管道中使用字段:\n    不加$:在明确的条件中字段不用加$如&#123;name:&quot;lqs&quot;&#125;:这种表示name是lqs,冒号前面不加\n    加$:在不明确的使用值的时候加$如&#123;name2:$name&#125;:这种表示获取name的值,冒号后面加\n\n例子:\n    db.collection.aggregate([&#123;$match:&#123;name:&quot;lqs&quot;&#125;&#125;]):查出名字是lqs的\n    db.collection.aggregate([&#123;$match:&#123;_id:&#123;&quot;$gt&quot;:2&#125;&#125;&#125;,&#123;$group:&#123;_id:$name,aavg:&#123;$avg:$salary&#125;&#125;&#125;]):查出_id大于2的所有数据,在上面查出的数据中,再按照name分组,求出salary的平均,_id表示分组字段的key,分组字段必须加上$,在这里面出现的变量多用$修饰,aavg是别名这种有多个操作的,都是衔接的,必须下面能用\n    db.collection.aggregate([&#123;$group:&#123;_id:$name,maxM:&#123;$max:$salary&#125;,minM:&#123;$min:$salary&#125;&#125;&#125;]):分组查出最大最小\n    db.collection.aggregate([&#123;$group:&#123;_id:$sex,count:&#123;$sum:1&#125;&#125;&#125;]):分组统计男女生的总个数\n    db.collection.aggregate([&#123;$group:&#123;_id:null,count:&#123;$sum:1&#125;&#125;&#125;]):表示查出这个文档的个数,_id&#x3D;null的时候,表示整个文档为一组\n    上面的各种结果中都一定有一个_id字段,id表示分组依据\n    db.collection.aggregate([&#123;$group:&#123;_id:$gender,count:&#123;$sum:1&#125;&#125;&#125;,&#123;$[project:&#123;gender:$_id,count:1,_id:0&#125;]&#125;]):表示创建一个gender字段,值为上一个管道的_id的值,count:1表示显示这个字段,_id:0,表示不显示这个字段,也可以使用count:$count来显示,个之前的投影一样的1\\0操作\n\n    db.collection.aggregate([&#123;$sort:&#123;name:1&#125;&#125;]):按照姓名升序排序\n    db.collection.aggregate([\n        &#123;$group:&#123;_id:$gender,count:&#123;$sum:1&#125;&#125;&#125;,\n        &#123;$project:&#123;_id:0,gender:$_id.gender,count:1&#125;&#125;,\n        &#123;$sort:&#123;count:1&#125;&#125;\n    ]) 按照男女生总数升序排列\n    db.cllection.aggregate([\n        &#123;$skip:2&#125;,\n        &#123;$limit:2&#125;\n    ]) 跳过两条显示两条\n\n    原数据:&#123;&quot;_id&quot;:1, &quot;name&quot;:&quot;map&quot;, &quot;size&quot;:[1,2,3]&#125;\n    db.collection.aggregate([&#123;$unwind:$size&#125;]):将上面的数据中的size对应的列表拆分成三个,这个管道只对列表有用\n    拆分后:\n        &#123;&quot;_id&quot;:1, &quot;name&quot;:&quot;map&quot;, &quot;size&quot;:1&#125;\n        &#123;&quot;_id&quot;:1, &quot;name&quot;:&quot;map&quot;, &quot;size&quot;:2&#125;\n        &#123;&quot;_id&quot;:1, &quot;name&quot;:&quot;map&quot;, &quot;size&quot;:3&#125;\n\n\n    高级使用:\n    db.collection.aggregate([\n        &#123;$group:&#123;_id:&#123;conutry:$conutry,prevent:$prevent,userid:$userid&#125;&#125;&#125;, 将不同国家的不同省份的用户分出来userid用于去重\n        &#123;$group:&#123;_id:&#123;conutry:$_id.conutry,prevent:$_id.prevent&#125;,conunt:&#123;$sum:1&#125;&#125;&#125;, 在将以上分好的用国家和省份分组统计出总个数\n        &#123;$project:&#123;_id:0,conutry:$_id.conutry,prevent:$_id.prevent,conunt:1&#125;&#125; 显示某个国家某个地区的总人数\n    ])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">db.集合名.update(&#123;条件 根据这个条件查出对应的数据 字典格式&#125;,&#123;把查到的数据更新成什么 字典格式&#125;,&#123;multi Boolean 如果是true那么就是把查到的所有符合的数据都更新,false的话就只是更新查到的一个符合条件的数据&#125;)\n    这种方式不是简单的更新,这种属于是替换\ndb.集合名.update(&#123;条件 根据这个条件查出对应的数据 字典格式&#125;,&#123;$set:把查到的数据更新成什么 字典格式&#125;,&#123;multi Boolean 如果是true那么就是把查到的所有符合的数据都更新,false的话就只是更新查到的一个符合条件的数据&#125;)\n    这种方式就是更新,不会把本不该更新的键值对也替换了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">db.集合名.remove(&#123;条件 根据这个条件查出对应的数据 字典格式&#125;,&#123;justOne:true&#125;)\n\n    justOne表示是否只删除一条,如果是false,那么删除满足条件的所有数据,默认false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">Object ID: 文档ID\nString: 字符串,最常用,必须是utf-8\nBoolean: 存储一个布尔,true或者false\nInteger: 整数,可以是32位\\64位\nDouble: 浮点数\nArrays: 数组或者列表,多个值存入一个键\nObject: 用于嵌入式的文档,即一个值为一个文档\nNull: 存储Null值\nTimestamp: 时间戳,表示从1970-1-1到现在的总秒数\nData: 存储当前日期或者时间的UNIX时间格式,在mongodb中可以通过new Date(日期)来使用,存入的是年月日\n\n\n说明:\n    文档:要存入数据库中的字典,可以是各种嵌套的字典\n\n    每一个文档都有一个固定的属性 _id 会自动生成(12字节的十六进制数),多数时间自己设置_id,为了保证唯一性<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">创建索引:\n    db.collection.ensureIndex(&#123;&quot;索引字段&quot;,排序方式1升序-1降序&#125;,&#123;&quot;索引字段&quot;,&quot;取得名字&quot;&#125;):索引的创建\\取名\n查询索引:\n    db.collection.getIndexes():查询所有的索引\n删除索引：\n    db.collection.dorpIndex(&quot;索引名&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"nginx搭建","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T08:32:38.000Z","password":null,"summary":"nginx搭建","_content":"# Nginx\n\n## 各种方式安装的nginx的启动方式\n### 通过命令行安装\n```shell\napt install nginx\n/etc/init.d/nginx start     # 启动\n/etc/init.d/nginx stop      # 停止\n/etc/init.d/nginx restart   # 重启\n```\n### 通过docker安装\n```\ndocker start nginx   # 启动\ndocker stop nginx\t # 停止\ndocker restart nginx # 重启\n```\n### 通过编译安装\n```\n/xx/xx/nginx/sbin/nginx # 启动\n/xx/xx/nginx/sbin/nginx -s reload # 重启\nps -ef | grep nginx && kill xxxx # 关闭\nkill -9 nginx # 强制关闭\n```\n\n## nginx概念\nNginx 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务\n\n### Nginx特色\n```\n1.反向代理:\n正向代理：客户端配置代理服务器，通过代理服务器进行互联网访问\n反向代理：客户端将请求发送给反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外来说就是一个服务器，暴露得是反向代理服务器的地址，隐藏了真正的服务器地址\n2、负载均衡（并发性能提升）：\n在客户端发送多次请求的时候，将请求分发到不同的服务器上\n3、动静分离：\n为了提升网站的解析速度，可以将静态页面和动态页面由不同的服务器来解析，加快解析速度，降低原本单个服务器的压力\n```\n\n### nginx的安装\n\n```\nnginx:安装的本体（nginx.org）\n依赖：\nopenssl:支持nginx开通https的模块，非对称加密的工具（选择性下载）(https://www.openssl.org/）\nzlib:是一款支持zlib压缩的模块(zlib.net)(必须下载)\npcre:是一个支持正则表达式的模块（www.pcre.org）（必须下载）\n\n都下载好以后就在usr/share/下面创建一个nginx文件夹\n将下载好的文件解压到nginx文件夹下\n\n安装C语言编译工具：\napt install gcc\napt install build-essential\napt install make\n\n进入解压好的nginx里面：\n./configure --with-http_ssl_module --with-openssl=../opensslx-x-x  --with-pcre=../pcrex-x-x --with-zlib=../zlibx-x-x\n\n这个命令可以将模块加载进入nginx\n\n然后用make命令编译一下\nmake install安装一下\n\n安装在/usr/local/nginx/下面\n\n进入这个目录\n启动：\n    进入sbin执行./nginx\n重启：\n    ./nginx -s reload\n关闭：\n    pkill -9 nginx强制关闭\n    ./nginx -s stop\n配置：\n    进入conf，vim编辑nginx.conf配置nginx\n    \n```\n            \n            \n## 基本使用\n### 配置文件：全局块，events块，http块\n\n```\n\nworker_processes  1; # 线程数\n\n\nevents {\n    worker_connections  1024; #最大连接数\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    upstream xxx {\n        # ip_hash # 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n\n        server 10.0.6.108:7080 weight=2; # 权重越大被访问的次数就越多，默认是1，轮询 \n        server 10.0.0.85:8980 weight=4; \n\n        # fair # 按后端服务器的响应时间来分配请求，响应时间短的优先分配。与weight分配策略类似。\n        # 这三种决策使用其中之一就可以  \n        # 这个用于实现负载均衡\n        # 在location使用：proxy_pass http://xxx就可以\n    }\n\n\n\n    server {\n    listen       80;\n    server_name  localhost;\n\n    # location的一些修饰符：\n    # = 用于精确匹配\n    # ~ 用于区分大小写的正则匹配，模糊匹配\n    # ~* 用于不区分大小写的正则匹配，模糊匹配\n    # ^~ 用于字符串前缀匹配，找到最长匹配（高位匹配最多的，做完美的），然后停止查找\n\n    # ^~的优先级大于正则\n\n\n    location ~ /group[0-9]/ {\n            ngx_fastdfs_module;\n        }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n            root   html;\n        }\n    }\n\n\n    # server在http中可以有多个\n    # location在server中也可以有多个，用于解决动静分离的时候可以用\n}\n```\n\n#### 反向代理 \n通过proxy_pass 地址","source":"_posts/nginx搭建.md","raw":"---\ntitle: nginx搭建\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 16:32:38\npassword:\nsummary: nginx搭建\ntags: nginx\ncategories: 工具\n---\n# Nginx\n\n## 各种方式安装的nginx的启动方式\n### 通过命令行安装\n```shell\napt install nginx\n/etc/init.d/nginx start     # 启动\n/etc/init.d/nginx stop      # 停止\n/etc/init.d/nginx restart   # 重启\n```\n### 通过docker安装\n```\ndocker start nginx   # 启动\ndocker stop nginx\t # 停止\ndocker restart nginx # 重启\n```\n### 通过编译安装\n```\n/xx/xx/nginx/sbin/nginx # 启动\n/xx/xx/nginx/sbin/nginx -s reload # 重启\nps -ef | grep nginx && kill xxxx # 关闭\nkill -9 nginx # 强制关闭\n```\n\n## nginx概念\nNginx 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务\n\n### Nginx特色\n```\n1.反向代理:\n正向代理：客户端配置代理服务器，通过代理服务器进行互联网访问\n反向代理：客户端将请求发送给反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外来说就是一个服务器，暴露得是反向代理服务器的地址，隐藏了真正的服务器地址\n2、负载均衡（并发性能提升）：\n在客户端发送多次请求的时候，将请求分发到不同的服务器上\n3、动静分离：\n为了提升网站的解析速度，可以将静态页面和动态页面由不同的服务器来解析，加快解析速度，降低原本单个服务器的压力\n```\n\n### nginx的安装\n\n```\nnginx:安装的本体（nginx.org）\n依赖：\nopenssl:支持nginx开通https的模块，非对称加密的工具（选择性下载）(https://www.openssl.org/）\nzlib:是一款支持zlib压缩的模块(zlib.net)(必须下载)\npcre:是一个支持正则表达式的模块（www.pcre.org）（必须下载）\n\n都下载好以后就在usr/share/下面创建一个nginx文件夹\n将下载好的文件解压到nginx文件夹下\n\n安装C语言编译工具：\napt install gcc\napt install build-essential\napt install make\n\n进入解压好的nginx里面：\n./configure --with-http_ssl_module --with-openssl=../opensslx-x-x  --with-pcre=../pcrex-x-x --with-zlib=../zlibx-x-x\n\n这个命令可以将模块加载进入nginx\n\n然后用make命令编译一下\nmake install安装一下\n\n安装在/usr/local/nginx/下面\n\n进入这个目录\n启动：\n    进入sbin执行./nginx\n重启：\n    ./nginx -s reload\n关闭：\n    pkill -9 nginx强制关闭\n    ./nginx -s stop\n配置：\n    进入conf，vim编辑nginx.conf配置nginx\n    \n```\n            \n            \n## 基本使用\n### 配置文件：全局块，events块，http块\n\n```\n\nworker_processes  1; # 线程数\n\n\nevents {\n    worker_connections  1024; #最大连接数\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    upstream xxx {\n        # ip_hash # 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n\n        server 10.0.6.108:7080 weight=2; # 权重越大被访问的次数就越多，默认是1，轮询 \n        server 10.0.0.85:8980 weight=4; \n\n        # fair # 按后端服务器的响应时间来分配请求，响应时间短的优先分配。与weight分配策略类似。\n        # 这三种决策使用其中之一就可以  \n        # 这个用于实现负载均衡\n        # 在location使用：proxy_pass http://xxx就可以\n    }\n\n\n\n    server {\n    listen       80;\n    server_name  localhost;\n\n    # location的一些修饰符：\n    # = 用于精确匹配\n    # ~ 用于区分大小写的正则匹配，模糊匹配\n    # ~* 用于不区分大小写的正则匹配，模糊匹配\n    # ^~ 用于字符串前缀匹配，找到最长匹配（高位匹配最多的，做完美的），然后停止查找\n\n    # ^~的优先级大于正则\n\n\n    location ~ /group[0-9]/ {\n            ngx_fastdfs_module;\n        }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n            root   html;\n        }\n    }\n\n\n    # server在http中可以有多个\n    # location在server中也可以有多个，用于解决动静分离的时候可以用\n}\n```\n\n#### 反向代理 \n通过proxy_pass 地址","slug":"nginx搭建","published":1,"updated":"2023-01-19T10:59:22.478Z","_id":"cld2uqf6d000a1svkganhgsee","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1><h2 id=\"各种方式安装的nginx的启动方式\"><a href=\"#各种方式安装的nginx的启动方式\" class=\"headerlink\" title=\"各种方式安装的nginx的启动方式\"></a>各种方式安装的nginx的启动方式</h2><h3 id=\"通过命令行安装\"><a href=\"#通过命令行安装\" class=\"headerlink\" title=\"通过命令行安装\"></a>通过命令行安装</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> nginx\n/etc/init.d/nginx start     <span class=\"token comment\"># 启动</span>\n/etc/init.d/nginx stop      <span class=\"token comment\"># 停止</span>\n/etc/init.d/nginx restart   <span class=\"token comment\"># 重启</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"通过docker安装\"><a href=\"#通过docker安装\" class=\"headerlink\" title=\"通过docker安装\"></a>通过docker安装</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker start nginx   # 启动\ndocker stop nginx\t # 停止\ndocker restart nginx # 重启<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"通过编译安装\"><a href=\"#通过编译安装\" class=\"headerlink\" title=\"通过编译安装\"></a>通过编译安装</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;xx&#x2F;xx&#x2F;nginx&#x2F;sbin&#x2F;nginx # 启动\n&#x2F;xx&#x2F;xx&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload # 重启\nps -ef | grep nginx &amp;&amp; kill xxxx # 关闭\nkill -9 nginx # 强制关闭<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"nginx概念\"><a href=\"#nginx概念\" class=\"headerlink\" title=\"nginx概念\"></a>nginx概念</h2><p>Nginx 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务</p>\n<h3 id=\"Nginx特色\"><a href=\"#Nginx特色\" class=\"headerlink\" title=\"Nginx特色\"></a>Nginx特色</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1.反向代理:\n正向代理：客户端配置代理服务器，通过代理服务器进行互联网访问\n反向代理：客户端将请求发送给反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外来说就是一个服务器，暴露得是反向代理服务器的地址，隐藏了真正的服务器地址\n2、负载均衡（并发性能提升）：\n在客户端发送多次请求的时候，将请求分发到不同的服务器上\n3、动静分离：\n为了提升网站的解析速度，可以将静态页面和动态页面由不同的服务器来解析，加快解析速度，降低原本单个服务器的压力<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"nginx的安装\"><a href=\"#nginx的安装\" class=\"headerlink\" title=\"nginx的安装\"></a>nginx的安装</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">nginx:安装的本体（nginx.org）\n依赖：\nopenssl:支持nginx开通https的模块，非对称加密的工具（选择性下载）(https:&#x2F;&#x2F;www.openssl.org&#x2F;）\nzlib:是一款支持zlib压缩的模块(zlib.net)(必须下载)\npcre:是一个支持正则表达式的模块（www.pcre.org）（必须下载）\n\n都下载好以后就在usr&#x2F;share&#x2F;下面创建一个nginx文件夹\n将下载好的文件解压到nginx文件夹下\n\n安装C语言编译工具：\napt install gcc\napt install build-essential\napt install make\n\n进入解压好的nginx里面：\n.&#x2F;configure --with-http_ssl_module --with-openssl&#x3D;..&#x2F;opensslx-x-x  --with-pcre&#x3D;..&#x2F;pcrex-x-x --with-zlib&#x3D;..&#x2F;zlibx-x-x\n\n这个命令可以将模块加载进入nginx\n\n然后用make命令编译一下\nmake install安装一下\n\n安装在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;下面\n\n进入这个目录\n启动：\n    进入sbin执行.&#x2F;nginx\n重启：\n    .&#x2F;nginx -s reload\n关闭：\n    pkill -9 nginx强制关闭\n    .&#x2F;nginx -s stop\n配置：\n    进入conf，vim编辑nginx.conf配置nginx\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"配置文件：全局块，events块，http块\"><a href=\"#配置文件：全局块，events块，http块\" class=\"headerlink\" title=\"配置文件：全局块，events块，http块\"></a>配置文件：全局块，events块，http块</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">\nworker_processes  1; # 线程数\n\n\nevents &#123;\n    worker_connections  1024; #最大连接数\n&#125;\n\n\nhttp &#123;\n    include       mime.types;\n    default_type  application&#x2F;octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    upstream xxx &#123;\n        # ip_hash # 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n\n        server 10.0.6.108:7080 weight&#x3D;2; # 权重越大被访问的次数就越多，默认是1，轮询 \n        server 10.0.0.85:8980 weight&#x3D;4; \n\n        # fair # 按后端服务器的响应时间来分配请求，响应时间短的优先分配。与weight分配策略类似。\n        # 这三种决策使用其中之一就可以  \n        # 这个用于实现负载均衡\n        # 在location使用：proxy_pass http:&#x2F;&#x2F;xxx就可以\n    &#125;\n\n\n\n    server &#123;\n    listen       80;\n    server_name  localhost;\n\n    # location的一些修饰符：\n    # &#x3D; 用于精确匹配\n    # ~ 用于区分大小写的正则匹配，模糊匹配\n    # ~* 用于不区分大小写的正则匹配，模糊匹配\n    # ^~ 用于字符串前缀匹配，找到最长匹配（高位匹配最多的，做完美的），然后停止查找\n\n    # ^~的优先级大于正则\n\n\n    location ~ &#x2F;group[0-9]&#x2F; &#123;\n            ngx_fastdfs_module;\n        &#125;\n\n    error_page   500 502 503 504  &#x2F;50x.html;\n    location &#x3D; &#x2F;50x.html &#123;\n            root   html;\n        &#125;\n    &#125;\n\n\n    # server在http中可以有多个\n    # location在server中也可以有多个，用于解决动静分离的时候可以用\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h4><p>通过proxy_pass 地址</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1><h2 id=\"各种方式安装的nginx的启动方式\"><a href=\"#各种方式安装的nginx的启动方式\" class=\"headerlink\" title=\"各种方式安装的nginx的启动方式\"></a>各种方式安装的nginx的启动方式</h2><h3 id=\"通过命令行安装\"><a href=\"#通过命令行安装\" class=\"headerlink\" title=\"通过命令行安装\"></a>通过命令行安装</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> nginx\n/etc/init.d/nginx start     <span class=\"token comment\"># 启动</span>\n/etc/init.d/nginx stop      <span class=\"token comment\"># 停止</span>\n/etc/init.d/nginx restart   <span class=\"token comment\"># 重启</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"通过docker安装\"><a href=\"#通过docker安装\" class=\"headerlink\" title=\"通过docker安装\"></a>通过docker安装</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker start nginx   # 启动\ndocker stop nginx\t # 停止\ndocker restart nginx # 重启<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"通过编译安装\"><a href=\"#通过编译安装\" class=\"headerlink\" title=\"通过编译安装\"></a>通过编译安装</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;xx&#x2F;xx&#x2F;nginx&#x2F;sbin&#x2F;nginx # 启动\n&#x2F;xx&#x2F;xx&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload # 重启\nps -ef | grep nginx &amp;&amp; kill xxxx # 关闭\nkill -9 nginx # 强制关闭<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"nginx概念\"><a href=\"#nginx概念\" class=\"headerlink\" title=\"nginx概念\"></a>nginx概念</h2><p>Nginx 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务</p>\n<h3 id=\"Nginx特色\"><a href=\"#Nginx特色\" class=\"headerlink\" title=\"Nginx特色\"></a>Nginx特色</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1.反向代理:\n正向代理：客户端配置代理服务器，通过代理服务器进行互联网访问\n反向代理：客户端将请求发送给反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外来说就是一个服务器，暴露得是反向代理服务器的地址，隐藏了真正的服务器地址\n2、负载均衡（并发性能提升）：\n在客户端发送多次请求的时候，将请求分发到不同的服务器上\n3、动静分离：\n为了提升网站的解析速度，可以将静态页面和动态页面由不同的服务器来解析，加快解析速度，降低原本单个服务器的压力<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"nginx的安装\"><a href=\"#nginx的安装\" class=\"headerlink\" title=\"nginx的安装\"></a>nginx的安装</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">nginx:安装的本体（nginx.org）\n依赖：\nopenssl:支持nginx开通https的模块，非对称加密的工具（选择性下载）(https:&#x2F;&#x2F;www.openssl.org&#x2F;）\nzlib:是一款支持zlib压缩的模块(zlib.net)(必须下载)\npcre:是一个支持正则表达式的模块（www.pcre.org）（必须下载）\n\n都下载好以后就在usr&#x2F;share&#x2F;下面创建一个nginx文件夹\n将下载好的文件解压到nginx文件夹下\n\n安装C语言编译工具：\napt install gcc\napt install build-essential\napt install make\n\n进入解压好的nginx里面：\n.&#x2F;configure --with-http_ssl_module --with-openssl&#x3D;..&#x2F;opensslx-x-x  --with-pcre&#x3D;..&#x2F;pcrex-x-x --with-zlib&#x3D;..&#x2F;zlibx-x-x\n\n这个命令可以将模块加载进入nginx\n\n然后用make命令编译一下\nmake install安装一下\n\n安装在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;下面\n\n进入这个目录\n启动：\n    进入sbin执行.&#x2F;nginx\n重启：\n    .&#x2F;nginx -s reload\n关闭：\n    pkill -9 nginx强制关闭\n    .&#x2F;nginx -s stop\n配置：\n    进入conf，vim编辑nginx.conf配置nginx\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"配置文件：全局块，events块，http块\"><a href=\"#配置文件：全局块，events块，http块\" class=\"headerlink\" title=\"配置文件：全局块，events块，http块\"></a>配置文件：全局块，events块，http块</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">\nworker_processes  1; # 线程数\n\n\nevents &#123;\n    worker_connections  1024; #最大连接数\n&#125;\n\n\nhttp &#123;\n    include       mime.types;\n    default_type  application&#x2F;octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    upstream xxx &#123;\n        # ip_hash # 每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n\n        server 10.0.6.108:7080 weight&#x3D;2; # 权重越大被访问的次数就越多，默认是1，轮询 \n        server 10.0.0.85:8980 weight&#x3D;4; \n\n        # fair # 按后端服务器的响应时间来分配请求，响应时间短的优先分配。与weight分配策略类似。\n        # 这三种决策使用其中之一就可以  \n        # 这个用于实现负载均衡\n        # 在location使用：proxy_pass http:&#x2F;&#x2F;xxx就可以\n    &#125;\n\n\n\n    server &#123;\n    listen       80;\n    server_name  localhost;\n\n    # location的一些修饰符：\n    # &#x3D; 用于精确匹配\n    # ~ 用于区分大小写的正则匹配，模糊匹配\n    # ~* 用于不区分大小写的正则匹配，模糊匹配\n    # ^~ 用于字符串前缀匹配，找到最长匹配（高位匹配最多的，做完美的），然后停止查找\n\n    # ^~的优先级大于正则\n\n\n    location ~ &#x2F;group[0-9]&#x2F; &#123;\n            ngx_fastdfs_module;\n        &#125;\n\n    error_page   500 502 503 504  &#x2F;50x.html;\n    location &#x3D; &#x2F;50x.html &#123;\n            root   html;\n        &#125;\n    &#125;\n\n\n    # server在http中可以有多个\n    # location在server中也可以有多个，用于解决动静分离的时候可以用\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h4><p>通过proxy_pass 地址</p>\n"},{"title":"ngonx+fdfs搭建","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T08:23:26.000Z","password":null,"summary":"nginx+fdfs搭建","_content":"## Nginx+FastDfs\n[hfdfs项目](https://github.com/happyfish100)     fdfs和那llibfastcommon依赖还有fdfs-ngx-module还有nginx链接模块都可以直接克隆相对应仓库\n\n### 安装nginx及fastdfs-nginx-module\n\n#### 解压缩 fastdfs-nginx-module-master.zip\n\n```shell\nsudo ./configure --prefix=/usr/local/nginx/ --add-module=fastdfs-nginx-module-master解压后的目录的绝对路径/src\n```\n\n#### 如果nginx还没安装执行\n```shell\nsudo ./make\nsudo ./make install\n```\n```shell\n./configure --with-http_ssl_module --with-openssl=../openssl-1.1.1m  --with-pcre=../pcre-8.42 --with-zlib=../zlib-1.2.11 --prefix=/usr/local/nginx/ --add-module=/usr/share/fastdfs/fastdfs-nginx-module-master/src\n```\n\n#### 如果nginx安装了执行\n> sudo ./make\n\n```shell\nsudo cp fastdfs-nginx-module-master解压后的目录中src下的mod_fastdfs.conf  /etc/fdfs/mod_fastdfs.conf\n```\n> sudo vim /etc/fdfs/mod_fastdfs.conf\n\n```text\n修改内容：\n\nconnect_timeout=10\n\ntracker_server=自己ubuntu虚拟机的ip地址:22122\n\nurl_have_group_name=true\n\nstore_path0=/home/python/fastdfs/storage\n```\n\n> sudo cp 解压缩的fastdfs-master目录中的http.conf  /etc/fdfs/http.conf\n\n> sudo cp 解压缩的fastdfs-master目录中的mime.types /etc/fdfs/mime.types\n\n> sudo vim /usr/local/nginx/conf/nginx.conf\n\n> 在http部分中添加配置信息如下(反向代理)：\n\n```shell\nserver {\n\n        listen       8888;\n\n        server_name  localhost;\n\n        location ~/group[0-9]/ {\n\n            ngx_fastdfs_module;\n\n        }\n\n        error_page   500 502 503 504  /50x.html;\n\n        location = /50x.html {\n\n        root   html;\n\n        }\n\n}\n```\n#### 启动nginx\n```shell\nsudo /usr/local/nginx/sbin/nginx\n```\n\n> 在换ip之后，storage.conf和client.conf还有mod_fastdfs.cong\n\n\n#### python使用fdfs\n\n```shell\npip install fdfs_client-py-master.zip\n\n>>> from fdfs_client.client import Fdfs_client\n\n>>> client = Fdfs_client('/etc/fdfs/client.conf')\n\n>>> ret = client.upload_by_filename('test')\n\n>>> ret\n```\n```\n{'Groupname':'group1','Status':'Uploadsuccessed.','Remotefile_id':'group1/M00/00/00/wKjzh0_xaR63RExnAAAaDqbNk5E1398.py','Uploadedsize':'6.0KB','Localfilename':'test', 'Storage IP':'192.168.243.133'}\n    ```","source":"_posts/ngonx-fdfs搭建.md","raw":"---\ntitle: ngonx+fdfs搭建\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 16:23:26\npassword:\nsummary: nginx+fdfs搭建\ntags: fdfs\ncategories: 工具\n---\n## Nginx+FastDfs\n[hfdfs项目](https://github.com/happyfish100)     fdfs和那llibfastcommon依赖还有fdfs-ngx-module还有nginx链接模块都可以直接克隆相对应仓库\n\n### 安装nginx及fastdfs-nginx-module\n\n#### 解压缩 fastdfs-nginx-module-master.zip\n\n```shell\nsudo ./configure --prefix=/usr/local/nginx/ --add-module=fastdfs-nginx-module-master解压后的目录的绝对路径/src\n```\n\n#### 如果nginx还没安装执行\n```shell\nsudo ./make\nsudo ./make install\n```\n```shell\n./configure --with-http_ssl_module --with-openssl=../openssl-1.1.1m  --with-pcre=../pcre-8.42 --with-zlib=../zlib-1.2.11 --prefix=/usr/local/nginx/ --add-module=/usr/share/fastdfs/fastdfs-nginx-module-master/src\n```\n\n#### 如果nginx安装了执行\n> sudo ./make\n\n```shell\nsudo cp fastdfs-nginx-module-master解压后的目录中src下的mod_fastdfs.conf  /etc/fdfs/mod_fastdfs.conf\n```\n> sudo vim /etc/fdfs/mod_fastdfs.conf\n\n```text\n修改内容：\n\nconnect_timeout=10\n\ntracker_server=自己ubuntu虚拟机的ip地址:22122\n\nurl_have_group_name=true\n\nstore_path0=/home/python/fastdfs/storage\n```\n\n> sudo cp 解压缩的fastdfs-master目录中的http.conf  /etc/fdfs/http.conf\n\n> sudo cp 解压缩的fastdfs-master目录中的mime.types /etc/fdfs/mime.types\n\n> sudo vim /usr/local/nginx/conf/nginx.conf\n\n> 在http部分中添加配置信息如下(反向代理)：\n\n```shell\nserver {\n\n        listen       8888;\n\n        server_name  localhost;\n\n        location ~/group[0-9]/ {\n\n            ngx_fastdfs_module;\n\n        }\n\n        error_page   500 502 503 504  /50x.html;\n\n        location = /50x.html {\n\n        root   html;\n\n        }\n\n}\n```\n#### 启动nginx\n```shell\nsudo /usr/local/nginx/sbin/nginx\n```\n\n> 在换ip之后，storage.conf和client.conf还有mod_fastdfs.cong\n\n\n#### python使用fdfs\n\n```shell\npip install fdfs_client-py-master.zip\n\n>>> from fdfs_client.client import Fdfs_client\n\n>>> client = Fdfs_client('/etc/fdfs/client.conf')\n\n>>> ret = client.upload_by_filename('test')\n\n>>> ret\n```\n```\n{'Groupname':'group1','Status':'Uploadsuccessed.','Remotefile_id':'group1/M00/00/00/wKjzh0_xaR63RExnAAAaDqbNk5E1398.py','Uploadedsize':'6.0KB','Localfilename':'test', 'Storage IP':'192.168.243.133'}\n    ```","slug":"ngonx-fdfs搭建","published":1,"updated":"2023-01-19T11:13:03.826Z","_id":"cld2uqf6e000b1svketri22w7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Nginx-FastDfs\"><a href=\"#Nginx-FastDfs\" class=\"headerlink\" title=\"Nginx+FastDfs\"></a>Nginx+FastDfs</h2><p><a href=\"https://github.com/happyfish100\">hfdfs项目</a>     fdfs和那llibfastcommon依赖还有fdfs-ngx-module还有nginx链接模块都可以直接克隆相对应仓库</p>\n<h3 id=\"安装nginx及fastdfs-nginx-module\"><a href=\"#安装nginx及fastdfs-nginx-module\" class=\"headerlink\" title=\"安装nginx及fastdfs-nginx-module\"></a>安装nginx及fastdfs-nginx-module</h3><h4 id=\"解压缩-fastdfs-nginx-module-master-zip\"><a href=\"#解压缩-fastdfs-nginx-module-master-zip\" class=\"headerlink\" title=\"解压缩 fastdfs-nginx-module-master.zip\"></a>解压缩 fastdfs-nginx-module-master.zip</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/local/nginx/ --add-module<span class=\"token operator\">=</span>fastdfs-nginx-module-master解压后的目录的绝对路径/src<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"如果nginx还没安装执行\"><a href=\"#如果nginx还没安装执行\" class=\"headerlink\" title=\"如果nginx还没安装执行\"></a>如果nginx还没安装执行</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ./make\n<span class=\"token function\">sudo</span> ./make <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure --with-http_ssl_module --with-openssl<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/openssl-1.1.1m  --with-pcre<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/pcre-8.42 --with-zlib<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/zlib-1.2.11 <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/local/nginx/ --add-module<span class=\"token operator\">=</span>/usr/share/fastdfs/fastdfs-nginx-module-master/src<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"如果nginx安装了执行\"><a href=\"#如果nginx安装了执行\" class=\"headerlink\" title=\"如果nginx安装了执行\"></a>如果nginx安装了执行</h4><blockquote>\n<p>sudo ./make</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> fastdfs-nginx-module-master解压后的目录中src下的mod_fastdfs.conf  /etc/fdfs/mod_fastdfs.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>sudo vim /etc/fdfs/mod_fastdfs.conf</p>\n</blockquote>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">修改内容：\n\nconnect_timeout=10\n\ntracker_server=自己ubuntu虚拟机的ip地址:22122\n\nurl_have_group_name=true\n\nstore_path0=/home/python/fastdfs/storage<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>sudo cp 解压缩的fastdfs-master目录中的http.conf  /etc/fdfs/http.conf</p>\n</blockquote>\n<blockquote>\n<p>sudo cp 解压缩的fastdfs-master目录中的mime.types /etc/fdfs/mime.types</p>\n</blockquote>\n<blockquote>\n<p>sudo vim /usr/local/nginx/conf/nginx.conf</p>\n</blockquote>\n<blockquote>\n<p>在http部分中添加配置信息如下(反向代理)：</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">&#123;</span>\n\n        listen       <span class=\"token number\">8888</span><span class=\"token punctuation\">;</span>\n\n        server_name  localhost<span class=\"token punctuation\">;</span>\n\n        location ~/group<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>/ <span class=\"token punctuation\">&#123;</span>\n\n            ngx_fastdfs_module<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n        error_page   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html<span class=\"token punctuation\">;</span>\n\n        location <span class=\"token operator\">=</span> /50x.html <span class=\"token punctuation\">&#123;</span>\n\n        root   html<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> /usr/local/nginx/sbin/nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>在换ip之后，storage.conf和client.conf还有mod_fastdfs.cong</p>\n</blockquote>\n<h4 id=\"python使用fdfs\"><a href=\"#python使用fdfs\" class=\"headerlink\" title=\"python使用fdfs\"></a>python使用fdfs</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> fdfs_client-py-master.zip\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> from fdfs_client.client <span class=\"token function\">import</span> Fdfs_client\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> client <span class=\"token operator\">=</span> Fdfs_client<span class=\"token punctuation\">(</span><span class=\"token string\">'/etc/fdfs/client.conf'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ret <span class=\"token operator\">=</span> client.upload_by_filename<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&#39;Groupname&#39;:&#39;group1&#39;,&#39;Status&#39;:&#39;Uploadsuccessed.&#39;,&#39;Remotefile_id&#39;:&#39;group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;wKjzh0_xaR63RExnAAAaDqbNk5E1398.py&#39;,&#39;Uploadedsize&#39;:&#39;6.0KB&#39;,&#39;Localfilename&#39;:&#39;test&#39;, &#39;Storage IP&#39;:&#39;192.168.243.133&#39;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Nginx-FastDfs\"><a href=\"#Nginx-FastDfs\" class=\"headerlink\" title=\"Nginx+FastDfs\"></a>Nginx+FastDfs</h2><p><a href=\"https://github.com/happyfish100\">hfdfs项目</a>     fdfs和那llibfastcommon依赖还有fdfs-ngx-module还有nginx链接模块都可以直接克隆相对应仓库</p>\n<h3 id=\"安装nginx及fastdfs-nginx-module\"><a href=\"#安装nginx及fastdfs-nginx-module\" class=\"headerlink\" title=\"安装nginx及fastdfs-nginx-module\"></a>安装nginx及fastdfs-nginx-module</h3><h4 id=\"解压缩-fastdfs-nginx-module-master-zip\"><a href=\"#解压缩-fastdfs-nginx-module-master-zip\" class=\"headerlink\" title=\"解压缩 fastdfs-nginx-module-master.zip\"></a>解压缩 fastdfs-nginx-module-master.zip</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/local/nginx/ --add-module<span class=\"token operator\">=</span>fastdfs-nginx-module-master解压后的目录的绝对路径/src<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"如果nginx还没安装执行\"><a href=\"#如果nginx还没安装执行\" class=\"headerlink\" title=\"如果nginx还没安装执行\"></a>如果nginx还没安装执行</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ./make\n<span class=\"token function\">sudo</span> ./make <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure --with-http_ssl_module --with-openssl<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/openssl-1.1.1m  --with-pcre<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/pcre-8.42 --with-zlib<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/zlib-1.2.11 <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/local/nginx/ --add-module<span class=\"token operator\">=</span>/usr/share/fastdfs/fastdfs-nginx-module-master/src<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"如果nginx安装了执行\"><a href=\"#如果nginx安装了执行\" class=\"headerlink\" title=\"如果nginx安装了执行\"></a>如果nginx安装了执行</h4><blockquote>\n<p>sudo ./make</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> fastdfs-nginx-module-master解压后的目录中src下的mod_fastdfs.conf  /etc/fdfs/mod_fastdfs.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>sudo vim /etc/fdfs/mod_fastdfs.conf</p>\n</blockquote>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">修改内容：\n\nconnect_timeout=10\n\ntracker_server=自己ubuntu虚拟机的ip地址:22122\n\nurl_have_group_name=true\n\nstore_path0=/home/python/fastdfs/storage<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>sudo cp 解压缩的fastdfs-master目录中的http.conf  /etc/fdfs/http.conf</p>\n</blockquote>\n<blockquote>\n<p>sudo cp 解压缩的fastdfs-master目录中的mime.types /etc/fdfs/mime.types</p>\n</blockquote>\n<blockquote>\n<p>sudo vim /usr/local/nginx/conf/nginx.conf</p>\n</blockquote>\n<blockquote>\n<p>在http部分中添加配置信息如下(反向代理)：</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">&#123;</span>\n\n        listen       <span class=\"token number\">8888</span><span class=\"token punctuation\">;</span>\n\n        server_name  localhost<span class=\"token punctuation\">;</span>\n\n        location ~/group<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>/ <span class=\"token punctuation\">&#123;</span>\n\n            ngx_fastdfs_module<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n        error_page   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html<span class=\"token punctuation\">;</span>\n\n        location <span class=\"token operator\">=</span> /50x.html <span class=\"token punctuation\">&#123;</span>\n\n        root   html<span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> /usr/local/nginx/sbin/nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>在换ip之后，storage.conf和client.conf还有mod_fastdfs.cong</p>\n</blockquote>\n<h4 id=\"python使用fdfs\"><a href=\"#python使用fdfs\" class=\"headerlink\" title=\"python使用fdfs\"></a>python使用fdfs</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> fdfs_client-py-master.zip\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> from fdfs_client.client <span class=\"token function\">import</span> Fdfs_client\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> client <span class=\"token operator\">=</span> Fdfs_client<span class=\"token punctuation\">(</span><span class=\"token string\">'/etc/fdfs/client.conf'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ret <span class=\"token operator\">=</span> client.upload_by_filename<span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&#39;Groupname&#39;:&#39;group1&#39;,&#39;Status&#39;:&#39;Uploadsuccessed.&#39;,&#39;Remotefile_id&#39;:&#39;group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;wKjzh0_xaR63RExnAAAaDqbNk5E1398.py&#39;,&#39;Uploadedsize&#39;:&#39;6.0KB&#39;,&#39;Localfilename&#39;:&#39;test&#39;, &#39;Storage IP&#39;:&#39;192.168.243.133&#39;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"pythonWebSocket笔记","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T07:04:40.000Z","password":null,"summary":"webSocket","_content":"## udp的数据通信\n```\n1、socket:创建套接字\n2、bind:绑定本地端口，接收数据必须绑定，发送数据可以不绑定\n3、sendto、recvfrom:接收发送数据\n4、close:关闭套接字\n```\n## tcp的数据通信\n>    客户端\n```\n1、socket:创建套接字\n*、bind:绑定端口号，客户端可以不用绑定，使用随机端口即可\n2、connect:链接服务器\n3、send、recv:接收发送数据\n4、close:关闭套接字\n```\n\n>   服务器\n```text\n1、socket:创建套接字\n*、setsock：套接字.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)，在客户端关闭之前，服务器首先关闭，关闭（close)\n2、bind:一定要绑定端口信息\n3、listen:使得主动变成被动\n4、accept:等待客户端链接\n5、send、recv:收发数据\n6、close:关闭套接字\n```","source":"_posts/pythonWebSocket笔记.md","raw":"---\ntitle: pythonWebSocket笔记\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 15:04:40\npassword:\nsummary: webSocket\ntags: basic\ncategories: Python\n---\n## udp的数据通信\n```\n1、socket:创建套接字\n2、bind:绑定本地端口，接收数据必须绑定，发送数据可以不绑定\n3、sendto、recvfrom:接收发送数据\n4、close:关闭套接字\n```\n## tcp的数据通信\n>    客户端\n```\n1、socket:创建套接字\n*、bind:绑定端口号，客户端可以不用绑定，使用随机端口即可\n2、connect:链接服务器\n3、send、recv:接收发送数据\n4、close:关闭套接字\n```\n\n>   服务器\n```text\n1、socket:创建套接字\n*、setsock：套接字.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)，在客户端关闭之前，服务器首先关闭，关闭（close)\n2、bind:一定要绑定端口信息\n3、listen:使得主动变成被动\n4、accept:等待客户端链接\n5、send、recv:收发数据\n6、close:关闭套接字\n```","slug":"pythonWebSocket笔记","published":1,"updated":"2023-01-19T08:55:56.718Z","_id":"cld2uqf6h000f1svkh5atfjws","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"udp的数据通信\"><a href=\"#udp的数据通信\" class=\"headerlink\" title=\"udp的数据通信\"></a>udp的数据通信</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、socket:创建套接字\n2、bind:绑定本地端口，接收数据必须绑定，发送数据可以不绑定\n3、sendto、recvfrom:接收发送数据\n4、close:关闭套接字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"tcp的数据通信\"><a href=\"#tcp的数据通信\" class=\"headerlink\" title=\"tcp的数据通信\"></a>tcp的数据通信</h2><blockquote>\n<p>   客户端</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、socket:创建套接字\n*、bind:绑定端口号，客户端可以不用绑定，使用随机端口即可\n2、connect:链接服务器\n3、send、recv:接收发送数据\n4、close:关闭套接字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>  服务器</p>\n</blockquote>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">1、socket:创建套接字\n*、setsock：套接字.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)，在客户端关闭之前，服务器首先关闭，关闭（close)\n2、bind:一定要绑定端口信息\n3、listen:使得主动变成被动\n4、accept:等待客户端链接\n5、send、recv:收发数据\n6、close:关闭套接字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"udp的数据通信\"><a href=\"#udp的数据通信\" class=\"headerlink\" title=\"udp的数据通信\"></a>udp的数据通信</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、socket:创建套接字\n2、bind:绑定本地端口，接收数据必须绑定，发送数据可以不绑定\n3、sendto、recvfrom:接收发送数据\n4、close:关闭套接字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"tcp的数据通信\"><a href=\"#tcp的数据通信\" class=\"headerlink\" title=\"tcp的数据通信\"></a>tcp的数据通信</h2><blockquote>\n<p>   客户端</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1、socket:创建套接字\n*、bind:绑定端口号，客户端可以不用绑定，使用随机端口即可\n2、connect:链接服务器\n3、send、recv:接收发送数据\n4、close:关闭套接字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>  服务器</p>\n</blockquote>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">1、socket:创建套接字\n*、setsock：套接字.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)，在客户端关闭之前，服务器首先关闭，关闭（close)\n2、bind:一定要绑定端口信息\n3、listen:使得主动变成被动\n4、accept:等待客户端链接\n5、send、recv:收发数据\n6、close:关闭套接字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"python正则","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T06:56:11.000Z","password":null,"summary":"python正则模块","_content":"\n## 正则\n\n>    1、匹配单个字符\n\n - . :点号表示匹配任意的一个字符（除了\\n),类似于ACCESS当中的？\n \n - []:方括号表示匹配[]当中的任何一个字符，[1-9],[1-35-8],[asbdef],[a-be-zA-Z0-4]都是可以的[AaBb]都是可以的\n \n - \\d:表示匹配任意一个数字（0-9）\n \n - \\D:表示匹配数字以外的任意一个其他字符\n \n - \\s:表示匹配任意一个空白，tab或者空格或者换页符等等\n \n - \\S:表示匹配一个非空白字符，除了空白以外的其他任意字符\n \n - \\w:表示匹配任意一个字母、数字、下划线，还有一种用法：\\w可以用来表示除了特殊字符以外的所有字符，包括汉字\n \n - \\W:表示匹配任意一个特殊字符\n \n - 使用方法:re.match(r'规则','要处理的字符串').group(),  match用来创建，group用来查看返回值\n\n\n> 匹配多个字符\n\n  - {}:大括号表示它前面紧挨着的那个字符出现的次数，{3,6},表示出现3到6次都可以，可以出现4，也可以出现3，只要在3到6的范围内都可以,{8}表示强制它前面紧挨着的字符必须出现8次\n  \n  - ？:表示？前面紧挨着的一个字符要么出现一次要么不出现\n  \n  - +:表示前面紧挨着的哪一个字符出现至少一次到无限次。和.连用‘.+’表示取出所有，前提是必须有至少一个字符\n  \n  - *:表示前面紧挨着的哪一个字符出现0次到无限次。和.连用‘.*’表示取出所有\n  \n  -  [^字符]:表示除了这个字符以外的\n  \n  -   [^字符]*:表示除了多个或者没有这个字符以外的\n  \n  -   ^：表示必须，如果在[]里面意思就相反，表示除了\n\n> 分组\n\n - |:与分组结合使用表示匹配分组中的任意一个字符串，(qq|web)，表示匹配qq或者web中的任意一个\n - ():分组，把正则表达式分成多组，从左往右组号升序\n -  \\num:与分组结合使用，多次出现相同的规则的时候可以用\\num来调用前面封装好的规则，如 \\1 表示调用前面的第一个分组的规则\n\n - 分组的取名和调用：\n  - 1、可以不取名，直接用组号 用第一个分组：\\1   ，  用第二个分组：\\2 以此类推\n   \n   - 2、当分组十分的多的时候，可以取名：原来的分组：(\\w*)  取名后的分组:(?P<name1>\\w*)    ?P<name1>就是取名的表达式\n  \n   -  3、使用取名后的分组：原来使用(\\1)   用名字使用:(?P=name1)\n\n> re模块的高级用法\n\n - 1.search: re.search(r'规则','字符串') 表示从这些字符串中找到符合规则的第一个数据\n \t\n - 2、findall: re.findall(r'规则','字符串') 表示从这些字符中找到所有的符合规则的数据，返回一个列表\n \n -  3、sub: re.sub(r'规则','替换字符串','字符串') 表示从这些字符中找到所有的符合规则的数据，然后全部替换成用来替换的字符串\n - 4、spilt: re.spilt(r'规则','字符串') 表示从这些字符串中找到符合规则的数据，并且从那里开始分割字符串，返回一个列表\n","source":"_posts/python正则.md","raw":"---\ntitle: python正则\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 14:56:11\npassword:\nsummary: python正则模块\ntags: basic\ncategories: Python\n---\n\n## 正则\n\n>    1、匹配单个字符\n\n - . :点号表示匹配任意的一个字符（除了\\n),类似于ACCESS当中的？\n \n - []:方括号表示匹配[]当中的任何一个字符，[1-9],[1-35-8],[asbdef],[a-be-zA-Z0-4]都是可以的[AaBb]都是可以的\n \n - \\d:表示匹配任意一个数字（0-9）\n \n - \\D:表示匹配数字以外的任意一个其他字符\n \n - \\s:表示匹配任意一个空白，tab或者空格或者换页符等等\n \n - \\S:表示匹配一个非空白字符，除了空白以外的其他任意字符\n \n - \\w:表示匹配任意一个字母、数字、下划线，还有一种用法：\\w可以用来表示除了特殊字符以外的所有字符，包括汉字\n \n - \\W:表示匹配任意一个特殊字符\n \n - 使用方法:re.match(r'规则','要处理的字符串').group(),  match用来创建，group用来查看返回值\n\n\n> 匹配多个字符\n\n  - {}:大括号表示它前面紧挨着的那个字符出现的次数，{3,6},表示出现3到6次都可以，可以出现4，也可以出现3，只要在3到6的范围内都可以,{8}表示强制它前面紧挨着的字符必须出现8次\n  \n  - ？:表示？前面紧挨着的一个字符要么出现一次要么不出现\n  \n  - +:表示前面紧挨着的哪一个字符出现至少一次到无限次。和.连用‘.+’表示取出所有，前提是必须有至少一个字符\n  \n  - *:表示前面紧挨着的哪一个字符出现0次到无限次。和.连用‘.*’表示取出所有\n  \n  -  [^字符]:表示除了这个字符以外的\n  \n  -   [^字符]*:表示除了多个或者没有这个字符以外的\n  \n  -   ^：表示必须，如果在[]里面意思就相反，表示除了\n\n> 分组\n\n - |:与分组结合使用表示匹配分组中的任意一个字符串，(qq|web)，表示匹配qq或者web中的任意一个\n - ():分组，把正则表达式分成多组，从左往右组号升序\n -  \\num:与分组结合使用，多次出现相同的规则的时候可以用\\num来调用前面封装好的规则，如 \\1 表示调用前面的第一个分组的规则\n\n - 分组的取名和调用：\n  - 1、可以不取名，直接用组号 用第一个分组：\\1   ，  用第二个分组：\\2 以此类推\n   \n   - 2、当分组十分的多的时候，可以取名：原来的分组：(\\w*)  取名后的分组:(?P<name1>\\w*)    ?P<name1>就是取名的表达式\n  \n   -  3、使用取名后的分组：原来使用(\\1)   用名字使用:(?P=name1)\n\n> re模块的高级用法\n\n - 1.search: re.search(r'规则','字符串') 表示从这些字符串中找到符合规则的第一个数据\n \t\n - 2、findall: re.findall(r'规则','字符串') 表示从这些字符中找到所有的符合规则的数据，返回一个列表\n \n -  3、sub: re.sub(r'规则','替换字符串','字符串') 表示从这些字符中找到所有的符合规则的数据，然后全部替换成用来替换的字符串\n - 4、spilt: re.spilt(r'规则','字符串') 表示从这些字符串中找到符合规则的数据，并且从那里开始分割字符串，返回一个列表\n","slug":"python正则","published":1,"updated":"2023-01-19T10:46:38.138Z","_id":"cld2uqf6i000h1svk7fxp9vu0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"正则\"><a href=\"#正则\" class=\"headerlink\" title=\"正则\"></a>正则</h2><blockquote>\n<p>   1、匹配单个字符</p>\n</blockquote>\n<ul>\n<li>. :点号表示匹配任意的一个字符（除了\\n),类似于ACCESS当中的？</li>\n<li>[]:方括号表示匹配[]当中的任何一个字符，[1-9],[1-35-8],[asbdef],[a-be-zA-Z0-4]都是可以的[AaBb]都是可以的</li>\n<li>\\d:表示匹配任意一个数字（0-9）</li>\n<li>\\D:表示匹配数字以外的任意一个其他字符</li>\n<li>\\s:表示匹配任意一个空白，tab或者空格或者换页符等等</li>\n<li>\\S:表示匹配一个非空白字符，除了空白以外的其他任意字符</li>\n<li>\\w:表示匹配任意一个字母、数字、下划线，还有一种用法：\\w可以用来表示除了特殊字符以外的所有字符，包括汉字</li>\n<li>\\W:表示匹配任意一个特殊字符</li>\n<li>使用方法:re.match(r’规则’,’要处理的字符串’).group(),  match用来创建，group用来查看返回值</li>\n</ul>\n<blockquote>\n<p>匹配多个字符</p>\n</blockquote>\n<ul>\n<li>{}:大括号表示它前面紧挨着的那个字符出现的次数，{3,6},表示出现3到6次都可以，可以出现4，也可以出现3，只要在3到6的范围内都可以,{8}表示强制它前面紧挨着的字符必须出现8次</li>\n<li>？:表示？前面紧挨着的一个字符要么出现一次要么不出现</li>\n<li>+:表示前面紧挨着的哪一个字符出现至少一次到无限次。和.连用‘.+’表示取出所有，前提是必须有至少一个字符</li>\n<li>*:表示前面紧挨着的哪一个字符出现0次到无限次。和.连用‘.*’表示取出所有</li>\n<li>[^字符]:表示除了这个字符以外的</li>\n<li>[^字符]*:表示除了多个或者没有这个字符以外的</li>\n<li>  ^：表示必须，如果在[]里面意思就相反，表示除了</li>\n</ul>\n<blockquote>\n<p>分组</p>\n</blockquote>\n<ul>\n<li><p>|:与分组结合使用表示匹配分组中的任意一个字符串，(qq|web)，表示匹配qq或者web中的任意一个</p>\n</li>\n<li><p>():分组，把正则表达式分成多组，从左往右组号升序</p>\n</li>\n<li><p> \\num:与分组结合使用，多次出现相同的规则的时候可以用\\num来调用前面封装好的规则，如 \\1 表示调用前面的第一个分组的规则</p>\n</li>\n<li><p>分组的取名和调用：</p>\n</li>\n<li><p>1、可以不取名，直接用组号 用第一个分组：\\1   ，  用第二个分组：\\2 以此类推</p>\n</li>\n<li><p>2、当分组十分的多的时候，可以取名：原来的分组：(\\w*)  取名后的分组:(?P<name1>\\w*)    ?P<name1>就是取名的表达式</p>\n</li>\n<li><p> 3、使用取名后的分组：原来使用(\\1)   用名字使用:(?P=name1)</p>\n</li>\n</ul>\n<blockquote>\n<p>re模块的高级用法</p>\n</blockquote>\n<ul>\n<li>1.search: re.search(r’规则’,’字符串’) 表示从这些字符串中找到符合规则的第一个数据</li>\n<li>2、findall: re.findall(r’规则’,’字符串’) 表示从这些字符中找到所有的符合规则的数据，返回一个列表</li>\n<li> 3、sub: re.sub(r’规则’,’替换字符串’,’字符串’) 表示从这些字符中找到所有的符合规则的数据，然后全部替换成用来替换的字符串</li>\n<li>4、spilt: re.spilt(r’规则’,’字符串’) 表示从这些字符串中找到符合规则的数据，并且从那里开始分割字符串，返回一个列表</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正则\"><a href=\"#正则\" class=\"headerlink\" title=\"正则\"></a>正则</h2><blockquote>\n<p>   1、匹配单个字符</p>\n</blockquote>\n<ul>\n<li>. :点号表示匹配任意的一个字符（除了\\n),类似于ACCESS当中的？</li>\n<li>[]:方括号表示匹配[]当中的任何一个字符，[1-9],[1-35-8],[asbdef],[a-be-zA-Z0-4]都是可以的[AaBb]都是可以的</li>\n<li>\\d:表示匹配任意一个数字（0-9）</li>\n<li>\\D:表示匹配数字以外的任意一个其他字符</li>\n<li>\\s:表示匹配任意一个空白，tab或者空格或者换页符等等</li>\n<li>\\S:表示匹配一个非空白字符，除了空白以外的其他任意字符</li>\n<li>\\w:表示匹配任意一个字母、数字、下划线，还有一种用法：\\w可以用来表示除了特殊字符以外的所有字符，包括汉字</li>\n<li>\\W:表示匹配任意一个特殊字符</li>\n<li>使用方法:re.match(r’规则’,’要处理的字符串’).group(),  match用来创建，group用来查看返回值</li>\n</ul>\n<blockquote>\n<p>匹配多个字符</p>\n</blockquote>\n<ul>\n<li>{}:大括号表示它前面紧挨着的那个字符出现的次数，{3,6},表示出现3到6次都可以，可以出现4，也可以出现3，只要在3到6的范围内都可以,{8}表示强制它前面紧挨着的字符必须出现8次</li>\n<li>？:表示？前面紧挨着的一个字符要么出现一次要么不出现</li>\n<li>+:表示前面紧挨着的哪一个字符出现至少一次到无限次。和.连用‘.+’表示取出所有，前提是必须有至少一个字符</li>\n<li>*:表示前面紧挨着的哪一个字符出现0次到无限次。和.连用‘.*’表示取出所有</li>\n<li>[^字符]:表示除了这个字符以外的</li>\n<li>[^字符]*:表示除了多个或者没有这个字符以外的</li>\n<li>  ^：表示必须，如果在[]里面意思就相反，表示除了</li>\n</ul>\n<blockquote>\n<p>分组</p>\n</blockquote>\n<ul>\n<li><p>|:与分组结合使用表示匹配分组中的任意一个字符串，(qq|web)，表示匹配qq或者web中的任意一个</p>\n</li>\n<li><p>():分组，把正则表达式分成多组，从左往右组号升序</p>\n</li>\n<li><p> \\num:与分组结合使用，多次出现相同的规则的时候可以用\\num来调用前面封装好的规则，如 \\1 表示调用前面的第一个分组的规则</p>\n</li>\n<li><p>分组的取名和调用：</p>\n</li>\n<li><p>1、可以不取名，直接用组号 用第一个分组：\\1   ，  用第二个分组：\\2 以此类推</p>\n</li>\n<li><p>2、当分组十分的多的时候，可以取名：原来的分组：(\\w*)  取名后的分组:(?P<name1>\\w*)    ?P<name1>就是取名的表达式</p>\n</li>\n<li><p> 3、使用取名后的分组：原来使用(\\1)   用名字使用:(?P=name1)</p>\n</li>\n</ul>\n<blockquote>\n<p>re模块的高级用法</p>\n</blockquote>\n<ul>\n<li>1.search: re.search(r’规则’,’字符串’) 表示从这些字符串中找到符合规则的第一个数据</li>\n<li>2、findall: re.findall(r’规则’,’字符串’) 表示从这些字符中找到所有的符合规则的数据，返回一个列表</li>\n<li> 3、sub: re.sub(r’规则’,’替换字符串’,’字符串’) 表示从这些字符中找到所有的符合规则的数据，然后全部替换成用来替换的字符串</li>\n<li>4、spilt: re.spilt(r’规则’,’字符串’) 表示从这些字符串中找到符合规则的数据，并且从那里开始分割字符串，返回一个列表</li>\n</ul>\n"},{"title":"python装饰器","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T06:44:21.000Z","password":null,"summary":"装饰器","_content":"## 装饰器\n > 原理:将一个函数的引用传递到另一个闭包里面去\n\n```python\ndef func_set(func(函数)):\n    def func_start(参数):\n        print(\"验证一\")\n        print(\"验证二\")\n        func()\n    return func_start\n```\n\n> 使用方法一\n\n```python\n@func_set\ndef test(参数):\n    print(\"test\")\n```\n\n > 使用方法二\n \n ```python\nret = func_set(test)\nret()\n```\n\n> 说明:装饰器的闭包中，外部函数用来接收函数，内部函数用来接收函数的参数，并且在没有调用函数之前只要有@就开始装饰,在装饰不定长的函数时\n\n```python\ndef test(x,*args,**kwargs):\n    print(\"test\")\n```\n \n- 这种函数的装饰器的内部函数参数定义为(*args, **kwargs)就可以了，这种装饰器叫做通用装饰器,遇到有返回值的函数的时候，装饰器的内部函数也要有return，格式:return 函数（参数）\n\n\n\n### 装饰器带参数\n> 带参数的装饰器:@装饰器名称(参数)\n\n```python\ndef 第一层(参数):                        # 第一层用来保存装饰器的参数\n    def 第二层(函数):                    # 第二层用来保存被装的函数\n        def 第三层(函数的参数):           # 第三层用来保存被装函数的参数，并且进行装饰函数，并且使用第一层保存的装饰器参数\n            语句块\n            [return] 函数\n        return 第三层\n    return 第二层\n  ```\n\n> 多个装饰器对同一个函数装饰:装饰的时候最下面的开始装,从下往上装\n\n\n### 类装饰器\n> 基本构架\n\n```python\nclass Tt():\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self,[*args,**kwargs]):\n        代码\n        [return] self.func\n\n@Tt     #还可以点出更多东西以后会学到\ndef test():\n    return \"haha\"\n\ntest()\n```","source":"_posts/python装饰器.md","raw":"---\ntitle: python装饰器\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 14:44:21\npassword:\nsummary: 装饰器\ntags: basic\ncategories: Python\n---\n## 装饰器\n > 原理:将一个函数的引用传递到另一个闭包里面去\n\n```python\ndef func_set(func(函数)):\n    def func_start(参数):\n        print(\"验证一\")\n        print(\"验证二\")\n        func()\n    return func_start\n```\n\n> 使用方法一\n\n```python\n@func_set\ndef test(参数):\n    print(\"test\")\n```\n\n > 使用方法二\n \n ```python\nret = func_set(test)\nret()\n```\n\n> 说明:装饰器的闭包中，外部函数用来接收函数，内部函数用来接收函数的参数，并且在没有调用函数之前只要有@就开始装饰,在装饰不定长的函数时\n\n```python\ndef test(x,*args,**kwargs):\n    print(\"test\")\n```\n \n- 这种函数的装饰器的内部函数参数定义为(*args, **kwargs)就可以了，这种装饰器叫做通用装饰器,遇到有返回值的函数的时候，装饰器的内部函数也要有return，格式:return 函数（参数）\n\n\n\n### 装饰器带参数\n> 带参数的装饰器:@装饰器名称(参数)\n\n```python\ndef 第一层(参数):                        # 第一层用来保存装饰器的参数\n    def 第二层(函数):                    # 第二层用来保存被装的函数\n        def 第三层(函数的参数):           # 第三层用来保存被装函数的参数，并且进行装饰函数，并且使用第一层保存的装饰器参数\n            语句块\n            [return] 函数\n        return 第三层\n    return 第二层\n  ```\n\n> 多个装饰器对同一个函数装饰:装饰的时候最下面的开始装,从下往上装\n\n\n### 类装饰器\n> 基本构架\n\n```python\nclass Tt():\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self,[*args,**kwargs]):\n        代码\n        [return] self.func\n\n@Tt     #还可以点出更多东西以后会学到\ndef test():\n    return \"haha\"\n\ntest()\n```","slug":"python装饰器","published":1,"updated":"2023-01-19T08:54:31.280Z","_id":"cld2uqf6k000l1svkargs8pjk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h2><blockquote>\n<p>原理:将一个函数的引用传递到另一个闭包里面去</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func_set</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">(</span>函数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">func_start</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证一\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证二\"</span><span class=\"token punctuation\">)</span>\n        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> func_start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>使用方法一</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@func_set</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>使用方法二</p>\n</blockquote>\n <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ret <span class=\"token operator\">=</span> func_set<span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\nret<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>说明:装饰器的闭包中，外部函数用来接收函数，内部函数用来接收函数的参数，并且在没有调用函数之前只要有@就开始装饰,在装饰不定长的函数时</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>这种函数的装饰器的内部函数参数定义为(*args, **kwargs)就可以了，这种装饰器叫做通用装饰器,遇到有返回值的函数的时候，装饰器的内部函数也要有return，格式:return 函数（参数）</li>\n</ul>\n<h3 id=\"装饰器带参数\"><a href=\"#装饰器带参数\" class=\"headerlink\" title=\"装饰器带参数\"></a>装饰器带参数</h3><blockquote>\n<p>带参数的装饰器:@装饰器名称(参数)</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> 第一层<span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                        <span class=\"token comment\"># 第一层用来保存装饰器的参数</span>\n    <span class=\"token keyword\">def</span> 第二层<span class=\"token punctuation\">(</span>函数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                    <span class=\"token comment\"># 第二层用来保存被装的函数</span>\n        <span class=\"token keyword\">def</span> 第三层<span class=\"token punctuation\">(</span>函数的参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 第三层用来保存被装函数的参数，并且进行装饰函数，并且使用第一层保存的装饰器参数</span>\n            语句块\n            <span class=\"token punctuation\">[</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">]</span> 函数\n        <span class=\"token keyword\">return</span> 第三层\n    <span class=\"token keyword\">return</span> 第二层<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>多个装饰器对同一个函数装饰:装饰的时候最下面的开始装,从下往上装</p>\n</blockquote>\n<h3 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h3><blockquote>\n<p>基本构架</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>func <span class=\"token operator\">=</span> func\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        代码\n        <span class=\"token punctuation\">[</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">]</span> self<span class=\"token punctuation\">.</span>func\n\n<span class=\"token decorator annotation punctuation\">@Tt</span>     <span class=\"token comment\">#还可以点出更多东西以后会学到</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"haha\"</span>\n\ntest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h2><blockquote>\n<p>原理:将一个函数的引用传递到另一个闭包里面去</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func_set</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">(</span>函数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">func_start</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证一\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证二\"</span><span class=\"token punctuation\">)</span>\n        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> func_start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>使用方法一</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@func_set</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>使用方法二</p>\n</blockquote>\n <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ret <span class=\"token operator\">=</span> func_set<span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\nret<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>说明:装饰器的闭包中，外部函数用来接收函数，内部函数用来接收函数的参数，并且在没有调用函数之前只要有@就开始装饰,在装饰不定长的函数时</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>这种函数的装饰器的内部函数参数定义为(*args, **kwargs)就可以了，这种装饰器叫做通用装饰器,遇到有返回值的函数的时候，装饰器的内部函数也要有return，格式:return 函数（参数）</li>\n</ul>\n<h3 id=\"装饰器带参数\"><a href=\"#装饰器带参数\" class=\"headerlink\" title=\"装饰器带参数\"></a>装饰器带参数</h3><blockquote>\n<p>带参数的装饰器:@装饰器名称(参数)</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> 第一层<span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                        <span class=\"token comment\"># 第一层用来保存装饰器的参数</span>\n    <span class=\"token keyword\">def</span> 第二层<span class=\"token punctuation\">(</span>函数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                    <span class=\"token comment\"># 第二层用来保存被装的函数</span>\n        <span class=\"token keyword\">def</span> 第三层<span class=\"token punctuation\">(</span>函数的参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 第三层用来保存被装函数的参数，并且进行装饰函数，并且使用第一层保存的装饰器参数</span>\n            语句块\n            <span class=\"token punctuation\">[</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">]</span> 函数\n        <span class=\"token keyword\">return</span> 第三层\n    <span class=\"token keyword\">return</span> 第二层<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>多个装饰器对同一个函数装饰:装饰的时候最下面的开始装,从下往上装</p>\n</blockquote>\n<h3 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h3><blockquote>\n<p>基本构架</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>func <span class=\"token operator\">=</span> func\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        代码\n        <span class=\"token punctuation\">[</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">]</span> self<span class=\"token punctuation\">.</span>func\n\n<span class=\"token decorator annotation punctuation\">@Tt</span>     <span class=\"token comment\">#还可以点出更多东西以后会学到</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"haha\"</span>\n\ntest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"python进程线程协程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T06:20:10.000Z","password":null,"summary":"python进程线程协程实现","_content":"## 进程\n### multiprocessing下面\n- 1、Process:创建一个进程,参数有target，args,args是一个元组作为形式参数\n- 2、start:运行这个进程\n- 3、Queue:是队列，先进先出，和栈相反，Queue(20)就是说可以存放20个数据，数据部分类型。用full来判断是否满，用empty来判断是否空了用put来往里面放数据,用get来拿数据\n- 4、Pool:进程池，实现重复利用，进程任务数量太多或者任务数不确定的时候，最好使用进程池。如果有10000个进程，那么创建一个只有10个任务的进程池，就可以反复一万次来完成任务，避免系统崩溃,利用for循环来创建进程，apply_async(函数，(参数，参数,),创建之后立刻关闭close，并且紧跟其后用join，否则程序死掉'\n\n```python\nfrom multiprocessing import *\nimport time\nimport random\n\ndef info(i):\n    t_start = time.time()\n    time.sleep(random.randrange(1,2)*2)\n    t_stop = time.time()\n    print(f'{i}执行时长:{t_start-t_stop}')\n    \ndef main():\n    p = Pool(3)\n    for i in range(100):\n        p.apply_async(info, (i))\n    p.close()\n    p.join()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## 线程\n\n### threading下面\n-    1、Thread:创建一个线程对像，可以有两个参数 target= ，args=，args是一个元组\n-    2、start：使用创建的线程\n-    3、enumerate:用来查看有多少个线程在跑，用len来显示个数，用while来控制\n-    4、Lock:互斥锁，可以实例出一个实力对象，require是上锁，release是解锁\n\n> 说明一点:在用c语言编写的python解释器中执行python的线程的时候，会涉及到GIL锁，GIL锁就是同一时刻只有一个程序在执行，这是一种假的多任务，只有线程在有，解决GIL锁的方法\n> - 1、换解释器\n> - 2、换线程语言(因为python基本可以执行其他的所有语言，c、c++、java等)\n\n### 线程共享全局变量\n -   1、如果在线程代码中对全局变量进行修改，要用global,也就是说要令全局变量'等于'一个什么东西的时候必须用global，如：i+=1，用变量的方法来修改的不用使用global，如list.append()\n -   2、如果没有要对全局变量进行修改，就不用global申明，只是使用全局变量也不用使用global\n -   3、全局变量在线程中也可以共享\n -   4、有可能在多线程中可能会出现资源争夺（用Local互斥锁来解决，互斥锁不要太多，用以产生死锁）\n\n### Thread的实例对象还可以是一个类\n -   1、让这个类来继承threading.Thread这个类\n -   2、用的时候直接 对象名 = 这个类（）\n -  3、start的使用：这个类的对象名.start\n -  4、（最重要):这个类中只能进行多线程的就是run函数，所以如果要对类创建多线程，那么必须有run函数，类当中的其他函数只能通过 self.函数名 的形式申明在run函数中\n\n```python\nfrom threading import *\nimport time\n\nclass Prison(Thread):\n\n    def info2(self):\n        print(\"---info2----\")\n\n    def info3(self):\n        print(\"---info3----\")\n\n    def run(self): # 特别重要:只会调用run\n        print(\"---info1----\")\n\ndef main():\n    info = Prison()\n    info.start()\n\nif __name__ == \"__main__\":\n    main() \n```\n\n## 协程\n\n### yield协程\n\n```python\nimport time\ndef info1():\n    while True:\n        print('-----1-----')\n        time.sleep(0.5)\n        yield\ndef info2():\n    while True:\n        print('-----2-----')\n        time.sleep(0.5)\n        yield\ndef main():\n    in1 = info1()\n    in2 = info2()\n    while True:  一定要用循环来切换\n        next(in1)\n        next(in2)\nif __name__ == \"__main__\":\n    main()\n```\n\n### greenlet协程\n```python\nfrom greenlet import *\nimport time\ndef info1():\n    while True:\n        print('-----1-----')\n        t2.switch() 使用greenlet协程必须要使用switch来切换\n        time.sleep(0.5)\ndef info2():\n    while True:\n        print('-----2-----')\n        t1.switch()\n        time.sleep(0.5)\nt1 = greenlet(info1) 创建一个对象\nt2 = greenlet(info2)\nt1.switch() 开始调用\n```\n\n### gevent协程(最大的有点就是利用延时切换任务，充分利用cpu)\n\n```\nimport gevent\ndef f1(n):\n    for i in range(n):\n        print(\"----f1----\", i)\n        gevent.sleep(0.3) # 用于延时，不用time.sleep(),而是用gevent.sleep()\ndef f2(n):\n    for i in range(n):\n        print(\"----f2----\", i)\n        gevent.sleep(0.3)\ndef f3(n):\n    for i in range(n):\n        print(\"----f3----\", i)\n        gevent.sleep(0.3)\ndef main():\n    # 使用方法一、\n    t1 = gevent.spawn(f1, 5)\n    t2 = gevent.spawn(f2, 5)\n    t3 = gevent.spawn(f3, 5)\n    t1.join()\n    t2.join()\n    t3.join()\n\n    # 使用方法二、\n    gevent.joinall([\n        gevent.spawn(f1, 5),\n        gevent.spawn(f2, 5),\n        gevent.spawn(f3, 5)\n    ])\n\n\nif __name__ == \"__main__\":\n    main()\n  ```","source":"_posts/python进程线程协程.md","raw":"---\ntitle: python进程线程协程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 14:20:10\npassword:\nsummary: python进程线程协程实现\ntags: basic\ncategories: Python\n---\n## 进程\n### multiprocessing下面\n- 1、Process:创建一个进程,参数有target，args,args是一个元组作为形式参数\n- 2、start:运行这个进程\n- 3、Queue:是队列，先进先出，和栈相反，Queue(20)就是说可以存放20个数据，数据部分类型。用full来判断是否满，用empty来判断是否空了用put来往里面放数据,用get来拿数据\n- 4、Pool:进程池，实现重复利用，进程任务数量太多或者任务数不确定的时候，最好使用进程池。如果有10000个进程，那么创建一个只有10个任务的进程池，就可以反复一万次来完成任务，避免系统崩溃,利用for循环来创建进程，apply_async(函数，(参数，参数,),创建之后立刻关闭close，并且紧跟其后用join，否则程序死掉'\n\n```python\nfrom multiprocessing import *\nimport time\nimport random\n\ndef info(i):\n    t_start = time.time()\n    time.sleep(random.randrange(1,2)*2)\n    t_stop = time.time()\n    print(f'{i}执行时长:{t_start-t_stop}')\n    \ndef main():\n    p = Pool(3)\n    for i in range(100):\n        p.apply_async(info, (i))\n    p.close()\n    p.join()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## 线程\n\n### threading下面\n-    1、Thread:创建一个线程对像，可以有两个参数 target= ，args=，args是一个元组\n-    2、start：使用创建的线程\n-    3、enumerate:用来查看有多少个线程在跑，用len来显示个数，用while来控制\n-    4、Lock:互斥锁，可以实例出一个实力对象，require是上锁，release是解锁\n\n> 说明一点:在用c语言编写的python解释器中执行python的线程的时候，会涉及到GIL锁，GIL锁就是同一时刻只有一个程序在执行，这是一种假的多任务，只有线程在有，解决GIL锁的方法\n> - 1、换解释器\n> - 2、换线程语言(因为python基本可以执行其他的所有语言，c、c++、java等)\n\n### 线程共享全局变量\n -   1、如果在线程代码中对全局变量进行修改，要用global,也就是说要令全局变量'等于'一个什么东西的时候必须用global，如：i+=1，用变量的方法来修改的不用使用global，如list.append()\n -   2、如果没有要对全局变量进行修改，就不用global申明，只是使用全局变量也不用使用global\n -   3、全局变量在线程中也可以共享\n -   4、有可能在多线程中可能会出现资源争夺（用Local互斥锁来解决，互斥锁不要太多，用以产生死锁）\n\n### Thread的实例对象还可以是一个类\n -   1、让这个类来继承threading.Thread这个类\n -   2、用的时候直接 对象名 = 这个类（）\n -  3、start的使用：这个类的对象名.start\n -  4、（最重要):这个类中只能进行多线程的就是run函数，所以如果要对类创建多线程，那么必须有run函数，类当中的其他函数只能通过 self.函数名 的形式申明在run函数中\n\n```python\nfrom threading import *\nimport time\n\nclass Prison(Thread):\n\n    def info2(self):\n        print(\"---info2----\")\n\n    def info3(self):\n        print(\"---info3----\")\n\n    def run(self): # 特别重要:只会调用run\n        print(\"---info1----\")\n\ndef main():\n    info = Prison()\n    info.start()\n\nif __name__ == \"__main__\":\n    main() \n```\n\n## 协程\n\n### yield协程\n\n```python\nimport time\ndef info1():\n    while True:\n        print('-----1-----')\n        time.sleep(0.5)\n        yield\ndef info2():\n    while True:\n        print('-----2-----')\n        time.sleep(0.5)\n        yield\ndef main():\n    in1 = info1()\n    in2 = info2()\n    while True:  一定要用循环来切换\n        next(in1)\n        next(in2)\nif __name__ == \"__main__\":\n    main()\n```\n\n### greenlet协程\n```python\nfrom greenlet import *\nimport time\ndef info1():\n    while True:\n        print('-----1-----')\n        t2.switch() 使用greenlet协程必须要使用switch来切换\n        time.sleep(0.5)\ndef info2():\n    while True:\n        print('-----2-----')\n        t1.switch()\n        time.sleep(0.5)\nt1 = greenlet(info1) 创建一个对象\nt2 = greenlet(info2)\nt1.switch() 开始调用\n```\n\n### gevent协程(最大的有点就是利用延时切换任务，充分利用cpu)\n\n```\nimport gevent\ndef f1(n):\n    for i in range(n):\n        print(\"----f1----\", i)\n        gevent.sleep(0.3) # 用于延时，不用time.sleep(),而是用gevent.sleep()\ndef f2(n):\n    for i in range(n):\n        print(\"----f2----\", i)\n        gevent.sleep(0.3)\ndef f3(n):\n    for i in range(n):\n        print(\"----f3----\", i)\n        gevent.sleep(0.3)\ndef main():\n    # 使用方法一、\n    t1 = gevent.spawn(f1, 5)\n    t2 = gevent.spawn(f2, 5)\n    t3 = gevent.spawn(f3, 5)\n    t1.join()\n    t2.join()\n    t3.join()\n\n    # 使用方法二、\n    gevent.joinall([\n        gevent.spawn(f1, 5),\n        gevent.spawn(f2, 5),\n        gevent.spawn(f3, 5)\n    ])\n\n\nif __name__ == \"__main__\":\n    main()\n  ```","slug":"python进程线程协程","published":1,"updated":"2023-01-19T06:42:32.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld2uqf6l000n1svk0sejhraj","content":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><h3 id=\"multiprocessing下面\"><a href=\"#multiprocessing下面\" class=\"headerlink\" title=\"multiprocessing下面\"></a>multiprocessing下面</h3><ul>\n<li>1、Process:创建一个进程,参数有target，args,args是一个元组作为形式参数</li>\n<li>2、start:运行这个进程</li>\n<li>3、Queue:是队列，先进先出，和栈相反，Queue(20)就是说可以存放20个数据，数据部分类型。用full来判断是否满，用empty来判断是否空了用put来往里面放数据,用get来拿数据</li>\n<li>4、Pool:进程池，实现重复利用，进程任务数量太多或者任务数不确定的时候，最好使用进程池。如果有10000个进程，那么创建一个只有10个任务的进程池，就可以反复一万次来完成任务，避免系统崩溃,利用for循环来创建进程，apply_async(函数，(参数，参数,),创建之后立刻关闭close，并且紧跟其后用join，否则程序死掉’</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> random\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    t_start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    t_stop <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">执行时长:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>t_start<span class=\"token operator\">-</span>t_stop<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> Pool<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        p<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><h3 id=\"threading下面\"><a href=\"#threading下面\" class=\"headerlink\" title=\"threading下面\"></a>threading下面</h3><ul>\n<li>   1、Thread:创建一个线程对像，可以有两个参数 target= ，args=，args是一个元组</li>\n<li>   2、start：使用创建的线程</li>\n<li>   3、enumerate:用来查看有多少个线程在跑，用len来显示个数，用while来控制</li>\n<li>   4、Lock:互斥锁，可以实例出一个实力对象，require是上锁，release是解锁</li>\n</ul>\n<blockquote>\n<p>说明一点:在用c语言编写的python解释器中执行python的线程的时候，会涉及到GIL锁，GIL锁就是同一时刻只有一个程序在执行，这是一种假的多任务，只有线程在有，解决GIL锁的方法</p>\n<ul>\n<li>1、换解释器</li>\n<li>2、换线程语言(因为python基本可以执行其他的所有语言，c、c++、java等)</li>\n</ul>\n</blockquote>\n<h3 id=\"线程共享全局变量\"><a href=\"#线程共享全局变量\" class=\"headerlink\" title=\"线程共享全局变量\"></a>线程共享全局变量</h3><ul>\n<li>  1、如果在线程代码中对全局变量进行修改，要用global,也就是说要令全局变量’等于’一个什么东西的时候必须用global，如：i+=1，用变量的方法来修改的不用使用global，如list.append()</li>\n<li>  2、如果没有要对全局变量进行修改，就不用global申明，只是使用全局变量也不用使用global</li>\n<li>  3、全局变量在线程中也可以共享</li>\n<li>  4、有可能在多线程中可能会出现资源争夺（用Local互斥锁来解决，互斥锁不要太多，用以产生死锁）</li>\n</ul>\n<h3 id=\"Thread的实例对象还可以是一个类\"><a href=\"#Thread的实例对象还可以是一个类\" class=\"headerlink\" title=\"Thread的实例对象还可以是一个类\"></a>Thread的实例对象还可以是一个类</h3><ul>\n<li>  1、让这个类来继承threading.Thread这个类</li>\n<li>  2、用的时候直接 对象名 = 这个类（）</li>\n<li> 3、start的使用：这个类的对象名.start</li>\n<li> 4、（最重要):这个类中只能进行多线程的就是run函数，所以如果要对类创建多线程，那么必须有run函数，类当中的其他函数只能通过 self.函数名 的形式申明在run函数中</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Prison</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---info2----\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info3</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---info3----\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 特别重要:只会调用run</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---info1----\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    info <span class=\"token operator\">=</span> Prison<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    info<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><h3 id=\"yield协程\"><a href=\"#yield协程\" class=\"headerlink\" title=\"yield协程\"></a>yield协程</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">def</span> <span class=\"token function\">info1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----1-----'</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">info2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----2-----'</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    in1 <span class=\"token operator\">=</span> info1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    in2 <span class=\"token operator\">=</span> info2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  一定要用循环来切换\n        <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>in1<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>in2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"greenlet协程\"><a href=\"#greenlet协程\" class=\"headerlink\" title=\"greenlet协程\"></a>greenlet协程</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> greenlet <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">def</span> <span class=\"token function\">info1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----1-----'</span><span class=\"token punctuation\">)</span>\n        t2<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 使用greenlet协程必须要使用switch来切换\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">info2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----2-----'</span><span class=\"token punctuation\">)</span>\n        t1<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\nt1 <span class=\"token operator\">=</span> greenlet<span class=\"token punctuation\">(</span>info1<span class=\"token punctuation\">)</span> 创建一个对象\nt2 <span class=\"token operator\">=</span> greenlet<span class=\"token punctuation\">(</span>info2<span class=\"token punctuation\">)</span>\nt1<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 开始调用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"gevent协程-最大的有点就是利用延时切换任务，充分利用cpu\"><a href=\"#gevent协程-最大的有点就是利用延时切换任务，充分利用cpu\" class=\"headerlink\" title=\"gevent协程(最大的有点就是利用延时切换任务，充分利用cpu)\"></a>gevent协程(最大的有点就是利用延时切换任务，充分利用cpu)</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import gevent\ndef f1(n):\n    for i in range(n):\n        print(&quot;----f1----&quot;, i)\n        gevent.sleep(0.3) # 用于延时，不用time.sleep(),而是用gevent.sleep()\ndef f2(n):\n    for i in range(n):\n        print(&quot;----f2----&quot;, i)\n        gevent.sleep(0.3)\ndef f3(n):\n    for i in range(n):\n        print(&quot;----f3----&quot;, i)\n        gevent.sleep(0.3)\ndef main():\n    # 使用方法一、\n    t1 &#x3D; gevent.spawn(f1, 5)\n    t2 &#x3D; gevent.spawn(f2, 5)\n    t3 &#x3D; gevent.spawn(f3, 5)\n    t1.join()\n    t2.join()\n    t3.join()\n\n    # 使用方法二、\n    gevent.joinall([\n        gevent.spawn(f1, 5),\n        gevent.spawn(f2, 5),\n        gevent.spawn(f3, 5)\n    ])\n\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><h3 id=\"multiprocessing下面\"><a href=\"#multiprocessing下面\" class=\"headerlink\" title=\"multiprocessing下面\"></a>multiprocessing下面</h3><ul>\n<li>1、Process:创建一个进程,参数有target，args,args是一个元组作为形式参数</li>\n<li>2、start:运行这个进程</li>\n<li>3、Queue:是队列，先进先出，和栈相反，Queue(20)就是说可以存放20个数据，数据部分类型。用full来判断是否满，用empty来判断是否空了用put来往里面放数据,用get来拿数据</li>\n<li>4、Pool:进程池，实现重复利用，进程任务数量太多或者任务数不确定的时候，最好使用进程池。如果有10000个进程，那么创建一个只有10个任务的进程池，就可以反复一万次来完成任务，避免系统崩溃,利用for循环来创建进程，apply_async(函数，(参数，参数,),创建之后立刻关闭close，并且紧跟其后用join，否则程序死掉’</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> random\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    t_start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    t_stop <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">执行时长:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>t_start<span class=\"token operator\">-</span>t_stop<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> Pool<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        p<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><h3 id=\"threading下面\"><a href=\"#threading下面\" class=\"headerlink\" title=\"threading下面\"></a>threading下面</h3><ul>\n<li>   1、Thread:创建一个线程对像，可以有两个参数 target= ，args=，args是一个元组</li>\n<li>   2、start：使用创建的线程</li>\n<li>   3、enumerate:用来查看有多少个线程在跑，用len来显示个数，用while来控制</li>\n<li>   4、Lock:互斥锁，可以实例出一个实力对象，require是上锁，release是解锁</li>\n</ul>\n<blockquote>\n<p>说明一点:在用c语言编写的python解释器中执行python的线程的时候，会涉及到GIL锁，GIL锁就是同一时刻只有一个程序在执行，这是一种假的多任务，只有线程在有，解决GIL锁的方法</p>\n<ul>\n<li>1、换解释器</li>\n<li>2、换线程语言(因为python基本可以执行其他的所有语言，c、c++、java等)</li>\n</ul>\n</blockquote>\n<h3 id=\"线程共享全局变量\"><a href=\"#线程共享全局变量\" class=\"headerlink\" title=\"线程共享全局变量\"></a>线程共享全局变量</h3><ul>\n<li>  1、如果在线程代码中对全局变量进行修改，要用global,也就是说要令全局变量’等于’一个什么东西的时候必须用global，如：i+=1，用变量的方法来修改的不用使用global，如list.append()</li>\n<li>  2、如果没有要对全局变量进行修改，就不用global申明，只是使用全局变量也不用使用global</li>\n<li>  3、全局变量在线程中也可以共享</li>\n<li>  4、有可能在多线程中可能会出现资源争夺（用Local互斥锁来解决，互斥锁不要太多，用以产生死锁）</li>\n</ul>\n<h3 id=\"Thread的实例对象还可以是一个类\"><a href=\"#Thread的实例对象还可以是一个类\" class=\"headerlink\" title=\"Thread的实例对象还可以是一个类\"></a>Thread的实例对象还可以是一个类</h3><ul>\n<li>  1、让这个类来继承threading.Thread这个类</li>\n<li>  2、用的时候直接 对象名 = 这个类（）</li>\n<li> 3、start的使用：这个类的对象名.start</li>\n<li> 4、（最重要):这个类中只能进行多线程的就是run函数，所以如果要对类创建多线程，那么必须有run函数，类当中的其他函数只能通过 self.函数名 的形式申明在run函数中</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Prison</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---info2----\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">info3</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---info3----\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 特别重要:只会调用run</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---info1----\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    info <span class=\"token operator\">=</span> Prison<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    info<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><h3 id=\"yield协程\"><a href=\"#yield协程\" class=\"headerlink\" title=\"yield协程\"></a>yield协程</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">def</span> <span class=\"token function\">info1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----1-----'</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">info2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----2-----'</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    in1 <span class=\"token operator\">=</span> info1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    in2 <span class=\"token operator\">=</span> info2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>  一定要用循环来切换\n        <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>in1<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>in2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"greenlet协程\"><a href=\"#greenlet协程\" class=\"headerlink\" title=\"greenlet协程\"></a>greenlet协程</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> greenlet <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">def</span> <span class=\"token function\">info1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----1-----'</span><span class=\"token punctuation\">)</span>\n        t2<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 使用greenlet协程必须要使用switch来切换\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">info2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----2-----'</span><span class=\"token punctuation\">)</span>\n        t1<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\nt1 <span class=\"token operator\">=</span> greenlet<span class=\"token punctuation\">(</span>info1<span class=\"token punctuation\">)</span> 创建一个对象\nt2 <span class=\"token operator\">=</span> greenlet<span class=\"token punctuation\">(</span>info2<span class=\"token punctuation\">)</span>\nt1<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 开始调用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"gevent协程-最大的有点就是利用延时切换任务，充分利用cpu\"><a href=\"#gevent协程-最大的有点就是利用延时切换任务，充分利用cpu\" class=\"headerlink\" title=\"gevent协程(最大的有点就是利用延时切换任务，充分利用cpu)\"></a>gevent协程(最大的有点就是利用延时切换任务，充分利用cpu)</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import gevent\ndef f1(n):\n    for i in range(n):\n        print(&quot;----f1----&quot;, i)\n        gevent.sleep(0.3) # 用于延时，不用time.sleep(),而是用gevent.sleep()\ndef f2(n):\n    for i in range(n):\n        print(&quot;----f2----&quot;, i)\n        gevent.sleep(0.3)\ndef f3(n):\n    for i in range(n):\n        print(&quot;----f3----&quot;, i)\n        gevent.sleep(0.3)\ndef main():\n    # 使用方法一、\n    t1 &#x3D; gevent.spawn(f1, 5)\n    t2 &#x3D; gevent.spawn(f2, 5)\n    t3 &#x3D; gevent.spawn(f3, 5)\n    t1.join()\n    t2.join()\n    t3.join()\n\n    # 使用方法二、\n    gevent.joinall([\n        gevent.spawn(f1, 5),\n        gevent.spawn(f2, 5),\n        gevent.spawn(f3, 5)\n    ])\n\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"redis基础","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T07:32:03.000Z","password":null,"summary":"redis基础","_content":"## Redis\n### NoSQL一种新出现的数据库(not only sql)\n```text\n1、不认识sql语句\n2、存储结构和关系型数据库中的关系表完全不同，nosql存储的数据都是kv（key-value）形式\n3、nosql的世界没有一种通用的语言，每一种nosql数据库都有自己的api和语法，以及应用场景\n4、nosql的产品种类多\n\n### Redis数据库\n1、支持数据的持久化\n2、支持简单的key-vlaue，还有list,set,zset,hash等类型\n3、支持备份，master-slave模式的数据备份\n```\n### Redis数据类型\n```text\n1、字符串string\n2、哈希hash\n3、列表list\n4、集合set\n5、有序集合zset\n```\n\n\n### Redis操作行为\n```\n1、保存\n2、修改\n3、获取\n4、删除\n```\n\n#### string类型\n\n> redis中最基础的数据类型，是二进制安全的，可以接受任何格式的数据，照片、json等\n\n-\t定义字符串:set key value,  setex key sconds value 这种方式设置过期时间，  mset key value key value设置多个\n-\t查看字符串:get key，mget key1 key2,获取多个\n-\t字符串的追加:append key value\n-\t查看所有的键:keys 通配符\n-\t查看键是否存在:exists key\n-\t查看键值的类型:type key\n-\t设置过期时间:expire key sconds\n-\t查看键的有效时间:ttl key\n-\t删除:del key1 key2……\n\n#### hash类型\n> hash本来就有key，hash的value就是一个字符串string，所以还有一个string的key\n-\t定义哈希类型:hset key string-key value，  hmset key string-key1 value1 string-key2 value2一次设置多个，一个hash中可以有多个value\n-\t查看指定键的值：hkey key\n-\t获取hash的值:hget key string-key,   hmget key string-key1 string-key2……多个值，  hvals key获取所有的值\n-\t删除:del key，删除整个hash，hdel key string-key删除对应的hash值\n\n#### 列表类型（list）\n-\t定义：lpush key value vlaue2……从左侧插入，rpush key value value2…… 从右侧插入，linsert key before或者after 某一个已经存在的value value value2……\n-\t获取:lrange key start stop\n-\t修改:lset key index new_value\n-\t删除:lrem key count value,count是一个数字，表示删除多少个（相同元素），整数表示前往后，负数从后往前，为0的时候表示删除所有给定的value\n\n\n#### 集合类型(set)\n> 不能重复，无序\n-\t定义:sadd key value value2……\n-\t获取:smenbers key获取所有元素\n-\t删除:srem key value value2……\n\t\n\n#### 有序集合(zset)\n> 有序权重从小到大排序\n-\t定义:zadd key 权重 value 权重2 value2……,权重就是数字\n-\t获取:zrange key start stop\n-\t获取给定的权值范围元素:zrangebyscore key start stop\n-\t获取权值:zscore key value\n-\t删除指定的元素:zrem key value1 value2……\n-\t删除给定权值范围元素:zremrangebyscore key start stop\n\n\n#### Redis和python的交互:\n\n##### python基本使用\n```python\nfrom redis import *\nxx = StrictRedis(host = 'xxx', port = 6379, db = num)\n```\n> 对xx进行操作\n\n##### django中使用Redis:多数用来 存储session\n```python\npip install django-redis-sessions\n\n# setting.py中设置：\nSESSION_ENGINE = 'redis_sessions.session'\nSESSION_REDIS_HOST = 'localhost'\nSESSION_REDIS_PORT = 6379\nSESSION_REDIS_DB = 2\nSESSION_REDIS_PASSWORD = ''\nSESSION_REDIS_PREFIX = 'session'\n# 这样就可以将原本存储在django的数据库中的session存储到redis中，存储成hash\n\n# 配置成caches:\nCACHES = {\n    \"default\": {\n    \"BACKEND\": \"django_redis.cache.RedisCache\",\n    \"LOCATION\": \"redis://127.0.0.1:6379/2\",\n    \"OPTIONS\": {\n        \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n    }\n    }\n}\n\n# 使用\nfrom dajango_redis import get_redis_connection\nxxx = get_redis_connection('default')\n# 可以使用redis中的所有方法\n```\n\t\n\t\n\t\n### redis的问题\n>\t缓存穿透：用户查询一个数据库中一定不会有的数据，比如id=-1,因为数据库中没有这个数据，所以不会保存到缓存中，下次再来访问的时候，缓存中没有，又会去数据库中查询，这样就增加了数据库的压力，如果被黑客发现了，就会利用这个漏洞来攻击数据库，可能会让数据库崩溃，解决办法就是就算没有查到，也放到缓存中，只不过值为null，然后把过期时间设置的短一点。\n\t\n>\t缓存雪崩：意思就是大量的缓存数据同时失效（过期），这个时候，又有大并发的请求的话，就会对数据库加大访问压力，可能让数据库崩溃，解决办法就是，可以设置不同的过期时间，如果是双十一这种可以设置永不过期。\n\t\n>\t缓存击穿：意思就是用户频繁会访问的key，比如，双十一有一个活动见做一分钱领取iphone13 pro max，在非常多的人访问的时候，在这种大并发的情况下，如果缓存中的这个key过期了，那么对数据的压力就太大了，解决办法就是设置这个key用不过期。\n","source":"_posts/redis基础.md","raw":"---\ntitle: redis基础\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 15:32:03\npassword:\nsummary: redis基础\ntags: redis\ncategories: db\n---\n## Redis\n### NoSQL一种新出现的数据库(not only sql)\n```text\n1、不认识sql语句\n2、存储结构和关系型数据库中的关系表完全不同，nosql存储的数据都是kv（key-value）形式\n3、nosql的世界没有一种通用的语言，每一种nosql数据库都有自己的api和语法，以及应用场景\n4、nosql的产品种类多\n\n### Redis数据库\n1、支持数据的持久化\n2、支持简单的key-vlaue，还有list,set,zset,hash等类型\n3、支持备份，master-slave模式的数据备份\n```\n### Redis数据类型\n```text\n1、字符串string\n2、哈希hash\n3、列表list\n4、集合set\n5、有序集合zset\n```\n\n\n### Redis操作行为\n```\n1、保存\n2、修改\n3、获取\n4、删除\n```\n\n#### string类型\n\n> redis中最基础的数据类型，是二进制安全的，可以接受任何格式的数据，照片、json等\n\n-\t定义字符串:set key value,  setex key sconds value 这种方式设置过期时间，  mset key value key value设置多个\n-\t查看字符串:get key，mget key1 key2,获取多个\n-\t字符串的追加:append key value\n-\t查看所有的键:keys 通配符\n-\t查看键是否存在:exists key\n-\t查看键值的类型:type key\n-\t设置过期时间:expire key sconds\n-\t查看键的有效时间:ttl key\n-\t删除:del key1 key2……\n\n#### hash类型\n> hash本来就有key，hash的value就是一个字符串string，所以还有一个string的key\n-\t定义哈希类型:hset key string-key value，  hmset key string-key1 value1 string-key2 value2一次设置多个，一个hash中可以有多个value\n-\t查看指定键的值：hkey key\n-\t获取hash的值:hget key string-key,   hmget key string-key1 string-key2……多个值，  hvals key获取所有的值\n-\t删除:del key，删除整个hash，hdel key string-key删除对应的hash值\n\n#### 列表类型（list）\n-\t定义：lpush key value vlaue2……从左侧插入，rpush key value value2…… 从右侧插入，linsert key before或者after 某一个已经存在的value value value2……\n-\t获取:lrange key start stop\n-\t修改:lset key index new_value\n-\t删除:lrem key count value,count是一个数字，表示删除多少个（相同元素），整数表示前往后，负数从后往前，为0的时候表示删除所有给定的value\n\n\n#### 集合类型(set)\n> 不能重复，无序\n-\t定义:sadd key value value2……\n-\t获取:smenbers key获取所有元素\n-\t删除:srem key value value2……\n\t\n\n#### 有序集合(zset)\n> 有序权重从小到大排序\n-\t定义:zadd key 权重 value 权重2 value2……,权重就是数字\n-\t获取:zrange key start stop\n-\t获取给定的权值范围元素:zrangebyscore key start stop\n-\t获取权值:zscore key value\n-\t删除指定的元素:zrem key value1 value2……\n-\t删除给定权值范围元素:zremrangebyscore key start stop\n\n\n#### Redis和python的交互:\n\n##### python基本使用\n```python\nfrom redis import *\nxx = StrictRedis(host = 'xxx', port = 6379, db = num)\n```\n> 对xx进行操作\n\n##### django中使用Redis:多数用来 存储session\n```python\npip install django-redis-sessions\n\n# setting.py中设置：\nSESSION_ENGINE = 'redis_sessions.session'\nSESSION_REDIS_HOST = 'localhost'\nSESSION_REDIS_PORT = 6379\nSESSION_REDIS_DB = 2\nSESSION_REDIS_PASSWORD = ''\nSESSION_REDIS_PREFIX = 'session'\n# 这样就可以将原本存储在django的数据库中的session存储到redis中，存储成hash\n\n# 配置成caches:\nCACHES = {\n    \"default\": {\n    \"BACKEND\": \"django_redis.cache.RedisCache\",\n    \"LOCATION\": \"redis://127.0.0.1:6379/2\",\n    \"OPTIONS\": {\n        \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n    }\n    }\n}\n\n# 使用\nfrom dajango_redis import get_redis_connection\nxxx = get_redis_connection('default')\n# 可以使用redis中的所有方法\n```\n\t\n\t\n\t\n### redis的问题\n>\t缓存穿透：用户查询一个数据库中一定不会有的数据，比如id=-1,因为数据库中没有这个数据，所以不会保存到缓存中，下次再来访问的时候，缓存中没有，又会去数据库中查询，这样就增加了数据库的压力，如果被黑客发现了，就会利用这个漏洞来攻击数据库，可能会让数据库崩溃，解决办法就是就算没有查到，也放到缓存中，只不过值为null，然后把过期时间设置的短一点。\n\t\n>\t缓存雪崩：意思就是大量的缓存数据同时失效（过期），这个时候，又有大并发的请求的话，就会对数据库加大访问压力，可能让数据库崩溃，解决办法就是，可以设置不同的过期时间，如果是双十一这种可以设置永不过期。\n\t\n>\t缓存击穿：意思就是用户频繁会访问的key，比如，双十一有一个活动见做一分钱领取iphone13 pro max，在非常多的人访问的时候，在这种大并发的情况下，如果缓存中的这个key过期了，那么对数据的压力就太大了，解决办法就是设置这个key用不过期。\n","slug":"redis基础","published":1,"updated":"2023-01-19T08:53:33.520Z","_id":"cld2uqf6n000r1svk5k99231s","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"NoSQL一种新出现的数据库-not-only-sql\"><a href=\"#NoSQL一种新出现的数据库-not-only-sql\" class=\"headerlink\" title=\"NoSQL一种新出现的数据库(not only sql)\"></a>NoSQL一种新出现的数据库(not only sql)</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">1、不认识sql语句\n2、存储结构和关系型数据库中的关系表完全不同，nosql存储的数据都是kv（key-value）形式\n3、nosql的世界没有一种通用的语言，每一种nosql数据库都有自己的api和语法，以及应用场景\n4、nosql的产品种类多\n\n### Redis数据库\n1、支持数据的持久化\n2、支持简单的key-vlaue，还有list,set,zset,hash等类型\n3、支持备份，master-slave模式的数据备份<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Redis数据类型\"><a href=\"#Redis数据类型\" class=\"headerlink\" title=\"Redis数据类型\"></a>Redis数据类型</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">1、字符串string\n2、哈希hash\n3、列表list\n4、集合set\n5、有序集合zset<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"Redis操作行为\"><a href=\"#Redis操作行为\" class=\"headerlink\" title=\"Redis操作行为\"></a>Redis操作行为</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、保存\n2、修改\n3、获取\n4、删除<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"string类型\"><a href=\"#string类型\" class=\"headerlink\" title=\"string类型\"></a>string类型</h4><blockquote>\n<p>redis中最基础的数据类型，是二进制安全的，可以接受任何格式的数据，照片、json等</p>\n</blockquote>\n<ul>\n<li>   定义字符串:set key value,  setex key sconds value 这种方式设置过期时间，  mset key value key value设置多个</li>\n<li>   查看字符串:get key，mget key1 key2,获取多个</li>\n<li>   字符串的追加:append key value</li>\n<li>   查看所有的键:keys 通配符</li>\n<li>   查看键是否存在:exists key</li>\n<li>   查看键值的类型:type key</li>\n<li>   设置过期时间:expire key sconds</li>\n<li>   查看键的有效时间:ttl key</li>\n<li>   删除:del key1 key2……</li>\n</ul>\n<h4 id=\"hash类型\"><a href=\"#hash类型\" class=\"headerlink\" title=\"hash类型\"></a>hash类型</h4><blockquote>\n<p>hash本来就有key，hash的value就是一个字符串string，所以还有一个string的key</p>\n</blockquote>\n<ul>\n<li>   定义哈希类型:hset key string-key value，  hmset key string-key1 value1 string-key2 value2一次设置多个，一个hash中可以有多个value</li>\n<li>   查看指定键的值：hkey key</li>\n<li>   获取hash的值:hget key string-key,   hmget key string-key1 string-key2……多个值，  hvals key获取所有的值</li>\n<li>   删除:del key，删除整个hash，hdel key string-key删除对应的hash值</li>\n</ul>\n<h4 id=\"列表类型（list）\"><a href=\"#列表类型（list）\" class=\"headerlink\" title=\"列表类型（list）\"></a>列表类型（list）</h4><ul>\n<li>   定义：lpush key value vlaue2……从左侧插入，rpush key value value2…… 从右侧插入，linsert key before或者after 某一个已经存在的value value value2……</li>\n<li>   获取:lrange key start stop</li>\n<li>   修改:lset key index new_value</li>\n<li>   删除:lrem key count value,count是一个数字，表示删除多少个（相同元素），整数表示前往后，负数从后往前，为0的时候表示删除所有给定的value</li>\n</ul>\n<h4 id=\"集合类型-set\"><a href=\"#集合类型-set\" class=\"headerlink\" title=\"集合类型(set)\"></a>集合类型(set)</h4><blockquote>\n<p>不能重复，无序</p>\n</blockquote>\n<ul>\n<li>   定义:sadd key value value2……</li>\n<li>   获取:smenbers key获取所有元素</li>\n<li> 删除:srem key value value2……</li>\n</ul>\n<h4 id=\"有序集合-zset\"><a href=\"#有序集合-zset\" class=\"headerlink\" title=\"有序集合(zset)\"></a>有序集合(zset)</h4><blockquote>\n<p>有序权重从小到大排序</p>\n</blockquote>\n<ul>\n<li>   定义:zadd key 权重 value 权重2 value2……,权重就是数字</li>\n<li>   获取:zrange key start stop</li>\n<li>   获取给定的权值范围元素:zrangebyscore key start stop</li>\n<li>   获取权值:zscore key value</li>\n<li>   删除指定的元素:zrem key value1 value2……</li>\n<li>   删除给定权值范围元素:zremrangebyscore key start stop</li>\n</ul>\n<h4 id=\"Redis和python的交互\"><a href=\"#Redis和python的交互\" class=\"headerlink\" title=\"Redis和python的交互:\"></a>Redis和python的交互:</h4><h5 id=\"python基本使用\"><a href=\"#python基本使用\" class=\"headerlink\" title=\"python基本使用\"></a>python基本使用</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> redis <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\nxx <span class=\"token operator\">=</span> StrictRedis<span class=\"token punctuation\">(</span>host <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span> port <span class=\"token operator\">=</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> db <span class=\"token operator\">=</span> num<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>对xx进行操作</p>\n</blockquote>\n<h5 id=\"django中使用Redis-多数用来-存储session\"><a href=\"#django中使用Redis-多数用来-存储session\" class=\"headerlink\" title=\"django中使用Redis:多数用来 存储session\"></a>django中使用Redis:多数用来 存储session</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pip install django<span class=\"token operator\">-</span>redis<span class=\"token operator\">-</span>sessions\n\n<span class=\"token comment\"># setting.py中设置：</span>\nSESSION_ENGINE <span class=\"token operator\">=</span> <span class=\"token string\">'redis_sessions.session'</span>\nSESSION_REDIS_HOST <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\nSESSION_REDIS_PORT <span class=\"token operator\">=</span> <span class=\"token number\">6379</span>\nSESSION_REDIS_DB <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nSESSION_REDIS_PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\nSESSION_REDIS_PREFIX <span class=\"token operator\">=</span> <span class=\"token string\">'session'</span>\n<span class=\"token comment\"># 这样就可以将原本存储在django的数据库中的session存储到redis中，存储成hash</span>\n\n<span class=\"token comment\"># 配置成caches:</span>\nCACHES <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"BACKEND\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"django_redis.cache.RedisCache\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"LOCATION\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"redis://127.0.0.1:6379/2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"OPTIONS\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"CLIENT_CLASS\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"django_redis.client.DefaultClient\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 使用</span>\n<span class=\"token keyword\">from</span> dajango_redis <span class=\"token keyword\">import</span> get_redis_connection\nxxx <span class=\"token operator\">=</span> get_redis_connection<span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 可以使用redis中的所有方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"redis的问题\"><a href=\"#redis的问题\" class=\"headerlink\" title=\"redis的问题\"></a>redis的问题</h3><blockquote>\n<p>   缓存穿透：用户查询一个数据库中一定不会有的数据，比如id=-1,因为数据库中没有这个数据，所以不会保存到缓存中，下次再来访问的时候，缓存中没有，又会去数据库中查询，这样就增加了数据库的压力，如果被黑客发现了，就会利用这个漏洞来攻击数据库，可能会让数据库崩溃，解决办法就是就算没有查到，也放到缓存中，只不过值为null，然后把过期时间设置的短一点。</p>\n</blockquote>\n<blockquote>\n<p>   缓存雪崩：意思就是大量的缓存数据同时失效（过期），这个时候，又有大并发的请求的话，就会对数据库加大访问压力，可能让数据库崩溃，解决办法就是，可以设置不同的过期时间，如果是双十一这种可以设置永不过期。</p>\n</blockquote>\n<blockquote>\n<p>   缓存击穿：意思就是用户频繁会访问的key，比如，双十一有一个活动见做一分钱领取iphone13 pro max，在非常多的人访问的时候，在这种大并发的情况下，如果缓存中的这个key过期了，那么对数据的压力就太大了，解决办法就是设置这个key用不过期。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h3 id=\"NoSQL一种新出现的数据库-not-only-sql\"><a href=\"#NoSQL一种新出现的数据库-not-only-sql\" class=\"headerlink\" title=\"NoSQL一种新出现的数据库(not only sql)\"></a>NoSQL一种新出现的数据库(not only sql)</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">1、不认识sql语句\n2、存储结构和关系型数据库中的关系表完全不同，nosql存储的数据都是kv（key-value）形式\n3、nosql的世界没有一种通用的语言，每一种nosql数据库都有自己的api和语法，以及应用场景\n4、nosql的产品种类多\n\n### Redis数据库\n1、支持数据的持久化\n2、支持简单的key-vlaue，还有list,set,zset,hash等类型\n3、支持备份，master-slave模式的数据备份<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Redis数据类型\"><a href=\"#Redis数据类型\" class=\"headerlink\" title=\"Redis数据类型\"></a>Redis数据类型</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">1、字符串string\n2、哈希hash\n3、列表list\n4、集合set\n5、有序集合zset<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"Redis操作行为\"><a href=\"#Redis操作行为\" class=\"headerlink\" title=\"Redis操作行为\"></a>Redis操作行为</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1、保存\n2、修改\n3、获取\n4、删除<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"string类型\"><a href=\"#string类型\" class=\"headerlink\" title=\"string类型\"></a>string类型</h4><blockquote>\n<p>redis中最基础的数据类型，是二进制安全的，可以接受任何格式的数据，照片、json等</p>\n</blockquote>\n<ul>\n<li>   定义字符串:set key value,  setex key sconds value 这种方式设置过期时间，  mset key value key value设置多个</li>\n<li>   查看字符串:get key，mget key1 key2,获取多个</li>\n<li>   字符串的追加:append key value</li>\n<li>   查看所有的键:keys 通配符</li>\n<li>   查看键是否存在:exists key</li>\n<li>   查看键值的类型:type key</li>\n<li>   设置过期时间:expire key sconds</li>\n<li>   查看键的有效时间:ttl key</li>\n<li>   删除:del key1 key2……</li>\n</ul>\n<h4 id=\"hash类型\"><a href=\"#hash类型\" class=\"headerlink\" title=\"hash类型\"></a>hash类型</h4><blockquote>\n<p>hash本来就有key，hash的value就是一个字符串string，所以还有一个string的key</p>\n</blockquote>\n<ul>\n<li>   定义哈希类型:hset key string-key value，  hmset key string-key1 value1 string-key2 value2一次设置多个，一个hash中可以有多个value</li>\n<li>   查看指定键的值：hkey key</li>\n<li>   获取hash的值:hget key string-key,   hmget key string-key1 string-key2……多个值，  hvals key获取所有的值</li>\n<li>   删除:del key，删除整个hash，hdel key string-key删除对应的hash值</li>\n</ul>\n<h4 id=\"列表类型（list）\"><a href=\"#列表类型（list）\" class=\"headerlink\" title=\"列表类型（list）\"></a>列表类型（list）</h4><ul>\n<li>   定义：lpush key value vlaue2……从左侧插入，rpush key value value2…… 从右侧插入，linsert key before或者after 某一个已经存在的value value value2……</li>\n<li>   获取:lrange key start stop</li>\n<li>   修改:lset key index new_value</li>\n<li>   删除:lrem key count value,count是一个数字，表示删除多少个（相同元素），整数表示前往后，负数从后往前，为0的时候表示删除所有给定的value</li>\n</ul>\n<h4 id=\"集合类型-set\"><a href=\"#集合类型-set\" class=\"headerlink\" title=\"集合类型(set)\"></a>集合类型(set)</h4><blockquote>\n<p>不能重复，无序</p>\n</blockquote>\n<ul>\n<li>   定义:sadd key value value2……</li>\n<li>   获取:smenbers key获取所有元素</li>\n<li> 删除:srem key value value2……</li>\n</ul>\n<h4 id=\"有序集合-zset\"><a href=\"#有序集合-zset\" class=\"headerlink\" title=\"有序集合(zset)\"></a>有序集合(zset)</h4><blockquote>\n<p>有序权重从小到大排序</p>\n</blockquote>\n<ul>\n<li>   定义:zadd key 权重 value 权重2 value2……,权重就是数字</li>\n<li>   获取:zrange key start stop</li>\n<li>   获取给定的权值范围元素:zrangebyscore key start stop</li>\n<li>   获取权值:zscore key value</li>\n<li>   删除指定的元素:zrem key value1 value2……</li>\n<li>   删除给定权值范围元素:zremrangebyscore key start stop</li>\n</ul>\n<h4 id=\"Redis和python的交互\"><a href=\"#Redis和python的交互\" class=\"headerlink\" title=\"Redis和python的交互:\"></a>Redis和python的交互:</h4><h5 id=\"python基本使用\"><a href=\"#python基本使用\" class=\"headerlink\" title=\"python基本使用\"></a>python基本使用</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> redis <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\nxx <span class=\"token operator\">=</span> StrictRedis<span class=\"token punctuation\">(</span>host <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span> port <span class=\"token operator\">=</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> db <span class=\"token operator\">=</span> num<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>对xx进行操作</p>\n</blockquote>\n<h5 id=\"django中使用Redis-多数用来-存储session\"><a href=\"#django中使用Redis-多数用来-存储session\" class=\"headerlink\" title=\"django中使用Redis:多数用来 存储session\"></a>django中使用Redis:多数用来 存储session</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pip install django<span class=\"token operator\">-</span>redis<span class=\"token operator\">-</span>sessions\n\n<span class=\"token comment\"># setting.py中设置：</span>\nSESSION_ENGINE <span class=\"token operator\">=</span> <span class=\"token string\">'redis_sessions.session'</span>\nSESSION_REDIS_HOST <span class=\"token operator\">=</span> <span class=\"token string\">'localhost'</span>\nSESSION_REDIS_PORT <span class=\"token operator\">=</span> <span class=\"token number\">6379</span>\nSESSION_REDIS_DB <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nSESSION_REDIS_PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\nSESSION_REDIS_PREFIX <span class=\"token operator\">=</span> <span class=\"token string\">'session'</span>\n<span class=\"token comment\"># 这样就可以将原本存储在django的数据库中的session存储到redis中，存储成hash</span>\n\n<span class=\"token comment\"># 配置成caches:</span>\nCACHES <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"BACKEND\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"django_redis.cache.RedisCache\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"LOCATION\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"redis://127.0.0.1:6379/2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"OPTIONS\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"CLIENT_CLASS\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"django_redis.client.DefaultClient\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 使用</span>\n<span class=\"token keyword\">from</span> dajango_redis <span class=\"token keyword\">import</span> get_redis_connection\nxxx <span class=\"token operator\">=</span> get_redis_connection<span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 可以使用redis中的所有方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"redis的问题\"><a href=\"#redis的问题\" class=\"headerlink\" title=\"redis的问题\"></a>redis的问题</h3><blockquote>\n<p>   缓存穿透：用户查询一个数据库中一定不会有的数据，比如id=-1,因为数据库中没有这个数据，所以不会保存到缓存中，下次再来访问的时候，缓存中没有，又会去数据库中查询，这样就增加了数据库的压力，如果被黑客发现了，就会利用这个漏洞来攻击数据库，可能会让数据库崩溃，解决办法就是就算没有查到，也放到缓存中，只不过值为null，然后把过期时间设置的短一点。</p>\n</blockquote>\n<blockquote>\n<p>   缓存雪崩：意思就是大量的缓存数据同时失效（过期），这个时候，又有大并发的请求的话，就会对数据库加大访问压力，可能让数据库崩溃，解决办法就是，可以设置不同的过期时间，如果是双十一这种可以设置永不过期。</p>\n</blockquote>\n<blockquote>\n<p>   缓存击穿：意思就是用户频繁会访问的key，比如，双十一有一个活动见做一分钱领取iphone13 pro max，在非常多的人访问的时候，在这种大并发的情况下，如果缓存中的这个key过期了，那么对数据的压力就太大了，解决办法就是设置这个key用不过期。</p>\n</blockquote>\n"},{"title":"迭代器","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T06:08:40.000Z","password":null,"summary":"python迭代器","_content":"## 迭代器\n> 可以一个一个的取，取一个用一个，迭代器会主动暂停\n\n> - 1、from collections import Iterator,这个类可以判断某个对象是不是迭代器\n\n> - 2、from collections import Iterable,这个类可以判断某个对象可不可以迭代，最主要的是它可以产生迭代器,如果要用Iterable来创建一个迭代器，那么必须使用__iter__方法和__next__方法，且两个方法是共生的，有了iter就一定有next，通过next来迭代，通过iter让对象可以迭代，这个对象多指不规律的，定义成一个类的,next的返回值用户要用for循环来遍历，next就是一个迭代的规则\n\n> - 3、可以一个一个的取，取一个用一个:方法\n\n```python\nprint(f.__next__()) # 取第一个\nprint(f.__next__()) # 取第二个\nprint(f.__next__()) # 取第三\n ```\n\n## 生成器\n> 可以用一个拿一个，不用就不管，生成器会自动暂停\n\n\n> -    1、生成器是一个特殊的迭代器，并且不需要导入任何的包，用了yield X的函数就是生成器，也就是说如果函数里面出现了yield，那么这个函数就不再是函数，而是一个生成器调用的时候，也是创建的生成器对象，\n> -    2、生成器不会存储数据，而只是用来产生数据的，多就用多久拿出来使用，大大节省了存储空间\n> -    3、生成器的启动方法:\n\n```python\n1、re = next(obj) # 这样就会返回生成器中yield后面的值，也就是说re = yield后面的变量\n2、re = send(\"传递的参数\") # 传递的参数\"就是给”yield x\"整体赋值\n```\n> -    4、可以用一个拿一个，不用就不管\n  \n```python\nre = next(obj)\nprint(re)\nre = next(obj)\nprint(re)\nre = next(obj)\nprint(re)\nre = next(obj)\nprint(re)\nre = obj.send(\"hahah\")\nprint(re)\n ```","source":"_posts/迭代器.md","raw":"---\ntitle: 迭代器\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 14:08:40\npassword:\nsummary: python迭代器\ntags: basic\ncategories: Python\n---\n## 迭代器\n> 可以一个一个的取，取一个用一个，迭代器会主动暂停\n\n> - 1、from collections import Iterator,这个类可以判断某个对象是不是迭代器\n\n> - 2、from collections import Iterable,这个类可以判断某个对象可不可以迭代，最主要的是它可以产生迭代器,如果要用Iterable来创建一个迭代器，那么必须使用__iter__方法和__next__方法，且两个方法是共生的，有了iter就一定有next，通过next来迭代，通过iter让对象可以迭代，这个对象多指不规律的，定义成一个类的,next的返回值用户要用for循环来遍历，next就是一个迭代的规则\n\n> - 3、可以一个一个的取，取一个用一个:方法\n\n```python\nprint(f.__next__()) # 取第一个\nprint(f.__next__()) # 取第二个\nprint(f.__next__()) # 取第三\n ```\n\n## 生成器\n> 可以用一个拿一个，不用就不管，生成器会自动暂停\n\n\n> -    1、生成器是一个特殊的迭代器，并且不需要导入任何的包，用了yield X的函数就是生成器，也就是说如果函数里面出现了yield，那么这个函数就不再是函数，而是一个生成器调用的时候，也是创建的生成器对象，\n> -    2、生成器不会存储数据，而只是用来产生数据的，多就用多久拿出来使用，大大节省了存储空间\n> -    3、生成器的启动方法:\n\n```python\n1、re = next(obj) # 这样就会返回生成器中yield后面的值，也就是说re = yield后面的变量\n2、re = send(\"传递的参数\") # 传递的参数\"就是给”yield x\"整体赋值\n```\n> -    4、可以用一个拿一个，不用就不管\n  \n```python\nre = next(obj)\nprint(re)\nre = next(obj)\nprint(re)\nre = next(obj)\nprint(re)\nre = next(obj)\nprint(re)\nre = obj.send(\"hahah\")\nprint(re)\n ```","slug":"迭代器","published":1,"updated":"2023-01-19T08:51:40.481Z","_id":"cld2uqf6o000u1svkfys8d4fe","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><blockquote>\n<p>可以一个一个的取，取一个用一个，迭代器会主动暂停</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>1、from collections import Iterator,这个类可以判断某个对象是不是迭代器</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>2、from collections import Iterable,这个类可以判断某个对象可不可以迭代，最主要的是它可以产生迭代器,如果要用Iterable来创建一个迭代器，那么必须使用__iter__方法和__next__方法，且两个方法是共生的，有了iter就一定有next，通过next来迭代，通过iter让对象可以迭代，这个对象多指不规律的，定义成一个类的,next的返回值用户要用for循环来遍历，next就是一个迭代的规则</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>3、可以一个一个的取，取一个用一个:方法</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 取第一个</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 取第二个</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 取第三</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><blockquote>\n<p>可以用一个拿一个，不用就不管，生成器会自动暂停</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>   1、生成器是一个特殊的迭代器，并且不需要导入任何的包，用了yield X的函数就是生成器，也就是说如果函数里面出现了yield，那么这个函数就不再是函数，而是一个生成器调用的时候，也是创建的生成器对象，</li>\n<li>   2、生成器不会存储数据，而只是用来产生数据的，多就用多久拿出来使用，大大节省了存储空间</li>\n<li>   3、生成器的启动方法:</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span>、re <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这样就会返回生成器中yield后面的值，也就是说re = yield后面的变量</span>\n<span class=\"token number\">2</span>、re <span class=\"token operator\">=</span> send<span class=\"token punctuation\">(</span><span class=\"token string\">\"传递的参数\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 传递的参数\"就是给”yield x\"整体赋值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<ul>\n<li>   4、可以用一个拿一个，不用就不管</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span>\nre <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span>\nre <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span>\nre <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span>\nre <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"hahah\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><blockquote>\n<p>可以一个一个的取，取一个用一个，迭代器会主动暂停</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>1、from collections import Iterator,这个类可以判断某个对象是不是迭代器</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>2、from collections import Iterable,这个类可以判断某个对象可不可以迭代，最主要的是它可以产生迭代器,如果要用Iterable来创建一个迭代器，那么必须使用__iter__方法和__next__方法，且两个方法是共生的，有了iter就一定有next，通过next来迭代，通过iter让对象可以迭代，这个对象多指不规律的，定义成一个类的,next的返回值用户要用for循环来遍历，next就是一个迭代的规则</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>3、可以一个一个的取，取一个用一个:方法</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 取第一个</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 取第二个</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>__next__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 取第三</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><blockquote>\n<p>可以用一个拿一个，不用就不管，生成器会自动暂停</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>   1、生成器是一个特殊的迭代器，并且不需要导入任何的包，用了yield X的函数就是生成器，也就是说如果函数里面出现了yield，那么这个函数就不再是函数，而是一个生成器调用的时候，也是创建的生成器对象，</li>\n<li>   2、生成器不会存储数据，而只是用来产生数据的，多就用多久拿出来使用，大大节省了存储空间</li>\n<li>   3、生成器的启动方法:</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span>、re <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 这样就会返回生成器中yield后面的值，也就是说re = yield后面的变量</span>\n<span class=\"token number\">2</span>、re <span class=\"token operator\">=</span> send<span class=\"token punctuation\">(</span><span class=\"token string\">\"传递的参数\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 传递的参数\"就是给”yield x\"整体赋值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<ul>\n<li>   4、可以用一个拿一个，不用就不管</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span>\nre <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span>\nre <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span>\nre <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span>\nre <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"hahah\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"闭包","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-19T05:56:46.000Z","password":null,"summary":"python闭包概念","_content":"## 闭包\n> 在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包(python可以返回函数，特性之一)\n\n```python\ndef startAt(x):\n\tdef incrementBy(y):\n    \treturn x+y\n    return incrementBy\n    \n a = startAt(1)\n print(a)\n print(a(1))\n```\n## 闭包的格式\n```python\ndef func1(参数1, 参数2……):\n    def func2(参数1, 参数2……):\n        代码\n    return func2\n ```\n\n> 说明两点:\n>  - global:用于函数内,修改全局变量和其他局部变量的时候申明，但是如果不修改全局变量也可以不使用global关键字\n>  - nonlocal:用于内部函数要修改外部函数的变量的时候申明，声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量\n\n## 匿名函数\n> - 定义:   变量名 = lambda 参数:返回值\n> - 调用:   变量名(参数)\n\n```python\nsum = lambda arg1, arg2: arg1 + arg2\n\nsum(1,2)\n```\n","source":"_posts/闭包.md","raw":"---\ntitle: 闭包\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-19 13:56:46\npassword:\nsummary: python闭包概念\ntags: basic\ncategories: Python\n---\n## 闭包\n> 在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包(python可以返回函数，特性之一)\n\n```python\ndef startAt(x):\n\tdef incrementBy(y):\n    \treturn x+y\n    return incrementBy\n    \n a = startAt(1)\n print(a)\n print(a(1))\n```\n## 闭包的格式\n```python\ndef func1(参数1, 参数2……):\n    def func2(参数1, 参数2……):\n        代码\n    return func2\n ```\n\n> 说明两点:\n>  - global:用于函数内,修改全局变量和其他局部变量的时候申明，但是如果不修改全局变量也可以不使用global关键字\n>  - nonlocal:用于内部函数要修改外部函数的变量的时候申明，声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量\n\n## 匿名函数\n> - 定义:   变量名 = lambda 参数:返回值\n> - 调用:   变量名(参数)\n\n```python\nsum = lambda arg1, arg2: arg1 + arg2\n\nsum(1,2)\n```\n","slug":"闭包","published":1,"updated":"2023-01-19T06:36:18.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld2uqf6q000x1svk42f08a3r","content":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<p>在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包(python可以返回函数，特性之一)</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">startAt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">incrementBy</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y\n    <span class=\"token keyword\">return</span> incrementBy\n    \n a <span class=\"token operator\">=</span> startAt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"闭包的格式\"><a href=\"#闭包的格式\" class=\"headerlink\" title=\"闭包的格式\"></a>闭包的格式</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 参数<span class=\"token number\">2</span>……<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span>参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 参数<span class=\"token number\">2</span>……<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        代码\n    <span class=\"token keyword\">return</span> func2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>说明两点:</p>\n<ul>\n<li>global:用于函数内,修改全局变量和其他局部变量的时候申明，但是如果不修改全局变量也可以不使用global关键字</li>\n<li>nonlocal:用于内部函数要修改外部函数的变量的时候申明，声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量</li>\n</ul>\n</blockquote>\n<h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2><blockquote>\n<ul>\n<li>定义:   变量名 = lambda 参数:返回值</li>\n<li>调用:   变量名(参数)</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> arg1 <span class=\"token operator\">+</span> arg2\n\n<span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<p>在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包(python可以返回函数，特性之一)</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">startAt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">incrementBy</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y\n    <span class=\"token keyword\">return</span> incrementBy\n    \n a <span class=\"token operator\">=</span> startAt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"闭包的格式\"><a href=\"#闭包的格式\" class=\"headerlink\" title=\"闭包的格式\"></a>闭包的格式</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 参数<span class=\"token number\">2</span>……<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span>参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 参数<span class=\"token number\">2</span>……<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        代码\n    <span class=\"token keyword\">return</span> func2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>说明两点:</p>\n<ul>\n<li>global:用于函数内,修改全局变量和其他局部变量的时候申明，但是如果不修改全局变量也可以不使用global关键字</li>\n<li>nonlocal:用于内部函数要修改外部函数的变量的时候申明，声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量</li>\n</ul>\n</blockquote>\n<h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2><blockquote>\n<ul>\n<li>定义:   变量名 = lambda 参数:返回值</li>\n<li>调用:   变量名(参数)</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> arg1 <span class=\"token operator\">+</span> arg2\n\n<span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clcy469mn0001covgh6zq60to","category_id":"clcy469my0004covg3lxmfaba","_id":"clcy469n7000ccovgf6ws8d71"},{"post_id":"clcy469mu0003covggeohbi2n","category_id":"clcy469n50009covg09yq6ii2","_id":"clcy469na000gcovghw2g6cs0"},{"post_id":"clcy469n20007covge6l3b3v1","category_id":"clcy469n50009covg09yq6ii2","_id":"clcy469nb000icovghs9w2kj4"},{"post_id":"clcy8glkx000014vgdo08dv4e","category_id":"clcy8gll2000114vg0olfcq7q","_id":"clcy8gll5000414vgd6eshzzd"},{"post_id":"cld2uqf5u00001svk6huy2u4c","category_id":"cld2uqf6300021svk1v1pfjwo","_id":"cld2uqf6g000d1svkdcm8e1rf"},{"post_id":"cld2uqf6000011svk6hw34k0k","category_id":"cld2uqf6300021svk1v1pfjwo","_id":"cld2uqf6j000i1svk1ecca8t6"},{"post_id":"cld2uqf6h000f1svkh5atfjws","category_id":"cld2uqf6300021svk1v1pfjwo","_id":"cld2uqf6m000o1svk7zze1mr5"},{"post_id":"cld2uqf6600041svk69nrdz5r","category_id":"cld2uqf6f000c1svk6b245h1i","_id":"cld2uqf6o000s1svk84n66yyy"},{"post_id":"cld2uqf6i000h1svk7fxp9vu0","category_id":"cld2uqf6300021svk1v1pfjwo","_id":"cld2uqf6p000v1svkdngogwy4"},{"post_id":"cld2uqf6k000l1svkargs8pjk","category_id":"cld2uqf6300021svk1v1pfjwo","_id":"cld2uqf6r000y1svkeyhacpdl"},{"post_id":"cld2uqf6700051svk3x1qckjr","category_id":"cld2uqf6f000c1svk6b245h1i","_id":"cld2uqf6r00111svkgbx7bax3"},{"post_id":"cld2uqf6l000n1svk0sejhraj","category_id":"cld2uqf6300021svk1v1pfjwo","_id":"cld2uqf6s00131svk71or3qk1"},{"post_id":"cld2uqf6o000u1svkfys8d4fe","category_id":"cld2uqf6300021svk1v1pfjwo","_id":"cld2uqf6t00181svk1dqv6nya"},{"post_id":"cld2uqf6q000x1svk42f08a3r","category_id":"cld2uqf6300021svk1v1pfjwo","_id":"cld2uqf6u001a1svk6xmbgyw4"},{"post_id":"cld2uqf6d000a1svkganhgsee","category_id":"cld2uqf6f000c1svk6b245h1i","_id":"cld2uqf6u001c1svk6er97xms"},{"post_id":"cld2uqf6e000b1svketri22w7","category_id":"cld2uqf6f000c1svk6b245h1i","_id":"cld2uqf6u001e1svk6zqg03p3"},{"post_id":"cld2uqf6n000r1svk5k99231s","category_id":"cld2uqf6t00171svk0o0xg68t","_id":"cld2uqf6v001g1svkarcnhca6"},{"post_id":"cld2uqf6900061svkd4gebgfn","category_id":"cld2uqf6t00171svk0o0xg68t","_id":"cld3128ro0000ecvkbtdg3m65"}],"PostTag":[{"post_id":"clcy469mn0001covgh6zq60to","tag_id":"clcy469n00005covg80d86gw0","_id":"clcy469n7000bcovgbtnrhhdw"},{"post_id":"clcy469mu0003covggeohbi2n","tag_id":"clcy469n5000acovgbaxmbuxg","_id":"clcy469n9000fcovg7owm15db"},{"post_id":"clcy469n20007covge6l3b3v1","tag_id":"clcy469n5000acovgbaxmbuxg","_id":"clcy469na000hcovg24qpet4t"},{"post_id":"clcy8glkx000014vgdo08dv4e","tag_id":"clcy8gll4000214vgdjee3hqi","_id":"clcy8gll5000314vg84e0ddu2"},{"post_id":"cld2uqf5u00001svk6huy2u4c","tag_id":"cld2uqf6500031svk0azq86zm","_id":"cld2uqf6c00091svk3gql5yvo"},{"post_id":"cld2uqf6000011svk6hw34k0k","tag_id":"cld2uqf6b00081svk1uewbwy0","_id":"cld2uqf6h000g1svkh23w7rix"},{"post_id":"cld2uqf6600041svk69nrdz5r","tag_id":"cld2uqf6g000e1svk9tw7ejjc","_id":"cld2uqf6l000m1svkfmfh0ek5"},{"post_id":"cld2uqf6700051svk3x1qckjr","tag_id":"cld2uqf6j000k1svken6eeywx","_id":"cld2uqf6o000t1svkex9m68pj"},{"post_id":"cld2uqf6900061svkd4gebgfn","tag_id":"cld2uqf6n000q1svk2m7beiec","_id":"cld2uqf6r00101svk1a4fdctr"},{"post_id":"cld2uqf6d000a1svkganhgsee","tag_id":"cld2uqf6r000z1svk9te01nu3","_id":"cld2uqf6t00161svkhz18gywf"},{"post_id":"cld2uqf6h000f1svkh5atfjws","tag_id":"cld2uqf6u00191svkd0rl8ha4","_id":"cld2uqf6v001f1svk6gjs35g0"},{"post_id":"cld2uqf6i000h1svk7fxp9vu0","tag_id":"cld2uqf6u00191svkd0rl8ha4","_id":"cld2uqf6w001i1svk9xhv8v74"},{"post_id":"cld2uqf6k000l1svkargs8pjk","tag_id":"cld2uqf6u00191svkd0rl8ha4","_id":"cld2uqf6w001k1svka4rlc1uj"},{"post_id":"cld2uqf6l000n1svk0sejhraj","tag_id":"cld2uqf6u00191svkd0rl8ha4","_id":"cld2uqf6x001m1svk8mmy4b00"},{"post_id":"cld2uqf6n000r1svk5k99231s","tag_id":"cld2uqf6w001l1svk1pd4etzw","_id":"cld2uqf6x001o1svkf8as6ysd"},{"post_id":"cld2uqf6o000u1svkfys8d4fe","tag_id":"cld2uqf6u00191svkd0rl8ha4","_id":"cld2uqf6y001q1svk3qoi5i3u"},{"post_id":"cld2uqf6q000x1svk42f08a3r","tag_id":"cld2uqf6u00191svkd0rl8ha4","_id":"cld2uqf6y001r1svk8atefz5i"},{"post_id":"cld2uqf6e000b1svketri22w7","tag_id":"cld2uqf6g000e1svk9tw7ejjc","_id":"cld2zvki10000bsvkhp9h3we0"}],"Tag":[{"name":"wifi","_id":"clcy469n00005covg80d86gw0"},{"name":"hexo","_id":"clcy469n5000acovgbaxmbuxg"},{"name":"cloud","_id":"clcy8gll4000214vgdjee3hqi"},{"name":"django","_id":"cld2uqf6500031svk0azq86zm"},{"name":"flask","_id":"cld2uqf6b00081svk1uewbwy0"},{"name":"fdfs","_id":"cld2uqf6g000e1svk9tw7ejjc"},{"name":"git","_id":"cld2uqf6j000k1svken6eeywx"},{"name":"mongo","_id":"cld2uqf6n000q1svk2m7beiec"},{"name":"nginx","_id":"cld2uqf6r000z1svk9te01nu3"},{"name":"-nginx -fdfs","_id":"cld2uqf6s00141svkcbsxabpi"},{"name":"basic","_id":"cld2uqf6u00191svkd0rl8ha4"},{"name":"redis","_id":"cld2uqf6w001l1svk1pd4etzw"},{"name":"nginx - fdfs","_id":"cld2zpb8s000054vk28z35tiw"}]}}